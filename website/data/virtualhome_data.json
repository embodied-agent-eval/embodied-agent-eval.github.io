{
  "data": {
    "scene_1": {
      "27_2": {
        "task_name": "Wash clothes",
        "natural_language_description": "Walk to the kitchen and find the basket of clothes. Put the soap and clothes into the washing machine. Turn on the washing machine.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1001,
              "class_name": "washing_machine",
              "state": "CLOSED"
            },
            {
              "id": 1001,
              "class_name": "washing_machine",
              "state": "ON"
            },
            {
              "id": 1001,
              "class_name": "washing_machine",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(CLOSED(washing_machine.1001) and ON(washing_machine.1001) and PLUGGED_IN(washing_machine.1001) and ONTOP(clothes_jacket.1003, washing_machine.1001) and ONTOP(soap.1002, washing_machine.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <basket_for_clothes> (1000)",
          "[FIND] <basket_for_clothes> (1000)",
          "[FIND] <washing_machine> (1001)",
          "[TURNTO] <washing_machine> (1001)",
          "[FIND] <soap> (1002)",
          "[GRAB] <soap> (1002)",
          "[OPEN] <washing_machine> (1001)",
          "[PUTBACK] <soap> (1002) <washing_machine> (1001)",
          "[FIND] <clothes_jacket> (1003)",
          "[GRAB] <clothes_jacket> (1003)",
          "[PUTBACK] <clothes_jacket> (1003) <washing_machine> (1001)",
          "[CLOSE] <washing_machine> (1001)",
          "[SWITCHON] <washing_machine> (1001)"
        ],
        "transition_model": "(define (problem Wash_clothes)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom clothes_jacket washing_machine basket_for_clothes dining_room soap - object\n)\n    (:init\n    (obj_next_to soap basket_for_clothes)\n    (grabbable clothes_jacket)\n    (off washing_machine)\n    (movable clothes_jacket)\n    (inside_room basket_for_clothes dining_room)\n    (hangable clothes_jacket)\n    (containers washing_machine)\n    (plugged_in washing_machine)\n    (can_open basket_for_clothes)\n    (obj_next_to washing_machine basket_for_clothes)\n    (inside_room washing_machine dining_room)\n    (has_switch washing_machine)\n    (obj_next_to basket_for_clothes soap)\n    (grabbable basket_for_clothes)\n    (movable soap)\n    (has_plug washing_machine)\n    (containers basket_for_clothes)\n    (can_open washing_machine)\n    (clothes clothes_jacket)\n    (inside_room soap dining_room)\n    (closed washing_machine)\n    (clean washing_machine)\n    (obj_inside basket_for_clothes basket_for_clothes)\n    (inside_room clothes_jacket dining_room)\n    (obj_next_to clothes_jacket basket_for_clothes)\n    (obj_inside clothes_jacket washing_machine)\n    (obj_ontop washing_machine basket_for_clothes)\n    (recipient washing_machine)\n    (obj_next_to basket_for_clothes washing_machine)\n    (obj_next_to basket_for_clothes basket_for_clothes)\n    (obj_next_to basket_for_clothes clothes_jacket)\n    (inside character bathroom)\n    (movable basket_for_clothes)\n    (cream soap)\n    (grabbable soap)\n)\n    (:goal\n    (and\n        (closed washing_machine)\n        (on washing_machine)\n        (plugged_in washing_machine)\n        (obj_ontop soap washing_machine)\n        (obj_ontop clothes_jacket washing_machine)\n    )\n)\n    )\n    "
      },
      "417_1": {
        "task_name": "Wash clothes",
        "natural_language_description": "I will load the dirty clothes into the washing machine.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "washing_machine",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "washing_machine",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "washing_machine",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1004,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1005,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(washing_machine.1000) and ON(washing_machine.1000) and PLUGGED_IN(washing_machine.1000) and ONTOP(clothes_pants.1001, washing_machine.1000) and ONTOP(clothes_shirt.1004, washing_machine.1000) and ONTOP(clothes_shirt.1003, washing_machine.1000) and ONTOP(clothes_pants.1002, washing_machine.1000) and ONTOP(soap.1005, washing_machine.1000))",
        "action_trajectory": [
          "[FIND] <washing_machine> (1000)",
          "[OPEN] <washing_machine> (1000)",
          "[FIND] <clothes_pants> (1001)",
          "[GRAB] <clothes_pants> (1001)",
          "[PUTBACK] <clothes_pants> (1001) <washing_machine> (1000)",
          "[FIND] <clothes_pants> (2.1002)",
          "[GRAB] <clothes_pants> (2.1002)",
          "[PUTBACK] <clothes_pants> (2.1002) <washing_machine> (1000)",
          "[FIND] <clothes_shirt> (1003)",
          "[GRAB] <clothes_shirt> (1003)",
          "[PUTBACK] <clothes_shirt> (1003) <washing_machine> (1000)",
          "[FIND] <clothes_shirt> (2.1004)",
          "[GRAB] <clothes_shirt> (2.1004)",
          "[PUTBACK] <clothes_shirt> (2.1004) <washing_machine> (1000)",
          "[FIND] <soap> (1005)",
          "[GRAB] <soap> (1005)",
          "[PUTBACK] <soap> (1005) <washing_machine> (1000)",
          "[CLOSE] <washing_machine> (1000)",
          "[SWITCHON] <washing_machine> (1000)"
        ],
        "transition_model": "(define (problem Wash_clothes)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    clothes_shirt clothes_pants soap washing_machine - object\n)\n    (:init\n    (clothes clothes_pants)\n    (movable clothes_pants)\n    (obj_inside clothes_shirt washing_machine)\n    (off washing_machine)\n    (hangable clothes_shirt)\n    (grabbable soap)\n    (containers washing_machine)\n    (plugged_in washing_machine)\n    (has_switch washing_machine)\n    (movable soap)\n    (has_plug washing_machine)\n    (obj_inside soap washing_machine)\n    (can_open washing_machine)\n    (closed washing_machine)\n    (clean washing_machine)\n    (grabbable clothes_pants)\n    (grabbable clothes_shirt)\n    (obj_inside clothes_pants washing_machine)\n    (hangable clothes_pants)\n    (recipient washing_machine)\n    (clothes clothes_shirt)\n    (cream soap)\n    (movable clothes_shirt)\n)\n    (:goal\n    (and\n        (closed washing_machine)\n        (on washing_machine)\n        (plugged_in washing_machine)\n        (obj_ontop soap washing_machine)\n        (obj_ontop clothes_shirt washing_machine)\n        (obj_ontop clothes_pants washing_machine)\n    )\n)\n    )\n    "
      },
      "850_1": {
        "task_name": "Wash clothes",
        "natural_language_description": "Walk into laundry room. Open washing machine door. Put dirty clothes into washing machine. Measure laundry detergent and place into washing machine. Turn dial to appropriate wash setting. Power on.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "washing_machine",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "washing_machine",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "washing_machine",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(washing_machine.1000) and ON(washing_machine.1000) and PLUGGED_IN(washing_machine.1000) and ONTOP(clothes_pants.1001, washing_machine.1000) and ONTOP(laundry_detergent.1002, washing_machine.1000))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <washing_machine> (1000)",
          "[FIND] <washing_machine> (1000)",
          "[OPEN] <washing_machine> (1000)",
          "[FIND] <clothes_pants> (1001)",
          "[GRAB] <clothes_pants> (1001)",
          "[PUTBACK] <clothes_pants> (1001) <washing_machine> (1000)",
          "[CLOSE] <washing_machine> (1000)",
          "[FIND] <laundry_detergent> (1002)",
          "[GRAB] <laundry_detergent> (1002)",
          "[OPEN] <washing_machine> (1000)",
          "[PUTBACK] <laundry_detergent> (1002) <washing_machine> (1000)",
          "[CLOSE] <washing_machine> (1000)",
          "[SWITCHON] <washing_machine> (1000)"
        ],
        "transition_model": "(define (problem Wash_clothes)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom clothes_pants washing_machine dining_room laundry_detergent - object\n)\n    (:init\n    (clothes clothes_pants)\n    (movable clothes_pants)\n    (inside_room clothes_pants bathroom)\n    (off washing_machine)\n    (containers washing_machine)\n    (plugged_in washing_machine)\n    (has_switch washing_machine)\n    (inside_room washing_machine bathroom)\n    (movable laundry_detergent)\n    (obj_next_to clothes_pants washing_machine)\n    (has_plug washing_machine)\n    (obj_next_to washing_machine clothes_pants)\n    (can_open washing_machine)\n    (closed washing_machine)\n    (clean washing_machine)\n    (grabbable clothes_pants)\n    (pourable laundry_detergent)\n    (obj_inside clothes_pants washing_machine)\n    (hangable clothes_pants)\n    (recipient washing_machine)\n    (obj_next_to laundry_detergent washing_machine)\n    (inside character dining_room)\n    (obj_next_to washing_machine laundry_detergent)\n    (inside_room laundry_detergent bathroom)\n    (grabbable laundry_detergent)\n)\n    (:goal\n    (and\n        (closed washing_machine)\n        (on washing_machine)\n        (plugged_in washing_machine)\n        (obj_ontop clothes_pants washing_machine)\n        (obj_ontop laundry_detergent washing_machine)\n    )\n)\n    )\n    "
      },
      "954_2": {
        "task_name": "Wash clothes",
        "natural_language_description": "I need to get the dirty clothes basket.  Walk to bathroom.  Put all the clothes in washing machine.  Add soap.  Turn on machine.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1001,
              "class_name": "washing_machine",
              "state": "CLOSED"
            },
            {
              "id": 1001,
              "class_name": "washing_machine",
              "state": "ON"
            },
            {
              "id": 1001,
              "class_name": "washing_machine",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1004,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1005,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1006,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(CLOSED(washing_machine.1001) and ON(washing_machine.1001) and PLUGGED_IN(washing_machine.1001) and ONTOP(clothes_shirt.1004, washing_machine.1001) and ONTOP(clothes_pants.1003, washing_machine.1001) and ONTOP(clothes_underwear.1005, washing_machine.1001) and ONTOP(soap.1006, washing_machine.1001) and ONTOP(clothes_dress.1002, washing_machine.1001))",
        "action_trajectory": [
          "[WALK] <basket_for_clothes> (1000)",
          "[WALK] <bathroom> (1)",
          "[WALK] <washing_machine> (1001)",
          "[FIND] <washing_machine> (1001)",
          "[OPEN] <washing_machine> (1001)",
          "[FIND] <clothes_dress> (1002)",
          "[GRAB] <clothes_dress> (1002)",
          "[PUTBACK] <clothes_dress> (1002) <washing_machine> (1001)",
          "[FIND] <clothes_pants> (1003)",
          "[GRAB] <clothes_pants> (1003)",
          "[PUTBACK] <clothes_pants> (1003) <washing_machine> (1001)",
          "[FIND] <clothes_shirt> (1004)",
          "[GRAB] <clothes_shirt> (1004)",
          "[PUTBACK] <clothes_shirt> (1004) <washing_machine> (1001)",
          "[FIND] <clothes_underwear> (1005)",
          "[GRAB] <clothes_underwear> (1005)",
          "[PUTBACK] <clothes_underwear> (1005) <washing_machine> (1001)",
          "[FIND] <soap> (1006)",
          "[GRAB] <soap> (1006)",
          "[PUTBACK] <soap> (1006) <washing_machine> (1001)",
          "[CLOSE] <washing_machine> (1001)",
          "[SWITCHON] <washing_machine> (1001)"
        ],
        "transition_model": "(define (problem Wash_clothes)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office clothes_pants clothes_dress washing_machine clothes_underwear clothes_shirt soap - object\n)\n    (:init\n    (clothes clothes_pants)\n    (movable clothes_pants)\n    (obj_inside clothes_shirt washing_machine)\n    (inside_room clothes_pants bathroom)\n    (obj_next_to washing_machine soap)\n    (off washing_machine)\n    (obj_inside clothes_dress washing_machine)\n    (grabbable clothes_underwear)\n    (hangable clothes_shirt)\n    (obj_next_to clothes_shirt washing_machine)\n    (obj_next_to washing_machine clothes_dress)\n    (obj_next_to soap washing_machine)\n    (hangable clothes_underwear)\n    (containers washing_machine)\n    (plugged_in washing_machine)\n    (grabbable soap)\n    (obj_next_to clothes_underwear washing_machine)\n    (inside_room soap bathroom)\n    (has_switch washing_machine)\n    (inside_room washing_machine bathroom)\n    (movable clothes_dress)\n    (obj_next_to clothes_pants washing_machine)\n    (clothes clothes_underwear)\n    (movable soap)\n    (has_plug washing_machine)\n    (obj_inside soap washing_machine)\n    (obj_next_to washing_machine clothes_pants)\n    (can_open washing_machine)\n    (closed washing_machine)\n    (clean washing_machine)\n    (inside_room clothes_shirt bathroom)\n    (obj_next_to washing_machine clothes_underwear)\n    (grabbable clothes_pants)\n    (clothes clothes_dress)\n    (grabbable clothes_shirt)\n    (obj_next_to washing_machine clothes_shirt)\n    (obj_inside clothes_pants washing_machine)\n    (hangable clothes_pants)\n    (recipient washing_machine)\n    (obj_inside clothes_underwear washing_machine)\n    (inside_room clothes_dress bathroom)\n    (hangable clothes_dress)\n    (clothes clothes_shirt)\n    (movable clothes_underwear)\n    (inside_room clothes_underwear bathroom)\n    (obj_next_to clothes_dress washing_machine)\n    (cream soap)\n    (inside character home_office)\n    (movable clothes_shirt)\n    (grabbable clothes_dress)\n)\n    (:goal\n    (and\n        (closed washing_machine)\n        (on washing_machine)\n        (plugged_in washing_machine)\n        (obj_ontop soap washing_machine)\n        (obj_ontop clothes_underwear washing_machine)\n        (obj_ontop clothes_shirt washing_machine)\n        (obj_ontop clothes_pants washing_machine)\n        (obj_ontop clothes_dress washing_machine)\n    )\n)\n    )\n    "
      },
      "11_1": {
        "task_name": "Turn on light",
        "natural_language_description": "I go to bedroom and locate a lamp. This lamp can be turned on by touch, as it has capacitive sensing. So I do it.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "floor_lamp",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(floor_lamp.1000)",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <floor_lamp> (1000)",
          "[FIND] <floor_lamp> (1000)",
          "[TOUCH] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom dining_room floor_lamp - object\n)\n    (:init\n    (has_switch floor_lamp)\n    (plugged_out floor_lamp)\n    (inside_room floor_lamp bedroom)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (inside character dining_room)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on floor_lamp)\n    )\n)\n    )\n    "
      },
      "120_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Go to the kitchen and living room and turn on the lights.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 245,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 245,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.245) and PLUGGED_IN(light.245) and ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[RUN] <dining_room> (201)",
          "[WALK] <light> (245)",
          "[FIND] <light> (245)",
          "[SWITCHON] <light> (245)",
          "[WALK] <home_office> (319)",
          "[WALK] <light> (2.411)",
          "[FIND] <light> (2.411)",
          "[SWITCHON] <light> (2.411)",
          "[FIND] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    light floor_lamp - object\n)\n    (:init\n    (plugged_in light)\n    (has_switch floor_lamp)\n    (clean light)\n    (plugged_out floor_lamp)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (obj_next_to floor_lamp light)\n    (obj_next_to light floor_lamp)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "125_2": {
        "task_name": "Turn on light",
        "natural_language_description": "turn on the light for room",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[PLUGIN] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office light bedroom computer chair - object\n)\n    (:init\n    (obj_next_to computer light)\n    (surfaces chair)\n    (has_plug light)\n    (has_switch light)\n    (inside_room light bedroom)\n    (facing chair computer)\n    (obj_next_to light computer)\n    (movable chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (plugged_out light)\n    (has_switch computer)\n    (obj_next_to light chair)\n    (obj_next_to light light)\n    (clean light)\n    (inside_room chair bedroom)\n    (grabbable chair)\n    (obj_next_to chair light)\n    (lookable computer)\n    (obj_inside computer home_office)\n    (inside character bedroom)\n    (off light)\n    (inside_room computer bedroom)\n    (obj_inside chair home_office)\n    (obj_next_to chair computer)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "150_2": {
        "task_name": "Turn on light",
        "natural_language_description": "push any ligth button to turn it on, for example in the living room",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside character bathroom)\n    (off light)\n    (inside_room light bathroom)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "160_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Go to the living room, find the switches (buttons or controllers) for light 1 and light 2 and switch on both the lights one by one.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1002,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 1002,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.1002) and PLUGGED_IN(light.1002) and ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <controller> (1000)",
          "[FIND] <controller> (1000)",
          "[FIND] <controller> (2.1001)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[FIND] <light> (2.1002)",
          "[SWITCHON] <light> (2.1002)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dining_room controller light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (obj_next_to light controller)\n    (has_switch light)\n    (has_plug light)\n    (grabbable controller)\n    (movable controller)\n    (obj_next_to light light)\n    (obj_inside controller home_office)\n    (off light)\n    (obj_next_to controller controller)\n    (inside character dining_room)\n    (inside_room light dining_room)\n    (has_plug controller)\n    (obj_next_to controller light)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "180_2": {
        "task_name": "Turn on light",
        "natural_language_description": "Find the light circuit breaker in the kitchen",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 245,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 245,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.245) and PLUGGED_IN(light.245))",
        "action_trajectory": [
          "[STANDUP]",
          "[WALK] <dining_room> (201)",
          "[WALK] <light> (245)",
          "[FIND] <light> (245)",
          "[SWITCHON] <light> (245)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom dining_room light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside character bathroom)\n    (sitting character)\n    (off light)\n    (inside_room light bathroom)\n    (inside_room light dining_room)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "205_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Walk into the bedroom and walk to the light switch. Flip the switch.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 169,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 169,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.169) and PLUGGED_IN(light.169))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <light> (169)",
          "[FIND] <light> (169)",
          "[SWITCHON] <light> (169)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office bedroom light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside_room light bedroom)\n    (off light)\n    (inside character home_office)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "222_1": {
        "task_name": "Turn on light",
        "natural_language_description": "walk into living room, walk to light, turn on light switch.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[SWITCHON] <light> (411)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dining_room light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n    (inside character dining_room)\n    (inside_room light dining_room)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "232_2": {
        "task_name": "Turn on light",
        "natural_language_description": "I need to turn on the lights in the kitchen so I can make dinner.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 245,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 245,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 1001,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 1001,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.245) and PLUGGED_IN(light.245) and ON(light.1001) and PLUGGED_IN(light.1001) and ON(light.1000) and PLUGGED_IN(light.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <light> (245)",
          "[FIND] <light> (245)",
          "[TURNTO] <light> (245)",
          "[LOOKAT] <light> (245)",
          "[SWITCHON] <light> (245)",
          "[WALK] <light> (2.1000)",
          "[SWITCHON] <light> (2.1000)",
          "[WALK] <light> (3.1001)",
          "[SWITCHON] <light> (3.1001)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom dining_room light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside character bathroom)\n    (off light)\n    (inside_room light bathroom)\n    (inside_room light dining_room)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "310_1": {
        "task_name": "Turn on light",
        "natural_language_description": "I enter the bedroom and find the light. Then I turn it on.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 169,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 169,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.169) and PLUGGED_IN(light.169))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <light> (169)",
          "[FIND] <light> (169)",
          "[SWITCHON] <light> (169)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dining_room bedroom light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside_room light bedroom)\n    (off light)\n    (inside character dining_room)\n    (inside_room light dining_room)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "311_1": {
        "task_name": "Turn on light",
        "natural_language_description": "I go home and it's dark so I can not see anything",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "floor_lamp",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(floor_lamp.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <floor_lamp> (1000)",
          "[FIND] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office floor_lamp - object\n)\n    (:init\n    (has_switch floor_lamp)\n    (obj_inside floor_lamp home_office)\n    (plugged_out floor_lamp)\n    (inside character bathroom)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on floor_lamp)\n    )\n)\n    )\n    "
      },
      "331_2": {
        "task_name": "Turn on light",
        "natural_language_description": "switching on light in an area",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside_room light bedroom)\n    (inside character bedroom)\n    (off light)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "345_1": {
        "task_name": "Turn on light",
        "natural_language_description": "We enter into the Living room and walk towards light switch. Then switch on the light.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <filing_cabinet> (399)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    filing_cabinet home_office remote_control light dining_room - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_switch light)\n    (has_plug light)\n    (obj_inside filing_cabinet home_office)\n    (movable remote_control)\n    (plugged_in light)\n    (can_open filing_cabinet)\n    (obj_next_to filing_cabinet light)\n    (obj_next_to light light)\n    (obj_next_to light filing_cabinet)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (containers filing_cabinet)\n    (clean light)\n    (obj_next_to remote_control filing_cabinet)\n    (inside character dining_room)\n    (obj_next_to filing_cabinet remote_control)\n    (surfaces filing_cabinet)\n    (off light)\n    (obj_ontop remote_control filing_cabinet)\n    (inside_room light dining_room)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "392_1": {
        "task_name": "Turn on light",
        "natural_language_description": "find lightswitch. walk to light switch. turn on light.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 64,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 64,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.64) and PLUGGED_IN(light.64))",
        "action_trajectory": [
          "[FIND] <light> (64)",
          "[WALK] <light> (64)",
          "[SWITCHON] <light> (64)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "394_2": {
        "task_name": "Turn on light",
        "natural_language_description": "Find light switch. switch on",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 245,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 245,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.245) and PLUGGED_IN(light.245))",
        "action_trajectory": [
          "[FIND] <light> (245)",
          "[SWITCHON] <light> (245)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "432_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Walk over to light switch, flip the switch to the on position",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "floor_lamp",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(floor_lamp.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office floor_lamp - object\n)\n    (:init\n    (has_switch floor_lamp)\n    (obj_inside floor_lamp home_office)\n    (plugged_out floor_lamp)\n    (inside character bathroom)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on floor_lamp)\n    )\n)\n    )\n    "
      },
      "443_2": {
        "task_name": "Turn on light",
        "natural_language_description": "Turning on lights",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "floor_lamp",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(floor_lamp.1000)",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <floor_lamp> (1000)",
          "[FIND] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom dining_room floor_lamp - object\n)\n    (:init\n    (has_switch floor_lamp)\n    (plugged_out floor_lamp)\n    (inside_room floor_lamp bedroom)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (inside character dining_room)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on floor_lamp)\n    )\n)\n    )\n    "
      },
      "445_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Walk to living room, go to a light switch button, press button, confirm the light is on, go to next light switch button, press button, confirm the light is on",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.1000) and PLUGGED_IN(light.1000) and ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[FIND] <light> (411)",
          "[TURNTO] <light> (411)",
          "[LOOKAT] <light> (411)",
          "[FIND] <light> (2.1000)",
          "[SWITCHON] <light> (2.1000)",
          "[TURNTO] <light> (2.1000)",
          "[LOOKAT] <light> (2.1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside_room light bedroom)\n    (inside character bedroom)\n    (off light)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "511_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Walk over to light switch. Turn on lights.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 245,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 245,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.245) and PLUGGED_IN(light.245))",
        "action_trajectory": [
          "[WALK] <light> (245)",
          "[SWITCHON] <light> (245)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "585_1": {
        "task_name": "Turn on light",
        "natural_language_description": "I walk up to the light switch in the entrance hall and flick it on. Then I flick on the light switch in the living room, and switch on the floor lamp. Then I walk into the adjacent kitchen and switch on the lights there.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 245,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 245,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.245) and PLUGGED_IN(light.245) and ON(light.1000) and PLUGGED_IN(light.1000) and ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[WALK] <home_office> (319)",
          "[WALK] <light> (2.1000)",
          "[FIND] <light> (2.1000)",
          "[SWITCHON] <light> (2.1000)",
          "[FIND] <floor_lamp> (1001)",
          "[SWITCHON] <floor_lamp> (1001)",
          "[WALK] <dining_room> (201)",
          "[WALK] <light> (3.245)",
          "[FIND] <light> (3.245)",
          "[SWITCHON] <light> (3.245)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom dining_room floor_lamp light - object\n)\n    (:init\n    (plugged_in light)\n    (has_switch floor_lamp)\n    (clean light)\n    (plugged_out floor_lamp)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (obj_next_to light floor_lamp)\n    (inside character bathroom)\n    (off light)\n    (off floor_lamp)\n    (inside_room light bathroom)\n    (movable floor_lamp)\n    (inside_room light dining_room)\n    (obj_next_to floor_lamp light)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "604_2": {
        "task_name": "Turn on light",
        "natural_language_description": "for i = 1 to n, where n is the number of lights: locate light i, move to light i, switch on light i",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 64,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 64,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.64) and PLUGGED_IN(light.64) and ON(light.1000) and PLUGGED_IN(light.1000))",
        "action_trajectory": [
          "[FIND] <light> (64)",
          "[WALK] <light> (64)",
          "[SWITCHON] <light> (64)",
          "[FIND] <light> (2.1000)",
          "[WALK] <light> (2.1000)",
          "[SWITCHON] <light> (2.1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "616_1": {
        "task_name": "Turn on light",
        "natural_language_description": "flip the switch and turn on the lights",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 64,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 64,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.64) and PLUGGED_IN(light.64))",
        "action_trajectory": [
          "[WALK] <light> (64)",
          "[SWITCHON] <light> (64)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "705_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Walk to the living room, walk to the lamp, switch on the lamp.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "floor_lamp",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(floor_lamp.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office floor_lamp - object\n)\n    (:init\n    (has_switch floor_lamp)\n    (obj_inside floor_lamp home_office)\n    (plugged_out floor_lamp)\n    (inside character bedroom)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on floor_lamp)\n    )\n)\n    )\n    "
      },
      "708_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Go to the living room and turn on the lights",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 169,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 169,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.169) and PLUGGED_IN(light.169) and ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (3.411)",
          "[FIND] <light> (3.411)",
          "[SWITCHON] <light> (3.411)",
          "[WALK] <bedroom> (2.67)",
          "[WALK] <light> (2.169)",
          "[FIND] <light> (2.169)",
          "[SWITCHON] <light> (2.169)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom bedroom light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside_room light bedroom)\n    (inside character bathroom)\n    (off light)\n    (inside_room light bathroom)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "715_2": {
        "task_name": "Turn on light",
        "natural_language_description": "walk to wall, find light switch, turn on lights",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 169,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 169,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.169) and PLUGGED_IN(light.169))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (169)",
          "[FIND] <light> (169)",
          "[PLUGIN] <light> (169)",
          "[FIND] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)",
          "[WALK] <bedroom> (67)",
          "[WALK] <light> (169)",
          "[SWITCHON] <light> (169)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    light floor_lamp - object\n)\n    (:init\n    (has_switch floor_lamp)\n    (clean light)\n    (plugged_out floor_lamp)\n    (plugged_out light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (obj_next_to floor_lamp light)\n    (obj_next_to light floor_lamp)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "737_2": {
        "task_name": "Turn on light",
        "natural_language_description": "I walk in to the living room. I find the light switch. I turn on the lights.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dining_room light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (off light)\n    (inside character dining_room)\n    (inside_room light dining_room)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "780_1": {
        "task_name": "Turn on light",
        "natural_language_description": "Turn on the lights in the house",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 245,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 245,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "light",
              "state": "PLUGGED_IN"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 411,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.245) and PLUGGED_IN(light.245) and ON(light.1000) and PLUGGED_IN(light.1000) and ON(light.411) and PLUGGED_IN(light.411))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <light> (245)",
          "[FIND] <light> (245)",
          "[SWITCHON] <light> (245)",
          "[WALK] <home_office> (319)",
          "[WALK] <light> (2.411)",
          "[FIND] <light> (2.411)",
          "[SWITCHON] <light> (2.411)",
          "[WALK] <dining_room> (201)",
          "[WALK] <light> (3.1000)",
          "[FIND] <light> (3.1000)",
          "[SWITCHON] <light> (3.1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom dining_room light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside_room light bedroom)\n    (inside character bedroom)\n    (off light)\n    (inside_room light dining_room)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "812_1": {
        "task_name": "Turn on light",
        "natural_language_description": "I walk in the bedroom and notice it is dark. I flip on the lamp switch so that the lights come on.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 169,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 169,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.169) and PLUGGED_IN(light.169))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <floor_lamp> (1000)",
          "[FIND] <floor_lamp> (1000)",
          "[WALK] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)",
          "[FIND] <light> (169)",
          "[SWITCHON] <light> (169)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dining_room bedroom light floor_lamp - object\n)\n    (:init\n    (plugged_in light)\n    (has_switch floor_lamp)\n    (clean light)\n    (plugged_out floor_lamp)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside_room light bedroom)\n    (inside_room floor_lamp bedroom)\n    (off light)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (inside character dining_room)\n    (inside_room light dining_room)\n    (obj_next_to floor_lamp light)\n    (obj_next_to light floor_lamp)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "835_2": {
        "task_name": "Turn on light",
        "natural_language_description": "I walk into the living room and then I walk to the light switch in there and turn the lights on",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "floor_lamp",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(floor_lamp.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dining_room floor_lamp - object\n)\n    (:init\n    (has_switch floor_lamp)\n    (obj_inside floor_lamp home_office)\n    (plugged_out floor_lamp)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (inside character dining_room)\n    (clean floor_lamp)\n)\n    (:goal\n    (and\n        (on floor_lamp)\n    )\n)\n    )\n    "
      },
      "85_2": {
        "task_name": "Turn on light",
        "natural_language_description": "walk in kitchen. switch on light. walk in living room. switch on light.walk in entrance hall. switch on light.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 245,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 245,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.245) and PLUGGED_IN(light.245))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <light> (245)",
          "[FIND] <light> (245)",
          "[SWITCHON] <light> (245)",
          "[WALK] <home_office> (319)",
          "[WALK] <home_office> (319)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom light home_office - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside character bathroom)\n    (off light)\n    (inside_room light bathroom)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "874_2": {
        "task_name": "Turn on light",
        "natural_language_description": "I walk towards to the bedroom, and I open the door of the bedroom, and I switch on the lights inside the bedroom, the switch is beside the door.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 169,
              "class_name": "light",
              "state": "ON"
            },
            {
              "id": 169,
              "class_name": "light",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(ON(light.169) and PLUGGED_IN(light.169))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <light> (169)",
          "[FIND] <light> (169)",
          "[SWITCHON] <light> (169)"
        ],
        "transition_model": "(define (problem Turn_on_light)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom bedroom light - object\n)\n    (:init\n    (plugged_in light)\n    (clean light)\n    (has_switch light)\n    (has_plug light)\n    (obj_next_to light light)\n    (inside_room light bedroom)\n    (inside character bathroom)\n    (off light)\n    (inside_room light bathroom)\n)\n    (:goal\n    (and\n        (on light)\n        (plugged_in light)\n    )\n)\n    )\n    "
      },
      "491_2": {
        "task_name": "Brush teeth",
        "natural_language_description": "go to the bathroom and brush your teeth",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 1001
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(HOLDS_LH(character.65, tooth_paste.1001) and HOLDS_RH(character.65, toothbrush.1000))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <toothbrush> (1000)",
          "[FIND] <toothbrush> (1000)",
          "[GRAB] <toothbrush> (1000)",
          "[WALK] <tooth_paste> (1001)",
          "[FIND] <tooth_paste> (1001)",
          "[GRAB] <tooth_paste> (1001)",
          "[POUR] <tooth_paste> (1001) <toothbrush> (1000)"
        ],
        "transition_model": "(define (problem Brush_teeth)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom dining_room tooth_paste toothbrush - object\n)\n    (:init\n    (inside_room toothbrush bathroom)\n    (inside character dining_room)\n    (recipient toothbrush)\n    (cream tooth_paste)\n    (movable toothbrush)\n    (grabbable tooth_paste)\n    (movable tooth_paste)\n    (can_open tooth_paste)\n    (pourable tooth_paste)\n    (inside_room tooth_paste bathroom)\n    (grabbable toothbrush)\n)\n    (:goal\n    (and\n        (holds_lh character tooth_paste)\n        (holds_rh character toothbrush)\n    )\n)\n    )\n    "
      },
      "696_1": {
        "task_name": "Brush teeth",
        "natural_language_description": "EARLY MORNING AND BEFORE GOING TO BED",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 1001
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(HOLDS_LH(character.65, toothbrush.1001) and HOLDS_RH(character.65, tooth_paste.1000))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <tooth_paste> (1000)",
          "[FIND] <tooth_paste> (1000)",
          "[GRAB] <tooth_paste> (1000)",
          "[FIND] <toothbrush> (1001)",
          "[GRAB] <toothbrush> (1001)"
        ],
        "transition_model": "(define (problem Brush_teeth)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office tooth_paste toothbrush - object\n)\n    (:init\n    (obj_next_to tooth_paste toothbrush)\n    (obj_next_to toothbrush tooth_paste)\n    (inside_room toothbrush bathroom)\n    (inside character home_office)\n    (movable tooth_paste)\n    (grabbable tooth_paste)\n    (cream tooth_paste)\n    (pourable tooth_paste)\n    (movable toothbrush)\n    (can_open tooth_paste)\n    (recipient toothbrush)\n    (inside_room tooth_paste bathroom)\n    (grabbable toothbrush)\n)\n    (:goal\n    (and\n        (holds_lh character toothbrush)\n        (holds_rh character tooth_paste)\n    )\n)\n    )\n    "
      },
      "1003_2": {
        "task_name": "Write an email",
        "natural_language_description": "go to the home office and write an email",
        "vh_goal": {
          "actions": [
            "TYPE",
            "SWITCHOFF"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then exists x0. (SWITCHOFF(x0)))",
        "action_trajectory": [
          "[RUN] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[TOUCH] <mouse> (413)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[GRAB] <keyboard> (415)",
          "[TOUCH] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[TYPE] <keyboard> (415)",
          "[TOUCH] <mouse> (413)",
          "[SWITCHOFF] <computer> (417)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer mousepad floor wall home_office powersocket cpuscreen bedroom mouse desk walllamp chair doorjamb - object\n)\n    (:init\n    (surfaces floor)\n    (surfaces floor)\n    (surfaces floor)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (movable desk)\n    (surfaces desk)\n    (grabbable mouse)\n    (has_plug mouse)\n    (movable mouse)\n    (movable mousepad)\n    (surfaces mousepad)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (next_to keyboard chair)\n    (next_to powersocket mouse)\n    (next_to wall keyboard)\n    (next_to computer keyboard)\n    (next_to wall mouse)\n    (next_to walllamp keyboard)\n    (next_to floor mouse)\n    (next_to doorjamb mouse)\n    (next_to keyboard wall)\n    (next_to mouse floor)\n    (next_to mouse powersocket)\n    (next_to mousepad mouse)\n    (next_to keyboard wall)\n    (next_to desk mouse)\n    (next_to computer mouse)\n    (next_to wall keyboard)\n    (next_to desk keyboard)\n    (next_to cpuscreen mouse)\n    (next_to mouse floor)\n    (next_to mouse wall)\n    (ontop keyboard desk)\n    (next_to keyboard mouse)\n    (next_to mouse desk)\n    (next_to floor mouse)\n    (ontop mouse mousepad)\n    (next_to keyboard cpuscreen)\n    (next_to floor mouse)\n    (ontop mouse desk)\n    (next_to wall keyboard)\n    (next_to chair keyboard)\n    (next_to keyboard desk)\n    (next_to chair mouse)\n    (next_to floor keyboard)\n    (next_to cpuscreen keyboard)\n    (next_to mousepad keyboard)\n    (next_to mouse cpuscreen)\n    (inside character bedroom)\n    (next_to mouse mousepad)\n    (next_to keyboard computer)\n    (next_to mouse chair)\n    (next_to keyboard mousepad)\n    (next_to keyboard walllamp)\n    (next_to mouse computer)\n    (next_to mouse wall)\n    (next_to keyboard wall)\n    (next_to keyboard floor)\n    (next_to mouse keyboard)\n    (next_to wall mouse)\n    (next_to mouse floor)\n    (next_to floor keyboard)\n    (next_to mouse doorjamb)\n    (next_to keyboard floor)\n    (next_to wall mouse)\n    (next_to mouse wall)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "115_2": {
        "task_name": "Write an email",
        "natural_language_description": "go to home office,switch on computer and send the mail by typing with keyboard",
        "vh_goal": {
          "actions": [
            "TYPE"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then ON(computer.417))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer home_office bathroom chair - object\n)\n    (:init\n    (clean computer)\n    (off computer)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (inside character bathroom)\n    (plugged_out computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "407_1": {
        "task_name": "Write an email",
        "natural_language_description": "Walk to Home office. Sit on the chair. Switch on the computer. Find address in addressbook. Type in the keyboard. Write mail.",
        "vh_goal": {
          "actions": [
            "TYPE"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then ON(computer.417))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <address_book> (1000)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer address_book home_office bathroom chair - object\n)\n    (:init\n    (clean computer)\n    (off computer)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (can_open address_book)\n    (cuttable address_book)\n    (grabbable address_book)\n    (has_paper address_book)\n    (movable address_book)\n    (readable address_book)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "430_1": {
        "task_name": "Write an email",
        "natural_language_description": "I need to send an email to my friend so I go into my office and sit down at the desk. I turn on the computer and type the email.",
        "vh_goal": {
          "actions": [
            "TYPE"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then ON(computer.417))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <desk> (357)",
          "[TURNTO] <desk> (357)",
          "[LOOKAT] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer mousepad home_office bedroom mouse desk chair cpuscreen - object\n)\n    (:init\n    (clean computer)\n    (off computer)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (movable desk)\n    (surfaces desk)\n    (grabbable mouse)\n    (has_plug mouse)\n    (movable mouse)\n    (movable mousepad)\n    (surfaces mousepad)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (inside character bedroom)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "481_2": {
        "task_name": "Write an email",
        "natural_language_description": "Switch on computer, Use keybord and mouse to open e-mail provider, type requested e-mail, click send, close e-mail provider, turn off computer",
        "vh_goal": {
          "actions": [
            "TYPE",
            "SWITCHOFF"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then exists x0. (SWITCHOFF(x0)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[FIND] <mail> (1000)",
          "[OPEN] <mail> (1000)",
          "[TYPE] <keyboard> (415)",
          "[FIND] <button> (1001)",
          "[PUSH] <button> (1001)",
          "[CLOSE] <mail> (1000)",
          "[SWITCHOFF] <computer> (417)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer button home_office mouse bathroom mail - object\n)\n    (:init\n    (grabbable mouse)\n    (has_plug mouse)\n    (movable mouse)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (can_open mail)\n    (grabbable mail)\n    (has_paper mail)\n    (movable mail)\n    (readable mail)\n    (grabbable button)\n    (movable button)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "622_1": {
        "task_name": "Write an email",
        "natural_language_description": "Walk to the office, sit down on chair, attach keyboard to the computer, attach mouse to the computer, switch the computer on, type the email on the keyboard",
        "vh_goal": {
          "actions": [
            "TYPE"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then ON(computer.417))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <keyboard> (415)",
          "[PLUGIN] <keyboard> (415)",
          "[FIND] <mouse> (413)",
          "[PLUGIN] <mouse> (413)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer dining_room home_office mouse chair - object\n)\n    (:init\n    (clean keyboard)\n    (plugged_out keyboard)\n    (clean computer)\n    (off computer)\n    (clean mouse)\n    (plugged_out mouse)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (grabbable mouse)\n    (has_plug mouse)\n    (movable mouse)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "699_1": {
        "task_name": "Write an email",
        "natural_language_description": "I wrote the task completion in a Notebook. After completing the work, I send email to my Superior. I done this task in day to day activity.",
        "vh_goal": {
          "actions": [
            "TYPE"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then ON(computer.417))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <mail> (1000)",
          "[OPEN] <mail> (1000)",
          "[FIND] <check> (1001)",
          "[GRAB] <check> (1001)",
          "[READ] <check> (1001)",
          "[FIND] <keyboard> (415)",
          "[TURNTO] <keyboard> (415)",
          "[LOOKAT] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer check dining_room home_office chair mail - object\n)\n    (:init\n    (clean computer)\n    (off computer)\n    (clean mail)\n    (closed mail)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (can_open mail)\n    (grabbable mail)\n    (has_paper mail)\n    (movable mail)\n    (readable mail)\n    (grabbable check)\n    (has_paper check)\n    (movable check)\n    (readable check)\n    (next_to chair check)\n    (next_to check chair)\n    (inside character dining_room)\n    (inside check mail)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "824_1": {
        "task_name": "Write an email",
        "natural_language_description": "I go to my office and sit at my desk. Turn on the computer and type my email at the keyboard.",
        "vh_goal": {
          "actions": [
            "TYPE"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then ON(computer.417))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer mousepad home_office bedroom mouse desk chair cpuscreen - object\n)\n    (:init\n    (clean computer)\n    (off computer)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (movable desk)\n    (surfaces desk)\n    (grabbable mouse)\n    (has_plug mouse)\n    (movable mouse)\n    (movable mousepad)\n    (surfaces mousepad)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (inside character bedroom)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "87_2": {
        "task_name": "Write an email",
        "natural_language_description": "walk to home office and switch on laptop and with the useof mouse and keyboard send mail",
        "vh_goal": {
          "actions": [
            "TYPE"
          ],
          "goal": [
            {
              "id": 1000,
              "class_name": "laptop",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then ON(laptop.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <laptop> (1000)",
          "[FIND] <laptop> (1000)",
          "[SWITCHON] <laptop> (1000)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer mousepad floor dining_room wall home_office powersocket mouse cpuscreen desk chair laptop doorjamb - object\n)\n    (:init\n    (clean laptop)\n    (off laptop)\n    (plugged_in laptop)\n    (surfaces floor)\n    (surfaces floor)\n    (surfaces floor)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (movable desk)\n    (surfaces desk)\n    (grabbable mouse)\n    (has_plug mouse)\n    (movable mouse)\n    (movable mousepad)\n    (surfaces mousepad)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (grabbable laptop)\n    (has_plug laptop)\n    (has_switch laptop)\n    (lookable laptop)\n    (movable laptop)\n    (next_to powersocket mouse)\n    (next_to wall mouse)\n    (next_to floor mouse)\n    (next_to doorjamb mouse)\n    (next_to mouse floor)\n    (next_to mouse powersocket)\n    (next_to mousepad mouse)\n    (next_to desk mouse)\n    (next_to computer mouse)\n    (next_to cpuscreen mouse)\n    (next_to mouse laptop)\n    (next_to mouse floor)\n    (next_to mouse wall)\n    (next_to keyboard mouse)\n    (next_to floor mouse)\n    (next_to mouse desk)\n    (ontop mouse mousepad)\n    (inside character dining_room)\n    (next_to floor mouse)\n    (ontop mouse desk)\n    (next_to chair mouse)\n    (next_to mouse cpuscreen)\n    (next_to mouse mousepad)\n    (next_to mouse chair)\n    (next_to laptop mouse)\n    (next_to mouse computer)\n    (next_to mouse wall)\n    (next_to mouse keyboard)\n    (next_to wall mouse)\n    (next_to mouse floor)\n    (next_to mouse doorjamb)\n    (next_to wall mouse)\n    (next_to mouse wall)\n)\n    (:goal\n    (and\n        (on laptop)\n    )\n)\n    )\n    "
      },
      "986_2": {
        "task_name": "Write an email",
        "natural_language_description": "I walk to the Home Office then find the computer and sit in the chair. I switch on the computer and start typing the email. I switch the computer off.",
        "vh_goal": {
          "actions": [
            "TYPE",
            "SWITCHOFF"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then exists x0. (SWITCHOFF(x0)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[SWITCHON] <computer> (417)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[SWITCHOFF] <computer> (417)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer hair home_office bathroom chair - object\n)\n    (:init\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (has_switch computer)\n    (lookable computer)\n    (body_part hair)\n    (cuttable hair)\n    (grabbable hair)\n    (movable hair)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "996_2": {
        "task_name": "Write an email",
        "natural_language_description": "I go to my bed room and sit on the chair and in front of me is my desktop computer and start writing an email.",
        "vh_goal": {
          "actions": [
            "TYPE"
          ],
          "goal": [
            {
              "id": 1001,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "(exists x0. (TYPE(x0)) then ON(computer.1001))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <chair> (1000)",
          "[FIND] <chair> (1000)",
          "[SIT] <chair> (1000)",
          "[FIND] <computer> (1001)",
          "[SWITCHON] <computer> (1001)",
          "[TURNTO] <computer> (1001)",
          "[LOOKAT] <computer> (1001)",
          "[FIND] <keyboard> (1002)",
          "[TYPE] <keyboard> (1002)"
        ],
        "transition_model": "(define (problem Write_an_email)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard computer dining_room bathroom chair - object\n)\n    (:init\n    (clean computer)\n    (off computer)\n    (grabbable chair)\n    (movable chair)\n    (sittable chair)\n    (surfaces chair)\n    (has_switch computer)\n    (lookable computer)\n    (grabbable keyboard)\n    (has_plug keyboard)\n    (movable keyboard)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "1004_2": {
        "task_name": "Put groceries in Fridge",
        "natural_language_description": "walk to kitchen, walk to fridge, look at bags, grab groceries, put groceries in fridge.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 289,
              "class_name": "freezer",
              "state": "OPEN"
            },
            {
              "id": 289,
              "class_name": "freezer",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1000,
              "relation_type": "INSIDE",
              "to_id": 289
            }
          ]
        },
        "tl_goal": "(OPEN(freezer.289) and PLUGGED_IN(freezer.289) and INSIDE(food_food.1000, freezer.289))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <freezer> (289)",
          "[FIND] <food_food> (1000)",
          "[GRAB] <food_food> (1000)",
          "[OPEN] <freezer> (289)",
          "[PUTIN] <food_food> (1000) <freezer> (289)"
        ],
        "transition_model": "(define (problem Put_groceries_in_Fridge)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    freezer food_food bedroom dining_room - object\n)\n    (:init\n    (has_plug freezer)\n    (inside_room food_food dining_room)\n    (can_open freezer)\n    (grabbable food_food)\n    (obj_inside food_food freezer)\n    (inside character bedroom)\n    (movable food_food)\n    (obj_next_to freezer food_food)\n    (inside_room freezer dining_room)\n    (obj_next_to food_food freezer)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (eatable food_food)\n    (has_switch freezer)\n    (cuttable food_food)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (open freezer)\n        (plugged_in freezer)\n        (obj_inside food_food freezer)\n    )\n)\n    )\n    "
      },
      "152_2": {
        "task_name": "Put groceries in Fridge",
        "natural_language_description": "take every item from groceries bag and put them in the fridge",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 289,
              "class_name": "freezer",
              "state": "OPEN"
            },
            {
              "id": 289,
              "class_name": "freezer",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1000,
              "relation_type": "INSIDE",
              "to_id": 289
            }
          ]
        },
        "tl_goal": "(OPEN(freezer.289) and PLUGGED_IN(freezer.289) and INSIDE(food_food.1000, freezer.289))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <food_food> (1000)",
          "[FIND] <food_food> (1000)",
          "[GRAB] <food_food> (1000)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[PUTIN] <food_food> (1000) <freezer> (289)"
        ],
        "transition_model": "(define (problem Put_groceries_in_Fridge)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    freezer bathroom dining_room food_food - object\n)\n    (:init\n    (has_plug freezer)\n    (inside_room food_food dining_room)\n    (can_open freezer)\n    (grabbable food_food)\n    (inside character bathroom)\n    (movable food_food)\n    (obj_next_to freezer food_food)\n    (inside_room freezer dining_room)\n    (obj_next_to food_food freezer)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (eatable food_food)\n    (has_switch freezer)\n    (cuttable food_food)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (open freezer)\n        (plugged_in freezer)\n        (obj_inside food_food freezer)\n    )\n)\n    )\n    "
      },
      "298_2": {
        "task_name": "Put groceries in Fridge",
        "natural_language_description": "I leave the bags with groceries near the fridge, open the door and put the groceries in the shelves.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 289,
              "class_name": "freezer",
              "state": "OPEN"
            },
            {
              "id": 289,
              "class_name": "freezer",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1000,
              "relation_type": "INSIDE",
              "to_id": 289
            }
          ]
        },
        "tl_goal": "(OPEN(freezer.289) and PLUGGED_IN(freezer.289) and INSIDE(food_food.1000, freezer.289))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <food_food> (1000)",
          "[FIND] <food_food> (1000)",
          "[GRAB] <food_food> (1000)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[PUTIN] <food_food> (1000) <freezer> (289)"
        ],
        "transition_model": "(define (problem Put_groceries_in_Fridge)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    freezer home_office dining_room food_food - object\n)\n    (:init\n    (has_plug freezer)\n    (inside_room food_food dining_room)\n    (can_open freezer)\n    (grabbable food_food)\n    (movable food_food)\n    (obj_next_to freezer food_food)\n    (inside_room freezer dining_room)\n    (obj_next_to food_food freezer)\n    (inside character home_office)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (eatable food_food)\n    (has_switch freezer)\n    (cuttable food_food)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (open freezer)\n        (plugged_in freezer)\n        (obj_inside food_food freezer)\n    )\n)\n    )\n    "
      },
      "609_2": {
        "task_name": "Put groceries in Fridge",
        "natural_language_description": "go to the kitchen and put the groceries in the fridge",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 289,
              "class_name": "freezer",
              "state": "OPEN"
            },
            {
              "id": 289,
              "class_name": "freezer",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(OPEN(freezer.289) and PLUGGED_IN(freezer.289))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <freezer> (289)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[FIND] <food_food> (1000)",
          "[GRAB] <food_food> (1000)",
          "[PUTIN] <food_food> (1000) <freezer> (289)"
        ],
        "transition_model": "(define (problem Put_groceries_in_Fridge)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    freezer bathroom dining_room food_food - object\n)\n    (:init\n    (has_plug freezer)\n    (inside_room food_food dining_room)\n    (can_open freezer)\n    (grabbable food_food)\n    (obj_inside food_food freezer)\n    (inside character bathroom)\n    (movable food_food)\n    (obj_next_to freezer food_food)\n    (inside_room freezer dining_room)\n    (obj_next_to food_food freezer)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (eatable food_food)\n    (has_switch freezer)\n    (cuttable food_food)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (open freezer)\n        (plugged_in freezer)\n    )\n)\n    )\n    "
      },
      "703_2": {
        "task_name": "Put groceries in Fridge",
        "natural_language_description": "walk to kitchen and seprate the groceries and arrange in fridge.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 289,
              "class_name": "freezer",
              "state": "OPEN"
            },
            {
              "id": 289,
              "class_name": "freezer",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1000,
              "relation_type": "INSIDE",
              "to_id": 289
            }
          ]
        },
        "tl_goal": "(OPEN(freezer.289) and PLUGGED_IN(freezer.289) and INSIDE(food_food.1000, freezer.289))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <food_food> (1000)",
          "[FIND] <food_food> (1000)",
          "[GRAB] <food_food> (1000)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[PUTIN] <food_food> (1000) <freezer> (289)"
        ],
        "transition_model": "(define (problem Put_groceries_in_Fridge)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    freezer food_food bedroom dining_room - object\n)\n    (:init\n    (has_plug freezer)\n    (inside_room food_food dining_room)\n    (can_open freezer)\n    (grabbable food_food)\n    (inside character bedroom)\n    (movable food_food)\n    (obj_next_to freezer food_food)\n    (inside_room freezer dining_room)\n    (obj_next_to food_food freezer)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (eatable food_food)\n    (has_switch freezer)\n    (cuttable food_food)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (open freezer)\n        (plugged_in freezer)\n        (obj_inside food_food freezer)\n    )\n)\n    )\n    "
      },
      "772_1": {
        "task_name": "Put groceries in Fridge",
        "natural_language_description": "Walk to kitchen. Open fridge. Put milk in fridge. Put turkey in fridge. Put eggs in fridge. Put fish in fridge. Put chicken in fridge.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 289,
              "class_name": "freezer",
              "state": "OPEN"
            },
            {
              "id": 289,
              "class_name": "freezer",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(OPEN(freezer.289) and PLUGGED_IN(freezer.289))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <freezer> (289)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[FIND] <milk> (1000)",
          "[GRAB] <milk> (1000)",
          "[PUTIN] <milk> (1000) <freezer> (289)",
          "[FIND] <food_turkey> (1001)",
          "[GRAB] <food_turkey> (1001)",
          "[PUTIN] <food_turkey> (1001) <freezer> (289)",
          "[FIND] <food_egg> (4.1002)",
          "[FIND] <food_egg> (1003)",
          "[GRAB] <food_egg> (1003)",
          "[PUTIN] <food_egg> (1003) <freezer> (289)",
          "[GRAB] <food_egg> (4.1002)",
          "[FIND] <food_egg> (2.1004)",
          "[GRAB] <food_egg> (2.1004)",
          "[PUTIN] <food_egg> (2.1004) <freezer> (289)",
          "[PUTIN] <food_egg> (4.1002) <freezer> (289)",
          "[FIND] <food_fish> (1005)",
          "[GRAB] <food_fish> (1005)",
          "[PUTIN] <food_fish> (1005) <freezer> (289)",
          "[FIND] <food_chicken> (1006)",
          "[GRAB] <food_chicken> (1006)",
          "[PUTIN] <food_chicken> (1006) <freezer> (289)"
        ],
        "transition_model": "(define (problem Put_groceries_in_Fridge)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom food_egg freezer milk food_turkey food_fish dining_room food_chicken - object\n)\n    (:init\n    (grabbable food_chicken)\n    (grabbable milk)\n    (inside_room freezer dining_room)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (movable food_turkey)\n    (inside_room food_chicken dining_room)\n    (has_switch freezer)\n    (obj_next_to freezer milk)\n    (cuttable food_turkey)\n    (inside_room food_fish dining_room)\n    (cuttable food_fish)\n    (pourable milk)\n    (movable food_chicken)\n    (inside_room milk dining_room)\n    (movable food_egg)\n    (inside_room food_turkey dining_room)\n    (obj_inside food_turkey freezer)\n    (cuttable food_chicken)\n    (obj_next_to freezer food_turkey)\n    (can_open freezer)\n    (drinkable milk)\n    (movable milk)\n    (obj_next_to milk freezer)\n    (grabbable food_fish)\n    (obj_inside food_fish freezer)\n    (obj_next_to freezer food_fish)\n    (obj_next_to freezer food_chicken)\n    (grabbable food_turkey)\n    (obj_inside food_chicken freezer)\n    (obj_next_to freezer food_egg)\n    (cuttable food_egg)\n    (obj_next_to food_fish freezer)\n    (movable food_fish)\n    (has_plug freezer)\n    (obj_inside milk freezer)\n    (eatable food_chicken)\n    (eatable food_turkey)\n    (obj_next_to food_chicken freezer)\n    (grabbable food_egg)\n    (inside_room food_egg dining_room)\n    (eatable food_egg)\n    (inside character bathroom)\n    (can_open milk)\n    (eatable food_fish)\n    (obj_next_to food_egg freezer)\n    (obj_next_to food_turkey freezer)\n    (obj_inside food_egg freezer)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (open freezer)\n        (plugged_in freezer)\n    )\n)\n    )\n    "
      },
      "837_2": {
        "task_name": "Put groceries in Fridge",
        "natural_language_description": "I find the groceries and carry them into the kitchen. I place them on the counter and begin to sort them out. I place the vegetables, eggs, cheese, and milk in the fridge.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 289,
              "class_name": "freezer",
              "state": "OPEN"
            },
            {
              "id": 289,
              "class_name": "freezer",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1001,
              "relation_type": "INSIDE",
              "to_id": 289
            }
          ]
        },
        "tl_goal": "(OPEN(freezer.289) and PLUGGED_IN(freezer.289) and INSIDE(food_cheese.1001, freezer.289))",
        "action_trajectory": [
          "[FIND] <food_food> (1000)",
          "[GRAB] <food_food> (1000)",
          "[WALK] <dining_room> (201)",
          "[WALK] <kitchen_counter> (230)",
          "[FIND] <kitchen_counter> (230)",
          "[PUTBACK] <food_food> (1000) <kitchen_counter> (230)",
          "[FIND] <food_cheese> (1001)",
          "[GRAB] <food_cheese> (1001)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[PUTIN] <food_cheese> (1001) <freezer> (289)",
          "[FIND] <milk> (1002)",
          "[GRAB] <milk> (1002)",
          "[PUTIN] <milk> (1002) <freezer> (289)",
          "[FIND] <food_vegetable> (1003)",
          "[GRAB] <food_vegetable> (1003)",
          "[PUTIN] <food_vegetable> (1003) <freezer> (289)",
          "[FIND] <food_egg> (1004)",
          "[GRAB] <food_egg> (1004)",
          "[PUTIN] <food_egg> (1004) <freezer> (289)"
        ],
        "transition_model": "(define (problem Put_groceries_in_Fridge)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    food_cheese food_egg microwave freezer faucet milk colander kitchen_counter coffe_maker bedroom food_vegetable food_food dining_room toaster - object\n)\n    (:init\n    (obj_next_to toaster faucet)\n    (grabbable milk)\n    (containers microwave)\n    (obj_ontop coffe_maker kitchen_counter)\n    (obj_next_to toaster kitchen_counter)\n    (inside_room faucet dining_room)\n    (has_switch freezer)\n    (obj_next_to faucet microwave)\n    (obj_next_to faucet toaster)\n    (inside_room kitchen_counter dining_room)\n    (movable food_food)\n    (movable food_egg)\n    (obj_next_to kitchen_counter coffe_maker)\n    (obj_next_to kitchen_counter food_cheese)\n    (has_switch microwave)\n    (can_open freezer)\n    (has_plug toaster)\n    (obj_next_to freezer kitchen_counter)\n    (inside_room microwave dining_room)\n    (has_switch faucet)\n    (obj_next_to coffe_maker faucet)\n    (obj_inside food_vegetable freezer)\n    (obj_inside milk freezer)\n    (obj_next_to colander kitchen_counter)\n    (inside_room food_egg dining_room)\n    (obj_ontop food_food kitchen_counter)\n    (obj_next_to microwave faucet)\n    (cuttable food_food)\n    (obj_next_to coffe_maker kitchen_counter)\n    (obj_next_to toaster coffe_maker)\n    (has_plug microwave)\n    (obj_next_to milk kitchen_counter)\n    (inside_room freezer dining_room)\n    (plugged_in freezer)\n    (clean freezer)\n    (inside_room colander dining_room)\n    (grabbable colander)\n    (movable food_vegetable)\n    (obj_next_to microwave kitchen_counter)\n    (has_switch coffe_maker)\n    (inside_room milk dining_room)\n    (obj_next_to kitchen_counter food_egg)\n    (obj_next_to coffe_maker toaster)\n    (obj_next_to microwave freezer)\n    (drinkable milk)\n    (grabbable food_food)\n    (movable milk)\n    (obj_next_to microwave toaster)\n    (eatable food_food)\n    (cuttable food_egg)\n    (inside_room toaster dining_room)\n    (has_plug freezer)\n    (inside character bedroom)\n    (grabbable food_egg)\n    (obj_next_to kitchen_counter microwave)\n    (can_open milk)\n    (eatable food_vegetable)\n    (grabbable food_cheese)\n    (obj_next_to food_food kitchen_counter)\n    (obj_next_to kitchen_counter toaster)\n    (movable food_cheese)\n    (obj_next_to food_cheese kitchen_counter)\n    (pourable milk)\n    (obj_next_to faucet coffe_maker)\n    (obj_ontop microwave kitchen_counter)\n    (cream food_cheese)\n    (has_switch toaster)\n    (surfaces kitchen_counter)\n    (grabbable food_vegetable)\n    (recipient colander)\n    (can_open coffe_maker)\n    (obj_ontop faucet kitchen_counter)\n    (obj_next_to faucet kitchen_counter)\n    (movable coffe_maker)\n    (inside_room food_vegetable dining_room)\n    (obj_inside food_egg freezer)\n    (containers freezer)\n    (obj_next_to kitchen_counter food_vegetable)\n    (inside_room food_food dining_room)\n    (movable toaster)\n    (obj_ontop toaster kitchen_counter)\n    (recipient coffe_maker)\n    (closed freezer)\n    (has_plug coffe_maker)\n    (obj_ontop colander kitchen_counter)\n    (obj_next_to kitchen_counter milk)\n    (inside_room food_cheese dining_room)\n    (can_open microwave)\n    (obj_next_to kitchen_counter freezer)\n    (obj_next_to food_vegetable kitchen_counter)\n    (obj_next_to toaster microwave)\n    (containers coffe_maker)\n    (cuttable food_vegetable)\n    (obj_next_to kitchen_counter faucet)\n    (inside_room coffe_maker dining_room)\n    (eatable food_cheese)\n    (obj_next_to freezer microwave)\n    (movable colander)\n    (obj_next_to kitchen_counter food_food)\n    (eatable food_egg)\n    (obj_next_to food_egg kitchen_counter)\n    (obj_next_to kitchen_counter colander)\n    (cuttable food_cheese)\n)\n    (:goal\n    (and\n        (open freezer)\n        (plugged_in freezer)\n        (obj_inside food_cheese freezer)\n    )\n)\n    )\n    "
      },
      "158_1": {
        "task_name": "Go to toilet",
        "natural_language_description": "The person will stand , walk to the bathroom, and this case look at the toilet in the bathroom as no other action was requested",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "INSIDE",
              "to_id": 1
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 37
            }
          ]
        },
        "tl_goal": "(INSIDE(character.65, bathroom.1) and FACING(character.65, toilet.37))",
        "action_trajectory": [
          "[STANDUP]",
          "[WALK] <bathroom> (1)",
          "[WALK] <toilet> (37)",
          "[FIND] <toilet> (37)",
          "[TURNTO] <toilet> (37)",
          "[LOOKAT] <toilet> (37)"
        ],
        "transition_model": "(define (problem Go_to_toilet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dining_room bathroom toilet - object\n)\n    (:init\n    (can_open toilet)\n    (sittable toilet)\n    (sitting character)\n    (containers toilet)\n    (inside_room toilet bathroom)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n        (inside character bathroom)\n        (facing character toilet)\n    )\n)\n    )\n    "
      },
      "323_2": {
        "task_name": "Go to toilet",
        "natural_language_description": "Walk to the bathroom.  Find the toilet.  Lift the top of the toilet.  Sit on the toilet.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 37
            }
          ]
        },
        "tl_goal": "ONTOP(character.65, toilet.37)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <toilet> (37)",
          "[FIND] <toilet> (37)",
          "[OPEN] <toilet> (37)",
          "[SIT] <toilet> (37)"
        ],
        "transition_model": "(define (problem Go_to_toilet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom toilet home_office - object\n)\n    (:init\n    (clean toilet)\n    (can_open toilet)\n    (closed toilet)\n    (containers toilet)\n    (sittable toilet)\n    (off toilet)\n    (inside_room toilet bathroom)\n    (inside character home_office)\n)\n    (:goal\n    (and\n        (ontop character toilet)\n    )\n)\n    )\n    "
      },
      "430_2": {
        "task_name": "Go to toilet",
        "natural_language_description": "When I need to use the restroom I walk to the bathroom, sit on the toilet, do my business, wipe with toilet paper, stand up and flush. Then wash my hands.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 37
            }
          ]
        },
        "tl_goal": "ONTOP(character.65, toilet.37)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <toilet> (37)",
          "[FIND] <toilet> (37)",
          "[SIT] <toilet> (37)",
          "[FIND] <toilet_paper> (1000)",
          "[GRAB] <toilet_paper> (1000)",
          "[WIPE] <toilet_paper> (1000)",
          "[STANDUP]",
          "[WALK] <sink> (42)",
          "[FIND] <soap> (1001)",
          "[WASH] <soap> (1001)"
        ],
        "transition_model": "(define (problem Go_to_toilet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office toilet bathroom_counter sink toilet_paper soap - object\n)\n    (:init\n    (containers sink)\n    (obj_next_to toilet_paper toilet)\n    (containers toilet)\n    (obj_next_to toilet toilet_paper)\n    (obj_next_to soap sink)\n    (inside_room sink bathroom)\n    (obj_next_to toilet sink)\n    (inside_room soap bathroom)\n    (obj_next_to sink bathroom_counter)\n    (sittable toilet)\n    (movable toilet_paper)\n    (inside_room toilet_paper bathroom)\n    (obj_next_to sink soap)\n    (movable soap)\n    (obj_next_to bathroom_counter sink)\n    (cuttable toilet_paper)\n    (can_open toilet)\n    (obj_ontop soap sink)\n    (hangable toilet_paper)\n    (obj_inside sink bathroom_counter)\n    (inside_room toilet bathroom)\n    (cover_object toilet_paper)\n    (inside_room bathroom_counter bathroom)\n    (recipient sink)\n    (grabbable toilet_paper)\n    (surfaces bathroom_counter)\n    (cream soap)\n    (inside character home_office)\n    (grabbable soap)\n    (has_paper toilet_paper)\n    (obj_next_to sink toilet)\n)\n    (:goal\n    (and\n        (ontop character toilet)\n    )\n)\n    )\n    "
      },
      "478_1": {
        "task_name": "Go to toilet",
        "natural_language_description": "I walk into the bath room and go to the toilet",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 37
            }
          ]
        },
        "tl_goal": "ONTOP(character.65, toilet.37)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <toilet> (37)",
          "[FIND] <toilet> (37)",
          "[SIT] <toilet> (37)"
        ],
        "transition_model": "(define (problem Go_to_toilet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom bedroom toilet - object\n)\n    (:init\n    (can_open toilet)\n    (inside character bedroom)\n    (sittable toilet)\n    (containers toilet)\n    (inside_room toilet bathroom)\n)\n    (:goal\n    (and\n        (ontop character toilet)\n    )\n)\n    )\n    "
      },
      "496_1": {
        "task_name": "Go to toilet",
        "natural_language_description": "I walk to the entrance of the bathroom. I turn to the door. I open the door to the bathroom. I walk inside of the bathroom. I find the toilet inside of the bathroom and walk over to it. I turn and look at the toilet.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "INSIDE",
              "to_id": 1
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 37
            }
          ]
        },
        "tl_goal": "(INSIDE(character.65, bathroom.1) and FACING(character.65, toilet.37))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <toilet> (37)",
          "[FIND] <toilet> (37)",
          "[TURNTO] <toilet> (37)",
          "[LOOKAT] <toilet> (37)",
          "[WALK] <toilet> (37)",
          "[TURNTO] <toilet> (37)"
        ],
        "transition_model": "(define (problem Go_to_toilet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom bedroom toilet - object\n)\n    (:init\n    (can_open toilet)\n    (inside character bedroom)\n    (sittable toilet)\n    (containers toilet)\n    (inside_room toilet bathroom)\n)\n    (:goal\n    (and\n        (inside character bathroom)\n        (facing character toilet)\n    )\n)\n    )\n    "
      },
      "624_2": {
        "task_name": "Go to toilet",
        "natural_language_description": "I go to the bathroom open the door and close it, then i sit on the toilet.... I use toilet paper, wash my hands and open the door to exit.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "ONTOP(character.65, toilet.1000)",
        "action_trajectory": [
          "[FIND] <toilet> (1000)",
          "[SIT] <toilet> (1000)",
          "[FIND] <toilet_paper> (1001)",
          "[GRAB] <toilet_paper> (1001)",
          "[FIND] <dresser> (108)",
          "[WASH] <dresser> (108)"
        ],
        "transition_model": "(define (problem Go_to_toilet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    toilet toilet_paper dresser - object\n)\n    (:init\n    (cuttable toilet_paper)\n    (can_open toilet)\n    (grabbable toilet_paper)\n    (obj_next_to toilet dresser)\n    (obj_next_to toilet_paper toilet)\n    (obj_next_to dresser dresser)\n    (can_open dresser)\n    (sittable toilet)\n    (containers toilet)\n    (hangable toilet_paper)\n    (movable toilet_paper)\n    (obj_next_to dresser toilet)\n    (obj_next_to toilet toilet_paper)\n    (containers dresser)\n    (cover_object toilet_paper)\n    (has_paper toilet_paper)\n)\n    (:goal\n    (and\n        (ontop character toilet)\n    )\n)\n    )\n    "
      },
      "188_1": {
        "task_name": "Change TV channel",
        "natural_language_description": "its time for my favorite show and im going change with the help of remote control and watch",
        "vh_goal": {
          "actions": [
            "TOUCH|PUSH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((TOUCH(x0) or PUSH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410) and HOLDS_RH(character.65, remote_control.1000)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <television> (410)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[TOUCH] <remote_control> (1000)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Change_TV_channel)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office remote_control bedroom chair television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (surfaces chair)\n    (clean television)\n    (obj_next_to television remote_control)\n    (movable chair)\n    (movable remote_control)\n    (obj_next_to chair television)\n    (obj_next_to remote_control television)\n    (sittable chair)\n    (plugged_in television)\n    (obj_next_to television chair)\n    (lookable television)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (inside_room chair bedroom)\n    (grabbable chair)\n    (has_switch television)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_inside chair home_office)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (holds_rh character remote_control)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "803_2": {
        "task_name": "Change TV channel",
        "natural_language_description": "I walk in living room. I find TV remote. I grab TV remote. I sit on sofa. I switch on TV. I switch channel.",
        "vh_goal": {
          "actions": [
            "TOUCH|PUSH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 1000
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((TOUCH(x0) or PUSH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, remote_control.1000) and HOLDS_RH(character.65, remote_control.1000)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[TURNTO] <remote_control> (1000)",
          "[LOOKAT] <remote_control> (1000)",
          "[PUSH] <remote_control> (1000)"
        ],
        "transition_model": "(define (problem Change_TV_channel)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office hair couch remote_control television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_inside hair home_office)\n    (clean television)\n    (surfaces couch)\n    (body_part hair)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (movable hair)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (cuttable hair)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (grabbable hair)\n    (inside character bathroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character remote_control)\n        (holds_rh character remote_control)\n    )\n)\n    )\n    "
      },
      "960_2": {
        "task_name": "Change TV channel",
        "natural_language_description": "change tv channel with the remote, then watch the tv",
        "vh_goal": {
          "actions": [
            "TOUCH|PUSH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((TOUCH(x0) or PUSH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410) and HOLDS_RH(character.65, remote_control.1000)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[TOUCH] <remote_control> (1000)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Change_TV_channel)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office remote_control dining_room television - object\n)\n    (:init\n    (grabbable remote_control)\n    (obj_next_to remote_control television)\n    (has_switch television)\n    (has_plug television)\n    (plugged_in television)\n    (off television)\n    (clean television)\n    (obj_next_to television remote_control)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (inside character dining_room)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (movable remote_control)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (holds_rh character remote_control)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "101_2": {
        "task_name": "Work",
        "natural_language_description": "Go to office, sit at desk, turn on computer, enter password, open application and begin work",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[FIND] <mouse> (413)",
          "[PUSH] <mouse> (413)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office mouse keyboard bedroom computer - object\n)\n    (:init\n    (obj_inside mouse home_office)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (grabbable mouse)\n    (obj_next_to computer keyboard)\n    (has_plug keyboard)\n    (has_switch computer)\n    (obj_next_to keyboard mouse)\n    (grabbable keyboard)\n    (obj_next_to mouse computer)\n    (obj_inside keyboard home_office)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (lookable computer)\n    (clean computer)\n    (inside_room mouse bedroom)\n    (off computer)\n    (obj_next_to computer mouse)\n    (obj_inside computer home_office)\n    (inside character bedroom)\n    (movable mouse)\n    (inside_room keyboard bedroom)\n    (inside_room computer bedroom)\n    (movable keyboard)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "1068_1": {
        "task_name": "Work",
        "natural_language_description": "walk to home office ,find computer ,switch on computer and work",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (2.417)",
          "[FIND] <computer> (2.417)",
          "[SWITCHON] <computer> (2.417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office computer - object\n)\n    (:init\n    (off computer)\n    (has_switch computer)\n    (obj_inside computer home_office)\n    (inside character bedroom)\n    (plugged_out computer)\n    (inside_room computer bedroom)\n    (lookable computer)\n    (clean computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "153_2": {
        "task_name": "Work",
        "natural_language_description": "turn computer on, open application to work with",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office computer dining_room - object\n)\n    (:init\n    (off computer)\n    (has_switch computer)\n    (obj_inside computer home_office)\n    (plugged_out computer)\n    (inside character dining_room)\n    (lookable computer)\n    (clean computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "196_2": {
        "task_name": "Work",
        "natural_language_description": "Walk to over to desk, sit down on chair and face the computer, turn the computer on, use arms to place hands on the keyboard, type work into the computer and use eyes to review.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse keyboard cpuscreen computer chair mousepad dining_room - object\n)\n    (:init\n    (obj_next_to chair mouse)\n    (obj_next_to chair mousepad)\n    (obj_next_to cpuscreen mousepad)\n    (surfaces chair)\n    (obj_inside mouse home_office)\n    (movable mousepad)\n    (obj_next_to mousepad computer)\n    (obj_next_to keyboard desk)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad desk)\n    (obj_next_to mousepad mouse)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (grabbable mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (has_plug keyboard)\n    (surfaces desk)\n    (obj_next_to desk mousepad)\n    (obj_next_to computer keyboard)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (facing chair computer)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (obj_next_to mouse mousepad)\n    (obj_next_to mouse desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_next_to keyboard mouse)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to mouse computer)\n    (obj_inside keyboard home_office)\n    (obj_next_to chair desk)\n    (obj_ontop mousepad desk)\n    (obj_next_to mousepad keyboard)\n    (obj_inside mousepad home_office)\n    (obj_next_to mouse keyboard)\n    (obj_next_to cpuscreen desk)\n    (has_plug mouse)\n    (grabbable chair)\n    (obj_next_to mouse chair)\n    (obj_next_to cpuscreen chair)\n    (inside character dining_room)\n    (obj_inside cpuscreen home_office)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (clean computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to mouse cpuscreen)\n    (obj_next_to desk computer)\n    (off computer)\n    (obj_ontop mouse desk)\n    (obj_next_to computer mouse)\n    (obj_inside desk home_office)\n    (obj_next_to computer desk)\n    (obj_inside computer home_office)\n    (movable desk)\n    (movable mouse)\n    (obj_next_to cpuscreen keyboard)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to computer mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_inside chair home_office)\n    (obj_ontop mouse mousepad)\n    (obj_next_to keyboard mousepad)\n    (obj_next_to mousepad chair)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "198_1": {
        "task_name": "Work",
        "natural_language_description": "Sit down on chair in front of computer, turn on computer, find mouse.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office desk mouse keyboard powersocket cpuscreen doorjamb computer chair mousepad wall floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_ontop mousepad desk)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_ontop doorjamb floor)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to computer desk)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (obj_next_to keyboard floor)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (inside_room doorjamb bathroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_ontop desk floor)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (inside_room wall bathroom)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room floor bathroom)\n    (obj_next_to floor cpuscreen)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "201_2": {
        "task_name": "Work",
        "natural_language_description": "Type on a computer in the home office.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office keyboard computer - object\n)\n    (:init\n    (off computer)\n    (has_switch computer)\n    (obj_next_to computer keyboard)\n    (obj_inside computer home_office)\n    (inside character bedroom)\n    (grabbable keyboard)\n    (obj_next_to keyboard computer)\n    (inside_room keyboard bedroom)\n    (plugged_out computer)\n    (obj_inside keyboard home_office)\n    (inside_room computer bedroom)\n    (movable keyboard)\n    (lookable computer)\n    (has_plug keyboard)\n    (clean computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "232_1": {
        "task_name": "Work",
        "natural_language_description": "I need to complete work on my computer, so I will be pulling out my chair, turning on my computer and begin my task.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[PULL] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office chair computer - object\n)\n    (:init\n    (obj_next_to computer chair)\n    (off computer)\n    (sittable chair)\n    (obj_next_to chair computer)\n    (surfaces chair)\n    (has_switch computer)\n    (inside_room chair bedroom)\n    (obj_inside computer home_office)\n    (inside character bedroom)\n    (grabbable chair)\n    (plugged_out computer)\n    (inside_room computer bedroom)\n    (obj_inside chair home_office)\n    (lookable computer)\n    (facing chair computer)\n    (clean computer)\n    (movable chair)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "234_1": {
        "task_name": "Work",
        "natural_language_description": "I walk into the home office and to the computer to switch it on. I sit in the chair and operate the computer with the keyboard and mouse.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse keyboard powersocket cpuscreen doorjamb bedroom chair mousepad computer wall floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_ontop mousepad desk)\n    (inside_room chair bedroom)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (inside_room mouse bedroom)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (inside_room mousepad bedroom)\n    (obj_ontop doorjamb floor)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (inside_room doorjamb bedroom)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to computer desk)\n    (inside character bedroom)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (inside_room wall bedroom)\n    (obj_next_to keyboard floor)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to chair floor)\n    (inside_room floor bedroom)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (inside_room desk bedroom)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (inside_room cpuscreen bedroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_ontop desk floor)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (obj_next_to floor cpuscreen)\n    (inside_room keyboard bedroom)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (inside_room computer bedroom)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "343_2": {
        "task_name": "Work",
        "natural_language_description": "Find Computer. Switch on computer.Sit on the chair.grab key board.type keyboard. click mouse.look at  computer.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 170,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.170)",
        "action_trajectory": [
          "[FIND] <computer> (170)",
          "[SWITCHON] <computer> (170)",
          "[FIND] <chair> (103)",
          "[SIT] <chair> (103)",
          "[FIND] <keyboard> (168)",
          "[GRAB] <keyboard> (168)",
          "[TYPE] <keyboard> (168)",
          "[FIND] <mouse> (166)",
          "[TURNTO] <mouse> (166)",
          "[POINTAT] <mouse> (166)",
          "[TURNTO] <computer> (170)",
          "[LOOKAT] <computer> (170)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    desk mouse keyboard light cpuscreen bookshelf computer chair mousepad wall floor - object\n)\n    (:init\n    (obj_next_to cpuscreen mousepad)\n    (surfaces chair)\n    (has_plug light)\n    (movable mousepad)\n    (obj_next_to cpuscreen floor)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to bookshelf light)\n    (obj_next_to chair bookshelf)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to light chair)\n    (obj_next_to floor light)\n    (obj_next_to light wall)\n    (obj_ontop mousepad desk)\n    (obj_next_to bookshelf desk)\n    (facing floor computer)\n    (obj_next_to wall light)\n    (obj_next_to mouse chair)\n    (obj_next_to light floor)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_next_to bookshelf wall)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to desk bookshelf)\n    (obj_next_to light cpuscreen)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (obj_next_to bookshelf chair)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_next_to light computer)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to light light)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to light desk)\n    (obj_next_to cpuscreen desk)\n    (obj_next_to mousepad bookshelf)\n    (obj_next_to chair light)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (obj_next_to cpuscreen light)\n    (obj_next_to desk light)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to keyboard bookshelf)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_next_to bookshelf computer)\n    (obj_next_to computer desk)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_next_to desk mousepad)\n    (obj_next_to bookshelf mouse)\n    (obj_next_to mousepad floor)\n    (obj_next_to computer light)\n    (obj_next_to mousepad desk)\n    (obj_next_to mouse bookshelf)\n    (obj_next_to keyboard floor)\n    (grabbable mouse)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_next_to bookshelf mousepad)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to cpuscreen bookshelf)\n    (obj_next_to floor floor)\n    (obj_next_to bookshelf keyboard)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to keyboard light)\n    (obj_next_to wall floor)\n    (movable desk)\n    (obj_next_to wall bookshelf)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to bookshelf floor)\n    (containers bookshelf)\n    (obj_next_to light bookshelf)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_ontop bookshelf floor)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to mousepad computer)\n    (obj_next_to floor bookshelf)\n    (obj_next_to bookshelf cpuscreen)\n    (obj_next_to wall computer)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (surfaces bookshelf)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_ontop desk floor)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to mouse computer)\n    (obj_next_to chair desk)\n    (obj_next_to computer bookshelf)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (can_open bookshelf)\n    (obj_next_to chair wall)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (obj_next_to floor cpuscreen)\n    (obj_next_to floor chair)\n    (obj_next_to light keyboard)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "373_1": {
        "task_name": "Work",
        "natural_language_description": "go to home office. turn the computer on. begin working",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom computer home_office - object\n)\n    (:init\n    (off computer)\n    (has_switch computer)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (plugged_out computer)\n    (lookable computer)\n    (clean computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "406_2": {
        "task_name": "Work",
        "natural_language_description": "Find Computer and in the chair in from of him. Switch on the computer and look at it and work, tying text with the keyboard when needed.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 170,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.170)",
        "action_trajectory": [
          "[FIND] <computer> (170)",
          "[FIND] <chair> (103)",
          "[SIT] <chair> (103)",
          "[SWITCHON] <computer> (170)",
          "[TURNTO] <computer> (170)",
          "[LOOKAT] <computer> (170)",
          "[FIND] <keyboard> (168)",
          "[TYPE] <keyboard> (168)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    keyboard chair computer - object\n)\n    (:init\n    (surfaces chair)\n    (obj_next_to chair keyboard)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer keyboard)\n    (has_plug keyboard)\n    (facing chair computer)\n    (movable chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (grabbable chair)\n    (lookable computer)\n    (clean computer)\n    (off computer)\n    (movable keyboard)\n    (obj_next_to chair computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "409_2": {
        "task_name": "Work",
        "natural_language_description": "Walk to home office. Sit on chair. Switch on computer. type in keyboard.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office keyboard bedroom chair computer - object\n)\n    (:init\n    (surfaces chair)\n    (obj_next_to chair keyboard)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer keyboard)\n    (has_plug keyboard)\n    (facing chair computer)\n    (movable chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_inside keyboard home_office)\n    (inside_room chair bedroom)\n    (grabbable chair)\n    (lookable computer)\n    (clean computer)\n    (off computer)\n    (obj_inside computer home_office)\n    (inside character bedroom)\n    (inside_room keyboard bedroom)\n    (inside_room computer bedroom)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_inside chair home_office)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "419_1": {
        "task_name": "Work",
        "natural_language_description": "Walk to home office, walk to desk, sit in chair, turn on computer, look at computer, click mouse and type on keyboard.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <mouse> (413)",
          "[TOUCH] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse hair keyboard cpuscreen bedroom chair mousepad computer - object\n)\n    (:init\n    (obj_next_to cpuscreen mousepad)\n    (surfaces chair)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (sittable chair)\n    (movable hair)\n    (obj_ontop mousepad desk)\n    (inside_room chair bedroom)\n    (obj_next_to mouse chair)\n    (inside_room mouse bedroom)\n    (obj_ontop mouse desk)\n    (movable mouse)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to chair mouse)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (inside_room mousepad bedroom)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to cpuscreen desk)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (grabbable hair)\n    (obj_next_to computer desk)\n    (inside character bedroom)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad desk)\n    (grabbable mouse)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (cuttable hair)\n    (obj_next_to computer mouse)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (inside_room desk bedroom)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to mousepad chair)\n    (obj_next_to chair mousepad)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (body_part hair)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (inside_room cpuscreen bedroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to mouse computer)\n    (obj_next_to chair desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_inside cpuscreen home_office)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room keyboard bedroom)\n    (inside_room computer bedroom)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "433_1": {
        "task_name": "Work",
        "natural_language_description": "Using a computer",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 170,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.170)",
        "action_trajectory": [
          "[FIND] <chair> (103)",
          "[SIT] <chair> (103)",
          "[FIND] <computer> (170)",
          "[SWITCHON] <computer> (170)",
          "[FIND] <mouse> (166)",
          "[TOUCH] <mouse> (166)",
          "[FIND] <keyboard> (168)",
          "[TYPE] <keyboard> (168)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    mouse keyboard chair computer - object\n)\n    (:init\n    (obj_next_to chair mouse)\n    (surfaces chair)\n    (obj_next_to chair keyboard)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (grabbable mouse)\n    (has_plug keyboard)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (movable chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_next_to keyboard chair)\n    (obj_next_to keyboard mouse)\n    (grabbable keyboard)\n    (obj_next_to mouse computer)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (grabbable chair)\n    (obj_next_to mouse chair)\n    (lookable computer)\n    (clean computer)\n    (off computer)\n    (obj_next_to computer mouse)\n    (movable mouse)\n    (movable keyboard)\n    (obj_next_to chair computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "437_2": {
        "task_name": "Work",
        "natural_language_description": "I walk into the office. I see my computer sitting on the desk. I walk over to the desk and sit down. I turn on the computer. I begin to use the keys and  mouse on the mousepad to work on the computer.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office desk mouse hair keyboard powersocket cpuscreen doorjamb computer chair mousepad wall floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (movable hair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_ontop mousepad desk)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_ontop doorjamb floor)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (grabbable hair)\n    (obj_next_to computer desk)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_inside hair home_office)\n    (obj_next_to mousepad desk)\n    (obj_next_to keyboard floor)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (cuttable hair)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (body_part hair)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (inside_room doorjamb bathroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_ontop desk floor)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (inside_room wall bathroom)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room floor bathroom)\n    (obj_next_to floor cpuscreen)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "440_1": {
        "task_name": "Work",
        "natural_language_description": "I walk into the office where I see my computer on the desk. I go to sit down and turn on computer. I begin typing.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 170,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.170)",
        "action_trajectory": [
          "[FIND] <computer> (170)",
          "[TURNTO] <computer> (170)",
          "[LOOKAT] <computer> (170)",
          "[WALK] <desk> (104)",
          "[FIND] <chair> (103)",
          "[SIT] <chair> (103)",
          "[SWITCHON] <computer> (170)",
          "[FIND] <keyboard> (168)",
          "[TYPE] <keyboard> (168)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    desk mouse keyboard cpuscreen computer chair mousepad - object\n)\n    (:init\n    (obj_next_to chair mouse)\n    (obj_next_to chair mousepad)\n    (obj_next_to cpuscreen mousepad)\n    (surfaces chair)\n    (movable mousepad)\n    (obj_next_to mousepad computer)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad desk)\n    (obj_next_to mousepad mouse)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (grabbable mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (has_plug keyboard)\n    (surfaces desk)\n    (obj_next_to desk mousepad)\n    (obj_next_to computer keyboard)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (facing chair computer)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (obj_next_to mouse mousepad)\n    (obj_next_to mouse desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_next_to keyboard mouse)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to mouse computer)\n    (obj_next_to chair desk)\n    (obj_ontop mousepad desk)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to mouse keyboard)\n    (obj_next_to cpuscreen desk)\n    (has_plug mouse)\n    (grabbable chair)\n    (obj_next_to mouse chair)\n    (obj_next_to cpuscreen chair)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (clean computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to mouse cpuscreen)\n    (obj_next_to desk computer)\n    (off computer)\n    (obj_ontop mouse desk)\n    (obj_next_to computer mouse)\n    (obj_next_to computer desk)\n    (movable desk)\n    (movable mouse)\n    (obj_next_to cpuscreen keyboard)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to computer mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n    (obj_next_to keyboard mousepad)\n    (obj_next_to mousepad chair)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "453_2": {
        "task_name": "Work",
        "natural_language_description": "I walk to the office. I sit down in the chair. I turn on the computer. I start typing on the keyboard.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office keyboard computer chair - object\n)\n    (:init\n    (surfaces chair)\n    (obj_next_to chair keyboard)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer keyboard)\n    (has_plug keyboard)\n    (facing chair computer)\n    (movable chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_inside keyboard home_office)\n    (grabbable chair)\n    (lookable computer)\n    (clean computer)\n    (off computer)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (obj_inside chair home_office)\n    (movable keyboard)\n    (obj_next_to chair computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "46_1": {
        "task_name": "Work",
        "natural_language_description": "Using desktop computer in home office",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <desk> (357)",
          "[WALK] <desk> (357)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <chair> (356)",
          "[PULL] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse keyboard powersocket cpuscreen doorjamb computer chair mousepad wall dining_room floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_ontop mousepad desk)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (obj_ontop computer desk)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (inside_room floor dining_room)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_ontop doorjamb floor)\n    (inside_room wall dining_room)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to computer desk)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (obj_next_to keyboard floor)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (obj_ontop desk floor)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (inside character dining_room)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room powersocket dining_room)\n    (obj_next_to floor cpuscreen)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "475_2": {
        "task_name": "Work",
        "natural_language_description": "I walk into home office. I walk to desk. I sit at chair. I turn on computer.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse keyboard cpuscreen bedroom chair mousepad computer - object\n)\n    (:init\n    (obj_next_to cpuscreen mousepad)\n    (surfaces chair)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (sittable chair)\n    (obj_ontop mousepad desk)\n    (inside_room chair bedroom)\n    (obj_next_to mouse chair)\n    (inside_room mouse bedroom)\n    (obj_ontop mouse desk)\n    (movable mouse)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to chair mouse)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (inside_room mousepad bedroom)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to cpuscreen desk)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to computer desk)\n    (inside character bedroom)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad desk)\n    (grabbable mouse)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to computer mouse)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (inside_room desk bedroom)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to mousepad chair)\n    (obj_next_to chair mousepad)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (inside_room cpuscreen bedroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to mouse computer)\n    (obj_next_to chair desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_inside cpuscreen home_office)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room keyboard bedroom)\n    (inside_room computer bedroom)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "503_1": {
        "task_name": "Work",
        "natural_language_description": "Work on the computer",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <chair> (356)",
          "[PULL] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse keyboard powersocket cpuscreen doorjamb computer chair mousepad wall dining_room floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_ontop mousepad desk)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (inside_room floor dining_room)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_ontop doorjamb floor)\n    (inside_room wall dining_room)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to computer desk)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (obj_next_to keyboard floor)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (obj_ontop desk floor)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (inside character dining_room)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room powersocket dining_room)\n    (obj_next_to floor cpuscreen)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "670_2": {
        "task_name": "Work",
        "natural_language_description": "I need to finish some work on my computer in my home office to meet a deadline for tomorrow.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[FIND] <keyboard> (415)",
          "[GRAB] <keyboard> (415)",
          "[FIND] <desk> (357)",
          "[OPEN] <desk> (357)",
          "[PUTBACK] <keyboard> (415) <desk> (357)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[FIND] <mousepad> (414)",
          "[PUTBACK] <mouse> (413) <mousepad> (414)",
          "[PLUGIN] <keyboard> (415)",
          "[PLUGIN] <mouse> (413)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[TURNTO] <computer> (417)",
          "[TYPE] <keyboard> (415)",
          "[GRAB] <mouse> (413)",
          "[TOUCH] <mouse> (413)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk walllamp mouse keyboard light powersocket cpuscreen doorjamb bedroom chair mousepad computer wall floor - object\n)\n    (:init\n    (clean mouse)\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (has_plug light)\n    (movable mousepad)\n    (obj_next_to cpuscreen floor)\n    (inside_room light bedroom)\n    (obj_next_to keyboard computer)\n    (obj_next_to doorjamb walllamp)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_next_to light chair)\n    (obj_next_to floor light)\n    (obj_next_to walllamp floor)\n    (obj_next_to light wall)\n    (obj_ontop mousepad desk)\n    (clean light)\n    (inside_room chair bedroom)\n    (facing floor computer)\n    (obj_next_to wall light)\n    (obj_inside wall home_office)\n    (obj_next_to mouse chair)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (obj_next_to light floor)\n    (inside_room mouse bedroom)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (obj_next_to light doorjamb)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_next_to light mouse)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to light cpuscreen)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_next_to light computer)\n    (inside_room mousepad bedroom)\n    (obj_ontop doorjamb floor)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to light light)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to chair walllamp)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_inside walllamp home_office)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to light desk)\n    (obj_next_to cpuscreen desk)\n    (obj_next_to walllamp keyboard)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (obj_next_to chair light)\n    (facing wall computer)\n    (inside_room doorjamb bedroom)\n    (obj_next_to floor mousepad)\n    (obj_next_to cpuscreen light)\n    (obj_next_to desk light)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to desk walllamp)\n    (obj_next_to computer desk)\n    (inside character bedroom)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (facing walllamp computer)\n    (obj_next_to desk mousepad)\n    (plugged_out mouse)\n    (clean desk)\n    (obj_next_to mousepad floor)\n    (obj_next_to computer light)\n    (obj_next_to mousepad desk)\n    (inside_room wall bedroom)\n    (obj_next_to keyboard floor)\n    (plugged_out keyboard)\n    (obj_next_to walllamp chair)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (plugged_in light)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to powersocket light)\n    (obj_next_to walllamp desk)\n    (obj_next_to chair floor)\n    (obj_next_to light mousepad)\n    (inside_room floor bedroom)\n    (obj_next_to mouse floor)\n    (clean keyboard)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to walllamp wall)\n    (obj_next_to wall walllamp)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to keyboard light)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (off light)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to light powersocket)\n    (inside_room desk bedroom)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (obj_inside mouse desk)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to floor walllamp)\n    (movable chair)\n    (obj_next_to desk mouse)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to walllamp doorjamb)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (inside_room cpuscreen bedroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_ontop desk floor)\n    (closed desk)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to mouse light)\n    (obj_next_to chair wall)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (obj_next_to mousepad light)\n    (obj_next_to floor cpuscreen)\n    (inside_room keyboard bedroom)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to light keyboard)\n    (obj_next_to keyboard walllamp)\n    (inside_room computer bedroom)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "719_2": {
        "task_name": "Work",
        "natural_language_description": "Go into the office and sit down at the desk in front of the computer. Turn on the computer and look at it while clicking with the mouse and typing with the keyboard.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office keyboard computer chair dining_room - object\n)\n    (:init\n    (surfaces chair)\n    (obj_next_to chair keyboard)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer keyboard)\n    (has_plug keyboard)\n    (facing chair computer)\n    (movable chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_inside keyboard home_office)\n    (grabbable chair)\n    (inside character dining_room)\n    (lookable computer)\n    (clean computer)\n    (off computer)\n    (obj_inside computer home_office)\n    (obj_inside chair home_office)\n    (movable keyboard)\n    (obj_next_to chair computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "757_2": {
        "task_name": "Work",
        "natural_language_description": "Find the computer. Turn it on by pressing the on button. Wait for it to load. Use the mouse and keyboard to perform your tasks on screen.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 170,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.170)",
        "action_trajectory": [
          "[FIND] <computer> (170)",
          "[SWITCHON] <computer> (170)",
          "[FIND] <mouse> (166)",
          "[TOUCH] <mouse> (166)",
          "[FIND] <keyboard> (168)",
          "[TOUCH] <keyboard> (168)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    mouse keyboard computer - object\n)\n    (:init\n    (off computer)\n    (obj_next_to mouse keyboard)\n    (obj_next_to computer mouse)\n    (has_plug mouse)\n    (has_switch computer)\n    (obj_next_to computer keyboard)\n    (obj_next_to keyboard mouse)\n    (grabbable keyboard)\n    (movable mouse)\n    (obj_next_to mouse computer)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (grabbable mouse)\n    (movable keyboard)\n    (lookable computer)\n    (has_plug keyboard)\n    (clean computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "787_2": {
        "task_name": "Work",
        "natural_language_description": "I walk to the office. I find the copmputer. I turn on the computer. I find the chair. I sit down. I find the keyboard and mouse. I type on the keyboard.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <keyboard> (415)",
          "[FIND] <mouse> (413)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[TYPE] <keyboard> (415)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office mouse keyboard computer chair dining_room - object\n)\n    (:init\n    (obj_next_to chair mouse)\n    (surfaces chair)\n    (obj_inside mouse home_office)\n    (obj_next_to chair keyboard)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (grabbable mouse)\n    (has_plug keyboard)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (movable chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_next_to keyboard chair)\n    (obj_next_to keyboard mouse)\n    (grabbable keyboard)\n    (obj_next_to mouse computer)\n    (obj_inside keyboard home_office)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (grabbable chair)\n    (obj_next_to mouse chair)\n    (inside character dining_room)\n    (lookable computer)\n    (clean computer)\n    (off computer)\n    (obj_next_to computer mouse)\n    (obj_inside computer home_office)\n    (movable mouse)\n    (obj_inside chair home_office)\n    (movable keyboard)\n    (obj_next_to chair computer)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "795_1": {
        "task_name": "Work",
        "natural_language_description": "I walk to the bedroom, then find the computer and sit in the chair ,next switch on the computer and finally type in the keyboard to start to work on it",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 170,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.170)",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <computer> (170)",
          "[FIND] <computer> (170)",
          "[FIND] <chair> (103)",
          "[SIT] <chair> (103)",
          "[SWITCHON] <computer> (170)",
          "[FIND] <keyboard> (168)",
          "[TYPE] <keyboard> (168)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office keyboard bedroom chair computer - object\n)\n    (:init\n    (surfaces chair)\n    (obj_next_to chair keyboard)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer keyboard)\n    (has_plug keyboard)\n    (facing chair computer)\n    (movable chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_inside keyboard home_office)\n    (inside_room chair bedroom)\n    (grabbable chair)\n    (lookable computer)\n    (clean computer)\n    (off computer)\n    (obj_inside computer home_office)\n    (inside_room keyboard bedroom)\n    (inside character home_office)\n    (inside_room computer bedroom)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_inside chair home_office)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "819_1": {
        "task_name": "Work",
        "natural_language_description": "I go in the office, sit at my desk, then turn on the computer.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse hair keyboard cpuscreen computer chair mousepad dining_room - object\n)\n    (:init\n    (obj_next_to cpuscreen mousepad)\n    (surfaces chair)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (sittable chair)\n    (movable hair)\n    (obj_ontop mousepad desk)\n    (obj_next_to mouse chair)\n    (obj_ontop mouse desk)\n    (movable mouse)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to chair mouse)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to cpuscreen desk)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (grabbable hair)\n    (obj_next_to computer desk)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_inside hair home_office)\n    (obj_next_to mousepad desk)\n    (grabbable mouse)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (cuttable hair)\n    (obj_next_to computer mouse)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to mousepad chair)\n    (obj_next_to chair mousepad)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (body_part hair)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to mouse computer)\n    (obj_next_to chair desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (inside character dining_room)\n    (obj_inside cpuscreen home_office)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "874_1": {
        "task_name": "Work",
        "natural_language_description": "I walk to the home office. I open the door of the office room and sit on the chair and in front of me is my desktop computer,  and I switch on the computer.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office computer dining_room chair - object\n)\n    (:init\n    (obj_next_to computer chair)\n    (off computer)\n    (sittable chair)\n    (obj_next_to chair computer)\n    (surfaces chair)\n    (has_switch computer)\n    (obj_inside computer home_office)\n    (grabbable chair)\n    (plugged_out computer)\n    (inside character dining_room)\n    (obj_inside chair home_office)\n    (lookable computer)\n    (facing chair computer)\n    (clean computer)\n    (movable chair)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "910_1": {
        "task_name": "Work",
        "natural_language_description": "Work on computer",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom computer home_office chair - object\n)\n    (:init\n    (obj_next_to computer chair)\n    (off computer)\n    (sittable chair)\n    (obj_next_to chair computer)\n    (surfaces chair)\n    (has_switch computer)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (grabbable chair)\n    (plugged_out computer)\n    (obj_inside chair home_office)\n    (lookable computer)\n    (facing chair computer)\n    (clean computer)\n    (movable chair)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "91_2": {
        "task_name": "Work",
        "natural_language_description": "I go to my home office, sit on the chair and turn on the computer. I open my email account to look for all the information I need.I pull up my online task on the computer to look at what the assigned task is.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse keyboard powersocket cpuscreen doorjamb computer chair mousepad wall dining_room floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_ontop mousepad desk)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (inside_room floor dining_room)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_ontop doorjamb floor)\n    (inside_room wall dining_room)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to computer desk)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (obj_next_to keyboard floor)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (obj_ontop desk floor)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (inside character dining_room)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room powersocket dining_room)\n    (obj_next_to floor cpuscreen)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "93_2": {
        "task_name": "Work",
        "natural_language_description": "walk to Office,Walk to desk ,sit down in chair, turn on computer, start homework.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <check> (1000)",
          "[FIND] <homework> (1001)",
          "[TURNTO] <homework> (1001)",
          "[LOOKAT] <homework> (1001)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office desk mouse hair keyboard cpuscreen check homework computer chair mousepad - object\n)\n    (:init\n    (obj_next_to homework desk)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to check chair)\n    (surfaces chair)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (obj_next_to desk check)\n    (movable check)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (sittable chair)\n    (movable hair)\n    (has_paper homework)\n    (obj_ontop mousepad desk)\n    (readable check)\n    (obj_next_to mouse chair)\n    (obj_next_to chair homework)\n    (obj_ontop mouse desk)\n    (movable mouse)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_inside check home_office)\n    (obj_next_to chair mouse)\n    (obj_next_to homework chair)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to cpuscreen desk)\n    (readable homework)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (grabbable hair)\n    (obj_next_to computer desk)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to chair check)\n    (obj_next_to mousepad desk)\n    (grabbable mouse)\n    (obj_next_to desk homework)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (cuttable hair)\n    (obj_next_to computer mouse)\n    (has_paper check)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (grabbable homework)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (body_part hair)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to check desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable check)\n    (grabbable keyboard)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to mouse computer)\n    (obj_next_to chair desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_inside cpuscreen home_office)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (obj_inside homework home_office)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n    (movable homework)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "962_1": {
        "task_name": "Work",
        "natural_language_description": "I walk to the living room. I find the computer and turn it on. I look at the computer screen. I move and click the mouse to select buttons on the screen.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            }
          ]
        },
        "tl_goal": "ON(computer.417)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <mouse> (413)",
          "[PUSH] <mouse> (413)",
          "[FIND] <button> (1000)",
          "[PUSH] <button> (1000)"
        ],
        "transition_model": "(define (problem Work)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office mouse button computer - object\n)\n    (:init\n    (off computer)\n    (movable button)\n    (obj_next_to computer mouse)\n    (has_plug mouse)\n    (has_switch computer)\n    (obj_inside mouse home_office)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (movable mouse)\n    (obj_next_to mouse computer)\n    (plugged_out computer)\n    (grabbable mouse)\n    (obj_inside button home_office)\n    (obj_next_to button computer)\n    (lookable computer)\n    (obj_next_to computer button)\n    (clean computer)\n    (grabbable button)\n)\n    (:goal\n    (and\n        (on computer)\n    )\n)\n    )\n    "
      },
      "190_1": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "Put dishes in the dishwasher and start the dishwasher.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1001,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1001,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1001) and ON(dishwasher.1001) and ONTOP(bowl.1000, dishwasher.1001) and ONTOP(dish_soap.1003, dishwasher.1001) and ONTOP(plate.1002, dishwasher.1001))",
        "action_trajectory": [
          "[RUN] <dining_room> (201)",
          "[WALK] <bowl> (1000)",
          "[FIND] <bowl> (1000)",
          "[GRAB] <bowl> (1000)",
          "[WALK] <dishwasher> (1001)",
          "[OPEN] <dishwasher> (1001)",
          "[PUTBACK] <bowl> (1000) <dishwasher> (1001)",
          "[FIND] <plate> (1002)",
          "[GRAB] <plate> (1002)",
          "[WALK] <dishwasher> (1001)",
          "[PUTBACK] <plate> (1002) <dishwasher> (1001)",
          "[FIND] <dish_soap> (1003)",
          "[GRAB] <dish_soap> (1003)",
          "[WALK] <dishwasher> (1001)",
          "[PUTBACK] <dish_soap> (1003) <dishwasher> (1001)",
          "[CLOSE] <dishwasher> (1001)",
          "[SWITCHON] <dishwasher> (1001)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dishwasher dish_soap plate dining_room bowl - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to dishwasher dish_soap)\n    (grabbable dish_soap)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (movable dish_soap)\n    (inside_room bowl dining_room)\n    (cream dish_soap)\n    (movable bowl)\n    (surfaces plate)\n    (pourable dish_soap)\n    (obj_next_to plate dishwasher)\n    (closed dishwasher)\n    (clean dishwasher)\n    (grabbable bowl)\n    (inside_room dish_soap dining_room)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (recipient bowl)\n    (movable plate)\n    (obj_next_to dishwasher plate)\n    (inside character home_office)\n    (containers dishwasher)\n    (obj_inside plate dishwasher)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop bowl dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "201_1": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "Wash a plate using the dishwasher in the kitchen.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(plate.1001, dishwasher.1000) and ONTOP(dish_soap.1002, dishwasher.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dishwasher> (1000)",
          "[FIND] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[FIND] <plate> (1001)",
          "[GRAB] <plate> (1001)",
          "[PUTBACK] <plate> (1001) <dishwasher> (1000)",
          "[FIND] <dish_soap> (1002)",
          "[GRAB] <dish_soap> (1002)",
          "[PUTBACK] <dish_soap> (1002) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dishwasher dish_soap plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to dishwasher dish_soap)\n    (grabbable dish_soap)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (movable dish_soap)\n    (cream dish_soap)\n    (surfaces plate)\n    (pourable dish_soap)\n    (obj_next_to plate dishwasher)\n    (closed dishwasher)\n    (inside_room dish_soap dining_room)\n    (clean dishwasher)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (movable plate)\n    (obj_next_to dishwasher plate)\n    (inside character home_office)\n    (containers dishwasher)\n    (obj_inside plate dishwasher)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "223_2": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "walk into kitchen, find dishwasher, put plates in dishwasher, put soap in dishwasher, turn on dishwasher",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(dish_soap.1001, dishwasher.1000) and ONTOP(plate.1003, dishwasher.1000) and ONTOP(plate.1002, dishwasher.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dishwasher> (1000)",
          "[FIND] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[FIND] <dish_soap> (1001)",
          "[GRAB] <dish_soap> (1001)",
          "[PUTBACK] <dish_soap> (1001) <dishwasher> (1000)",
          "[FIND] <plate> (1002)",
          "[GRAB] <plate> (1002)",
          "[PUTBACK] <plate> (1002) <dishwasher> (1000)",
          "[FIND] <plate> (2.1003)",
          "[GRAB] <plate> (2.1003)",
          "[PUTBACK] <plate> (2.1003) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dishwasher dish_soap plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to dishwasher dish_soap)\n    (grabbable dish_soap)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (movable dish_soap)\n    (cream dish_soap)\n    (surfaces plate)\n    (pourable dish_soap)\n    (obj_next_to plate dishwasher)\n    (closed dishwasher)\n    (clean dishwasher)\n    (inside_room dish_soap dining_room)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (movable plate)\n    (obj_next_to dishwasher plate)\n    (inside character home_office)\n    (containers dishwasher)\n    (obj_inside plate dishwasher)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "327_2": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "I walk into the kitchen and go to the dishwasher. I open the dishwasher and grab the dishes. Iplace the dishes into the dishwasher then close it. I add soap then turn the dishwasher on.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(plate.1001, dishwasher.1000) and ONTOP(dish_soap.1002, dishwasher.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[WALK] <kitchen_counter> (230)",
          "[FIND] <plate> (1001)",
          "[GRAB] <plate> (1001)",
          "[PUTBACK] <plate> (1001) <dishwasher> (1000)",
          "[FIND] <dish_soap> (1002)",
          "[GRAB] <dish_soap> (1002)",
          "[PUTBACK] <dish_soap> (1002) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office microwave faucet dishwasher kitchen_counter coffe_maker dish_soap plate food_jam dining_room toaster - object\n)\n    (:init\n    (obj_next_to dishwasher kitchen_counter)\n    (obj_next_to toaster faucet)\n    (recipient plate)\n    (grabbable food_jam)\n    (containers microwave)\n    (obj_ontop coffe_maker kitchen_counter)\n    (obj_next_to toaster kitchen_counter)\n    (inside_room faucet dining_room)\n    (obj_next_to faucet microwave)\n    (obj_next_to faucet toaster)\n    (obj_next_to plate kitchen_counter)\n    (movable food_jam)\n    (inside_room kitchen_counter dining_room)\n    (obj_next_to kitchen_counter coffe_maker)\n    (has_switch microwave)\n    (pourable dish_soap)\n    (obj_ontop plate kitchen_counter)\n    (has_plug toaster)\n    (inside_room microwave dining_room)\n    (has_switch faucet)\n    (obj_next_to coffe_maker faucet)\n    (obj_next_to microwave faucet)\n    (obj_next_to coffe_maker kitchen_counter)\n    (obj_next_to toaster coffe_maker)\n    (has_plug microwave)\n    (cream food_jam)\n    (obj_next_to microwave kitchen_counter)\n    (has_switch coffe_maker)\n    (cream dish_soap)\n    (surfaces plate)\n    (obj_next_to coffe_maker toaster)\n    (obj_next_to kitchen_counter dishwasher)\n    (obj_next_to microwave toaster)\n    (inside_room toaster dining_room)\n    (movable plate)\n    (obj_next_to food_jam kitchen_counter)\n    (obj_next_to kitchen_counter microwave)\n    (inside_room plate dining_room)\n    (obj_next_to kitchen_counter food_jam)\n    (obj_next_to dish_soap kitchen_counter)\n    (obj_next_to kitchen_counter toaster)\n    (grabbable dish_soap)\n    (plugged_out dishwasher)\n    (obj_next_to faucet coffe_maker)\n    (movable dish_soap)\n    (obj_ontop microwave kitchen_counter)\n    (has_switch toaster)\n    (surfaces kitchen_counter)\n    (has_switch dishwasher)\n    (can_open coffe_maker)\n    (obj_ontop faucet kitchen_counter)\n    (obj_next_to faucet kitchen_counter)\n    (can_open food_jam)\n    (movable coffe_maker)\n    (containers dishwasher)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to kitchen_counter plate)\n    (obj_ontop food_jam kitchen_counter)\n    (movable toaster)\n    (obj_ontop toaster kitchen_counter)\n    (recipient coffe_maker)\n    (has_plug coffe_maker)\n    (can_open microwave)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (obj_next_to toaster microwave)\n    (eatable food_jam)\n    (containers coffe_maker)\n    (inside_room food_jam dining_room)\n    (closed dishwasher)\n    (obj_next_to kitchen_counter faucet)\n    (inside_room coffe_maker dining_room)\n    (clean dishwasher)\n    (inside_room dish_soap dining_room)\n    (off dishwasher)\n    (can_open dishwasher)\n    (obj_next_to kitchen_counter dish_soap)\n    (inside character home_office)\n    (obj_inside plate dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "383_1": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "Walk to the  kitchen. Open the dishwasher. Put plates into the dishwasher. Put dish soap into the dishwasher. Close the dishwasher. Turn on the dishwasher.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(plate.1001, dishwasher.1000) and ONTOP(dish_soap.1003, dishwasher.1000) and ONTOP(plate.1002, dishwasher.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dishwasher> (1000)",
          "[FIND] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[FIND] <plate> (1001)",
          "[GRAB] <plate> (1001)",
          "[PUTBACK] <plate> (1001) <dishwasher> (1000)",
          "[FIND] <plate> (2.1002)",
          "[GRAB] <plate> (2.1002)",
          "[PUTBACK] <plate> (2.1002) <dishwasher> (1000)",
          "[FIND] <dish_soap> (1003)",
          "[GRAB] <dish_soap> (1003)",
          "[PUTBACK] <dish_soap> (1003) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dishwasher dish_soap plate food_food dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (inside_room food_food dining_room)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to dishwasher dish_soap)\n    (grabbable dish_soap)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (obj_next_to plate food_food)\n    (obj_ontop food_food plate)\n    (movable dish_soap)\n    (movable food_food)\n    (obj_next_to food_food plate)\n    (cream dish_soap)\n    (surfaces plate)\n    (pourable dish_soap)\n    (grabbable food_food)\n    (obj_next_to plate dishwasher)\n    (closed dishwasher)\n    (eatable food_food)\n    (clean dishwasher)\n    (inside_room dish_soap dining_room)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (movable plate)\n    (obj_next_to dishwasher plate)\n    (inside character home_office)\n    (containers dishwasher)\n    (obj_inside plate dishwasher)\n    (cuttable food_food)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "417_2": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "I will load the dishes into the dishwasher and start it.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1004,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1005,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(drinking_glass.1001, dishwasher.1000) and ONTOP(fork.1004, dishwasher.1000) and ONTOP(plate.1003, dishwasher.1000) and ONTOP(drinking_glass.1002, dishwasher.1000) and ONTOP(dish_soap.1005, dishwasher.1000))",
        "action_trajectory": [
          "[FIND] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[FIND] <drinking_glass> (1001)",
          "[GRAB] <drinking_glass> (1001)",
          "[PUTBACK] <drinking_glass> (1001) <dishwasher> (1000)",
          "[FIND] <drinking_glass> (2.1002)",
          "[GRAB] <drinking_glass> (2.1002)",
          "[PUTBACK] <drinking_glass> (2.1002) <dishwasher> (1000)",
          "[FIND] <plate> (1003)",
          "[GRAB] <plate> (1003)",
          "[PUTBACK] <plate> (1003) <dishwasher> (1000)",
          "[FIND] <fork> (1004)",
          "[GRAB] <fork> (1004)",
          "[PUTBACK] <fork> (1004) <dishwasher> (1000)",
          "[FIND] <dish_soap> (1005)",
          "[GRAB] <dish_soap> (1005)",
          "[PUTBACK] <dish_soap> (1005) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    fork dishwasher dish_soap plate drinking_glass - object\n)\n    (:init\n    (recipient plate)\n    (obj_inside dish_soap dishwasher)\n    (grabbable drinking_glass)\n    (grabbable dish_soap)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (grabbable fork)\n    (movable dish_soap)\n    (movable fork)\n    (pourable drinking_glass)\n    (obj_inside drinking_glass dishwasher)\n    (cream dish_soap)\n    (surfaces plate)\n    (obj_inside fork dishwasher)\n    (pourable dish_soap)\n    (closed dishwasher)\n    (movable drinking_glass)\n    (clean dishwasher)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (recipient drinking_glass)\n    (movable plate)\n    (containers dishwasher)\n    (obj_inside plate dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop drinking_glass dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop fork dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "487_1": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "Collect dishes. Place them in the dishwasher. Load detergent. Turn on dishwasher.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1001,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1001,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1004,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1005,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1001) and ON(dishwasher.1001) and ONTOP(spoon.1004, dishwasher.1001) and ONTOP(plate.1000, dishwasher.1001) and ONTOP(cup.1003, dishwasher.1001) and ONTOP(dish_soap.1005, dishwasher.1001) and ONTOP(fork.1002, dishwasher.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <plate> (1000)",
          "[FIND] <plate> (1000)",
          "[GRAB] <plate> (1000)",
          "[FIND] <dishwasher> (1001)",
          "[OPEN] <dishwasher> (1001)",
          "[PUTBACK] <plate> (1000) <dishwasher> (1001)",
          "[FIND] <fork> (1002)",
          "[GRAB] <fork> (1002)",
          "[PUTBACK] <fork> (1002) <dishwasher> (1001)",
          "[FIND] <cup> (1003)",
          "[GRAB] <cup> (1003)",
          "[PUTBACK] <cup> (1003) <dishwasher> (1001)",
          "[FIND] <spoon> (1004)",
          "[GRAB] <spoon> (1004)",
          "[PUTBACK] <spoon> (1004) <dishwasher> (1001)",
          "[FIND] <dish_soap> (1005)",
          "[GRAB] <dish_soap> (1005)",
          "[PUTBACK] <dish_soap> (1005) <dishwasher> (1001)",
          "[FIND] <dishwasher> (1001)",
          "[CLOSE] <dishwasher> (1001)",
          "[SWITCHON] <dishwasher> (1001)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    fork spoon cup dishwasher bedroom dish_soap plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (recipient cup)\n    (obj_inside dish_soap dishwasher)\n    (movable cup)\n    (inside_room cup dining_room)\n    (grabbable dish_soap)\n    (obj_next_to spoon plate)\n    (movable spoon)\n    (grabbable cup)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (grabbable fork)\n    (movable dish_soap)\n    (obj_next_to plate fork)\n    (movable fork)\n    (inside_room spoon dining_room)\n    (obj_next_to dish_soap plate)\n    (obj_inside spoon dishwasher)\n    (inside_room fork dining_room)\n    (obj_next_to plate dish_soap)\n    (cream dish_soap)\n    (surfaces plate)\n    (obj_inside fork dishwasher)\n    (pourable dish_soap)\n    (grabbable spoon)\n    (obj_next_to plate dishwasher)\n    (closed dishwasher)\n    (obj_next_to cup plate)\n    (clean dishwasher)\n    (inside_room dish_soap dining_room)\n    (can_open dishwasher)\n    (has_switch dishwasher)\n    (off dishwasher)\n    (obj_next_to plate spoon)\n    (obj_next_to plate cup)\n    (movable plate)\n    (inside character bedroom)\n    (obj_next_to dishwasher plate)\n    (containers dishwasher)\n    (obj_next_to fork plate)\n    (obj_inside cup dishwasher)\n    (pourable cup)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop cup dishwasher)\n        (obj_ontop spoon dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop fork dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "650_2": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "Put the dishes on dinner table in the dishwasher and wash them",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1001,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1001,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1001) and ON(dishwasher.1001) and ONTOP(plate.1000, dishwasher.1001) and ONTOP(dish_soap.1003, dishwasher.1001) and ONTOP(pot.1002, dishwasher.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <table> (226)",
          "[FIND] <plate> (1000)",
          "[GRAB] <plate> (1000)",
          "[WALK] <dishwasher> (1001)",
          "[OPEN] <dishwasher> (1001)",
          "[PUTBACK] <plate> (1000) <dishwasher> (1001)",
          "[WALK] <table> (226)",
          "[FIND] <pot> (1002)",
          "[GRAB] <pot> (1002)",
          "[WALK] <dishwasher> (1001)",
          "[PUTBACK] <pot> (1002) <dishwasher> (1001)",
          "[CLOSE] <dishwasher> (1001)",
          "[FIND] <dish_soap> (1003)",
          "[GRAB] <dish_soap> (1003)",
          "[OPEN] <dishwasher> (1001)",
          "[PUTBACK] <dish_soap> (1003) <dishwasher> (1001)",
          "[CLOSE] <dishwasher> (1001)",
          "[SWITCHON] <dishwasher> (1001)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office pot table dishwasher dish_soap plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (can_open pot)\n    (surfaces table)\n    (obj_next_to dishwasher dish_soap)\n    (grabbable dish_soap)\n    (obj_next_to table plate)\n    (recipient pot)\n    (obj_next_to table pot)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (inside_room pot dining_room)\n    (movable dish_soap)\n    (movable table)\n    (cream dish_soap)\n    (surfaces plate)\n    (obj_ontop plate table)\n    (pourable dish_soap)\n    (obj_next_to plate table)\n    (grabbable pot)\n    (obj_inside pot dishwasher)\n    (obj_next_to pot table)\n    (closed dishwasher)\n    (clean dishwasher)\n    (inside_room dish_soap dining_room)\n    (can_open dishwasher)\n    (has_switch dishwasher)\n    (off dishwasher)\n    (inside_room table dining_room)\n    (obj_ontop pot table)\n    (movable plate)\n    (movable pot)\n    (obj_inside table home_office)\n    (inside character home_office)\n    (containers dishwasher)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop plate dishwasher)\n        (obj_ontop pot dishwasher)\n    )\n)\n    )\n    "
      },
      "783_1": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "I go to the kitchen and open the dishwasher. I fill it up with dirty dishes and glasses. Then I put dish soap in the dishwasher, close it and turn it on.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1004,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1006,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1005,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1007,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(plate.1001, dishwasher.1000) and ONTOP(plate.1004, dishwasher.1000) and ONTOP(plate.1003, dishwasher.1000) and ONTOP(cup.1006, dishwasher.1000) and ONTOP(plate.1002, dishwasher.1000) and ONTOP(plate.1005, dishwasher.1000) and ONTOP(dish_soap.1007, dishwasher.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dishwasher> (1000)",
          "[FIND] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[FIND] <plate> (1001)",
          "[GRAB] <plate> (1001)",
          "[PUTBACK] <plate> (1001) <dishwasher> (1000)",
          "[FIND] <plate> (2.1002)",
          "[GRAB] <plate> (2.1002)",
          "[PUTBACK] <plate> (2.1002) <dishwasher> (1000)",
          "[FIND] <plate> (3.1003)",
          "[GRAB] <plate> (3.1003)",
          "[PUTBACK] <plate> (3.1003) <dishwasher> (1000)",
          "[FIND] <plate> (4.1004)",
          "[GRAB] <plate> (4.1004)",
          "[PUTBACK] <plate> (4.1004) <dishwasher> (1000)",
          "[FIND] <plate> (5.1005)",
          "[GRAB] <plate> (5.1005)",
          "[PUTBACK] <plate> (5.1005) <dishwasher> (1000)",
          "[FIND] <cup> (1006)",
          "[GRAB] <cup> (1006)",
          "[PUTBACK] <cup> (1006) <dishwasher> (1000)",
          "[FIND] <dish_soap> (1007)",
          "[GRAB] <dish_soap> (1007)",
          "[PUTBACK] <dish_soap> (1007) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office cup dishwasher dish_soap plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (recipient cup)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to dishwasher dish_soap)\n    (movable cup)\n    (inside_room cup dining_room)\n    (grabbable dish_soap)\n    (grabbable cup)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (movable dish_soap)\n    (cream dish_soap)\n    (surfaces plate)\n    (pourable dish_soap)\n    (obj_next_to plate dishwasher)\n    (closed dishwasher)\n    (clean dishwasher)\n    (inside_room dish_soap dining_room)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (obj_next_to dishwasher cup)\n    (obj_next_to cup dishwasher)\n    (movable plate)\n    (obj_next_to dishwasher plate)\n    (inside character home_office)\n    (containers dishwasher)\n    (obj_inside cup dishwasher)\n    (obj_inside plate dishwasher)\n    (pourable cup)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop cup dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "815_2": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "I go the in kitchen then grab the plate on the table. I put the plate and dish soap in the dishwasher. Finally, I turn on the dishwasher.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1001,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1001,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 1001
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1001) and ON(dishwasher.1001) and ONTOP(plate.1000, dishwasher.1001) and ONTOP(dish_soap.1002, dishwasher.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <table> (226)",
          "[FIND] <plate> (1000)",
          "[GRAB] <plate> (1000)",
          "[WALK] <dishwasher> (1001)",
          "[OPEN] <dishwasher> (1001)",
          "[PUTBACK] <plate> (1000) <dishwasher> (1001)",
          "[FIND] <dish_soap> (1002)",
          "[GRAB] <dish_soap> (1002)",
          "[PUTBACK] <dish_soap> (1002) <dishwasher> (1001)",
          "[CLOSE] <dishwasher> (1001)",
          "[SWITCHON] <dishwasher> (1001)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    table dishwasher bedroom dish_soap plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (surfaces table)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to dishwasher dish_soap)\n    (grabbable dish_soap)\n    (obj_next_to table plate)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (movable dish_soap)\n    (movable table)\n    (cream dish_soap)\n    (surfaces plate)\n    (obj_ontop plate table)\n    (pourable dish_soap)\n    (obj_next_to plate table)\n    (closed dishwasher)\n    (inside_room table bedroom)\n    (clean dishwasher)\n    (inside_room dish_soap dining_room)\n    (can_open dishwasher)\n    (has_switch dishwasher)\n    (off dishwasher)\n    (inside_room table dining_room)\n    (movable plate)\n    (inside character bedroom)\n    (containers dishwasher)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "826_1": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "Go to kitchen, open dishwasher, load dishwasher and put in dish soap. Close dishwasher and start.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1004,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1013,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1009,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1006,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1012,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1014,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1008,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1010,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1015,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1016,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1005,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1007,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1011,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(fork.1001, dishwasher.1000) and ONTOP(plate.1004, dishwasher.1000) and ONTOP(plate.1003, dishwasher.1000) and ONTOP(spoon.1013, dishwasher.1000) and ONTOP(cup.1009, dishwasher.1000) and ONTOP(plate.1006, dishwasher.1000) and ONTOP(knife.1012, dishwasher.1000) and ONTOP(spoon.1014, dishwasher.1000) and ONTOP(fork.1002, dishwasher.1000) and ONTOP(cup.1008, dishwasher.1000) and ONTOP(cup.1010, dishwasher.1000) and ONTOP(spoon.1015, dishwasher.1000) and ONTOP(dish_soap.1016, dishwasher.1000) and ONTOP(plate.1005, dishwasher.1000) and ONTOP(cup.1007, dishwasher.1000) and ONTOP(knife.1011, dishwasher.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dishwasher> (1000)",
          "[FIND] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[FIND] <fork> (3.1001)",
          "[FIND] <fork> (1002)",
          "[GRAB] <fork> (1002)",
          "[GRAB] <fork> (3.1001)",
          "[PUTBACK] <fork> (1002) <dishwasher> (1000)",
          "[PUTBACK] <fork> (3.1001) <dishwasher> (1000)",
          "[FIND] <plate> (5.1003)",
          "[FIND] <plate> (1004)",
          "[GRAB] <plate> (1004)",
          "[PUTBACK] <plate> (1004) <dishwasher> (1000)",
          "[FIND] <plate> (2.1005)",
          "[GRAB] <plate> (2.1005)",
          "[GRAB] <plate> (5.1003)",
          "[PUTBACK] <plate> (2.1005) <dishwasher> (1000)",
          "[FIND] <plate> (3.1006)",
          "[GRAB] <plate> (3.1006)",
          "[PUTBACK] <plate> (3.1006) <dishwasher> (1000)",
          "[PUTBACK] <plate> (5.1003) <dishwasher> (1000)",
          "[FIND] <cup> (5.1007)",
          "[FIND] <cup> (1008)",
          "[GRAB] <cup> (1008)",
          "[PUTBACK] <cup> (1008) <dishwasher> (1000)",
          "[FIND] <cup> (2.1009)",
          "[GRAB] <cup> (2.1009)",
          "[GRAB] <cup> (5.1007)",
          "[PUTBACK] <cup> (2.1009) <dishwasher> (1000)",
          "[FIND] <cup> (3.1010)",
          "[GRAB] <cup> (3.1010)",
          "[PUTBACK] <cup> (3.1010) <dishwasher> (1000)",
          "[PUTBACK] <cup> (5.1007) <dishwasher> (1000)",
          "[FIND] <knife> (3.1011)",
          "[FIND] <knife> (1012)",
          "[GRAB] <knife> (1012)",
          "[GRAB] <knife> (3.1011)",
          "[PUTBACK] <knife> (1012) <dishwasher> (1000)",
          "[PUTBACK] <knife> (3.1011) <dishwasher> (1000)",
          "[FIND] <spoon> (4.1013)",
          "[FIND] <spoon> (1014)",
          "[GRAB] <spoon> (1014)",
          "[PUTBACK] <spoon> (1014) <dishwasher> (1000)",
          "[GRAB] <spoon> (4.1013)",
          "[FIND] <spoon> (2.1015)",
          "[GRAB] <spoon> (2.1015)",
          "[PUTBACK] <spoon> (2.1015) <dishwasher> (1000)",
          "[PUTBACK] <spoon> (4.1013) <dishwasher> (1000)",
          "[FIND] <dish_soap> (1016)",
          "[GRAB] <dish_soap> (1016)",
          "[PUTBACK] <dish_soap> (1016) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom fork knife spoon cup dishwasher dish_soap plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (obj_next_to dishwasher fork)\n    (recipient cup)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to dishwasher dish_soap)\n    (movable cup)\n    (obj_inside knife dishwasher)\n    (inside_room cup dining_room)\n    (grabbable dish_soap)\n    (obj_next_to dishwasher spoon)\n    (movable spoon)\n    (grabbable cup)\n    (plugged_out dishwasher)\n    (inside_room knife dining_room)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (grabbable fork)\n    (movable dish_soap)\n    (obj_next_to dishwasher knife)\n    (movable fork)\n    (inside_room spoon dining_room)\n    (obj_inside spoon dishwasher)\n    (inside_room fork dining_room)\n    (cream dish_soap)\n    (obj_next_to fork dishwasher)\n    (surfaces plate)\n    (obj_inside fork dishwasher)\n    (pourable dish_soap)\n    (obj_next_to knife dishwasher)\n    (grabbable spoon)\n    (obj_next_to plate dishwasher)\n    (closed dishwasher)\n    (clean dishwasher)\n    (obj_next_to spoon dishwasher)\n    (movable knife)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (inside_room dish_soap dining_room)\n    (grabbable knife)\n    (obj_next_to dishwasher cup)\n    (obj_next_to cup dishwasher)\n    (movable plate)\n    (inside character bathroom)\n    (obj_next_to dishwasher plate)\n    (containers dishwasher)\n    (obj_inside cup dishwasher)\n    (obj_inside plate dishwasher)\n    (pourable cup)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop cup dishwasher)\n        (obj_ontop spoon dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop knife dishwasher)\n        (obj_ontop fork dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "856_1": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "Walk to the kitchen. Open the dishwasher. Grab plate and put it in the dishwasher. Grab dish soap and put it in the dishwasher. Switch on the dishwasher.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(plate.1001, dishwasher.1000) and ONTOP(dish_soap.1002, dishwasher.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dishwasher> (1000)",
          "[FIND] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[FIND] <plate> (1001)",
          "[GRAB] <plate> (1001)",
          "[PUTBACK] <plate> (1001) <dishwasher> (1000)",
          "[FIND] <dish_soap> (1002)",
          "[GRAB] <dish_soap> (1002)",
          "[PUTBACK] <dish_soap> (1002) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom dishwasher dish_soap plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (obj_inside dish_soap dishwasher)\n    (obj_next_to dishwasher dish_soap)\n    (grabbable dish_soap)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (inside_room dishwasher dining_room)\n    (movable dish_soap)\n    (cream dish_soap)\n    (surfaces plate)\n    (pourable dish_soap)\n    (obj_next_to plate dishwasher)\n    (closed dishwasher)\n    (inside_room dish_soap dining_room)\n    (clean dishwasher)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (movable plate)\n    (inside character bathroom)\n    (obj_next_to dishwasher plate)\n    (containers dishwasher)\n    (obj_inside plate dishwasher)\n    (obj_next_to dish_soap dishwasher)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "911_1": {
        "task_name": "Wash dishes with dishwasher",
        "natural_language_description": "I open the dishwasher, I inser all dishes I find in the kitchen, I find a dishwasher tab and insert it into the dishwasher, then I close the dishwasher and start the process",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dishwasher",
              "state": "ON"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 1000
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(CLOSED(dishwasher.1000) and ON(dishwasher.1000) and ONTOP(cup.1001, dishwasher.1000) and ONTOP(dish_soap.1003, dishwasher.1000) and ONTOP(plate.1002, dishwasher.1000))",
        "action_trajectory": [
          "[FIND] <dishwasher> (1000)",
          "[OPEN] <dishwasher> (1000)",
          "[FIND] <cup> (1001)",
          "[GRAB] <cup> (1001)",
          "[PUTBACK] <cup> (1001) <dishwasher> (1000)",
          "[FIND] <plate> (1002)",
          "[GRAB] <plate> (1002)",
          "[PUTBACK] <plate> (1002) <dishwasher> (1000)",
          "[FIND] <dish_soap> (1003)",
          "[GRAB] <dish_soap> (1003)",
          "[PUTBACK] <dish_soap> (1003) <dishwasher> (1000)",
          "[CLOSE] <dishwasher> (1000)",
          "[SWITCHON] <dishwasher> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_with_dishwasher)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    plate dish_soap cup dishwasher - object\n)\n    (:init\n    (recipient plate)\n    (recipient cup)\n    (obj_inside dish_soap dishwasher)\n    (movable cup)\n    (grabbable dish_soap)\n    (grabbable cup)\n    (plugged_out dishwasher)\n    (grabbable plate)\n    (movable dish_soap)\n    (cream dish_soap)\n    (surfaces plate)\n    (pourable dish_soap)\n    (closed dishwasher)\n    (clean dishwasher)\n    (can_open dishwasher)\n    (off dishwasher)\n    (has_switch dishwasher)\n    (movable plate)\n    (containers dishwasher)\n    (obj_inside cup dishwasher)\n    (obj_inside plate dishwasher)\n    (pourable cup)\n)\n    (:goal\n    (and\n        (closed dishwasher)\n        (on dishwasher)\n        (obj_ontop dish_soap dishwasher)\n        (obj_ontop cup dishwasher)\n        (obj_ontop plate dishwasher)\n    )\n)\n    )\n    "
      },
      "1027_2": {
        "task_name": "Go to sleep",
        "natural_language_description": "Walk to bedroom, walk to bed, lay down on bed, close eyes, go to sleep.",
        "vh_goal": {
          "actions": [
            "SLEEP"
          ],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 105
            }
          ]
        },
        "tl_goal": "(SLEEP() then (LYING(character.65) and ONTOP(character.65, bed.105)))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <bed> (105)",
          "[LIE] <bed> (105)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Go_to_sleep)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bed bedroom dining_room - object\n)\n    (:init\n    (lieable bed)\n    (inside_room bed bedroom)\n    (sittable bed)\n    (inside character dining_room)\n    (surfaces bed)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character bed)\n    )\n)\n    )\n    "
      },
      "181_1": {
        "task_name": "Go to sleep",
        "natural_language_description": "go to bedroom, lie on Bed, sleep",
        "vh_goal": {
          "actions": [
            "SLEEP"
          ],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 105
            }
          ]
        },
        "tl_goal": "(SLEEP() then (LYING(character.65) and ONTOP(character.65, bed.105)))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <bed> (105)",
          "[FIND] <bed> (105)",
          "[LIE] <bed> (105)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Go_to_sleep)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bed bathroom bedroom - object\n)\n    (:init\n    (lieable bed)\n    (inside_room bed bedroom)\n    (inside character bathroom)\n    (sittable bed)\n    (surfaces bed)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character bed)\n    )\n)\n    )\n    "
      },
      "244_2": {
        "task_name": "Go to sleep",
        "natural_language_description": "I walk to my room, walk to my bed, lie in my bed, and go to sleep.",
        "vh_goal": {
          "actions": [
            "SLEEP"
          ],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 105
            }
          ]
        },
        "tl_goal": "(SLEEP() then (LYING(character.65) and ONTOP(character.65, bed.105)))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <bed> (105)",
          "[LIE] <bed> (105)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Go_to_sleep)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bed bedroom dining_room - object\n)\n    (:init\n    (lieable bed)\n    (inside_room bed bedroom)\n    (sittable bed)\n    (inside character dining_room)\n    (surfaces bed)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character bed)\n    )\n)\n    )\n    "
      },
      "269_2": {
        "task_name": "Go to sleep",
        "natural_language_description": "Walk to the bedroom.  Find the bed.  Lie down on the bed.  Close your eyes.  Wait.",
        "vh_goal": {
          "actions": [
            "SLEEP"
          ],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 105
            }
          ]
        },
        "tl_goal": "(SLEEP() then (LYING(character.65) and ONTOP(character.65, bed.105)))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <bed> (105)",
          "[FIND] <bed> (105)",
          "[LIE] <bed> (105)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Go_to_sleep)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bed bathroom bedroom - object\n)\n    (:init\n    (lieable bed)\n    (inside_room bed bedroom)\n    (inside character bathroom)\n    (sittable bed)\n    (surfaces bed)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character bed)\n    )\n)\n    )\n    "
      },
      "509_2": {
        "task_name": "Go to sleep",
        "natural_language_description": "I walk into my bedroom. I change out of my clothing into pajamas. I turn off the light. I lie down in my bed and pull my sheets over me. I go to sleep.",
        "vh_goal": {
          "actions": [
            "SLEEP"
          ],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 105
            }
          ]
        },
        "tl_goal": "(SLEEP() then (LYING(character.65) and ONTOP(character.65, bed.105)))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <clothes_pants> (1000)",
          "[FIND] <clothes_pants> (1000)",
          "[FIND] <clothes_pants> (1000)",
          "[FIND] <clothes_pants> (1000)",
          "[PUTOFF] <clothes_pants> (1000)",
          "[FIND] <clothes_shirt> (1001)",
          "[FIND] <clothes_shirt> (1001)",
          "[FIND] <clothes_shirt> (1001)",
          "[PUTOFF] <clothes_shirt> (1001)",
          "[FIND] <clothes_shirt> (2.1002)",
          "[GRAB] <clothes_shirt> (2.1002)",
          "[PUTON] <clothes_shirt> (2.1002)",
          "[FIND] <clothes_pants> (2.1003)",
          "[GRAB] <clothes_pants> (2.1003)",
          "[PUTON] <clothes_pants> (2.1003)",
          "[FIND] <light> (169)",
          "[SWITCHOFF] <light> (169)",
          "[FIND] <bed> (105)",
          "[LIE] <bed> (105)",
          "[FIND] <sheets> (1004)",
          "[PULL] <sheets> (1004)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Go_to_sleep)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    clothes_pants light clothes_shirt bedroom bed dining_room sheets - object\n)\n    (:init\n    (clothes clothes_pants)\n    (obj_next_to sheets bed)\n    (movable clothes_pants)\n    (has_switch light)\n    (has_plug light)\n    (inside_room light bedroom)\n    (obj_next_to clothes_pants bed)\n    (obj_next_to clothes_pants sheets)\n    (hangable clothes_shirt)\n    (obj_next_to clothes_pants clothes_pants)\n    (sittable bed)\n    (on_char clothes_pants character)\n    (plugged_in light)\n    (obj_next_to sheets clothes_pants)\n    (lieable bed)\n    (obj_next_to light light)\n    (on_char clothes_shirt character)\n    (obj_next_to bed clothes_pants)\n    (obj_next_to clothes_pants clothes_shirt)\n    (surfaces bed)\n    (obj_next_to clothes_pants light)\n    (inside_room clothes_pants bedroom)\n    (obj_next_to bed sheets)\n    (inside_room light dining_room)\n    (clean light)\n    (on light)\n    (obj_next_to clothes_shirt clothes_pants)\n    (inside_room bed bedroom)\n    (grabbable clothes_pants)\n    (grabbable clothes_shirt)\n    (cover_object sheets)\n    (inside character dining_room)\n    (hangable clothes_pants)\n    (inside_room sheets bedroom)\n    (grabbable sheets)\n    (obj_next_to light clothes_pants)\n    (inside_room clothes_shirt bedroom)\n    (clothes clothes_shirt)\n    (movable sheets)\n    (movable clothes_shirt)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character bed)\n    )\n)\n    )\n    "
      },
      "875_1": {
        "task_name": "Go to sleep",
        "natural_language_description": "walk to bedroom, look at the pillow, put pillow into bed, lie down in bed, sleep well",
        "vh_goal": {
          "actions": [
            "SLEEP"
          ],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 105
            }
          ]
        },
        "tl_goal": "(SLEEP() then (LYING(character.65) and ONTOP(character.65, bed.105)))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <pillow> (182)",
          "[FIND] <pillow> (182)",
          "[GRAB] <pillow> (182)",
          "[TURNTO] <pillow> (182)",
          "[LOOKAT] <pillow> (182)",
          "[FIND] <bed> (105)",
          "[PUTBACK] <pillow> (182) <bed> (105)",
          "[FIND] <bed> (105)",
          "[LIE] <bed> (105)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Go_to_sleep)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bed nightstand mat dining_room pillow window bedroom drawing tablelamp wall curtain floor - object\n)\n    (:init\n    (obj_next_to mat wall)\n    (obj_next_to floor pillow)\n    (facing wall drawing)\n    (obj_next_to mat curtain)\n    (obj_next_to pillow floor)\n    (facing window drawing)\n    (inside_room nightstand bedroom)\n    (obj_next_to curtain mat)\n    (obj_next_to window floor)\n    (obj_next_to floor mat)\n    (obj_next_to window nightstand)\n    (obj_next_to bed window)\n    (surfaces mat)\n    (obj_next_to floor bed)\n    (has_switch tablelamp)\n    (obj_next_to nightstand curtain)\n    (obj_next_to bed nightstand)\n    (obj_next_to curtain pillow)\n    (obj_next_to window bed)\n    (obj_ontop nightstand mat)\n    (facing drawing drawing)\n    (obj_ontop pillow floor)\n    (obj_next_to pillow drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to mat tablelamp)\n    (cuttable drawing)\n    (obj_next_to window wall)\n    (obj_next_to tablelamp mat)\n    (obj_next_to mat drawing)\n    (inside_room mat bedroom)\n    (obj_next_to nightstand tablelamp)\n    (obj_next_to bed mat)\n    (obj_next_to pillow pillow)\n    (obj_next_to wall mat)\n    (inside_room floor dining_room)\n    (obj_next_to tablelamp window)\n    (obj_ontop tablelamp nightstand)\n    (obj_next_to curtain tablelamp)\n    (obj_next_to curtain wall)\n    (obj_next_to nightstand pillow)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to curtain curtain)\n    (obj_inside curtain curtain)\n    (inside_room wall dining_room)\n    (inside_room pillow bedroom)\n    (sittable mat)\n    (lookable drawing)\n    (obj_next_to mat window)\n    (obj_next_to bed wall)\n    (obj_ontop drawing wall)\n    (grabbable mat)\n    (surfaces nightstand)\n    (obj_next_to wall curtain)\n    (obj_next_to wall pillow)\n    (obj_next_to drawing pillow)\n    (obj_next_to pillow nightstand)\n    (obj_ontop nightstand floor)\n    (obj_next_to floor curtain)\n    (obj_next_to mat floor)\n    (cover_object curtain)\n    (obj_next_to drawing wall)\n    (obj_next_to mat mat)\n    (obj_next_to bed floor)\n    (movable pillow)\n    (inside_room window bedroom)\n    (obj_next_to curtain window)\n    (obj_next_to wall window)\n    (inside_room wall bedroom)\n    (obj_next_to mat nightstand)\n    (obj_next_to drawing floor)\n    (movable mat)\n    (obj_next_to tablelamp curtain)\n    (obj_next_to mat pillow)\n    (obj_next_to bed tablelamp)\n    (obj_next_to tablelamp floor)\n    (movable curtain)\n    (surfaces bed)\n    (lieable mat)\n    (obj_next_to floor nightstand)\n    (containers nightstand)\n    (obj_next_to wall tablelamp)\n    (inside_room floor bedroom)\n    (obj_next_to pillow tablelamp)\n    (obj_next_to floor tablelamp)\n    (obj_next_to nightstand mat)\n    (obj_next_to nightstand floor)\n    (obj_next_to window tablelamp)\n    (obj_next_to floor floor)\n    (facing tablelamp drawing)\n    (facing mat drawing)\n    (obj_next_to pillow curtain)\n    (obj_next_to tablelamp pillow)\n    (obj_next_to tablelamp wall)\n    (obj_next_to wall drawing)\n    (obj_next_to drawing mat)\n    (obj_next_to wall floor)\n    (obj_next_to bed curtain)\n    (inside_room drawing bedroom)\n    (obj_next_to pillow window)\n    (movable drawing)\n    (obj_next_to wall bed)\n    (obj_next_to window pillow)\n    (obj_next_to nightstand bed)\n    (has_paper drawing)\n    (obj_next_to curtain floor)\n    (obj_next_to floor wall)\n    (sittable bed)\n    (obj_ontop bed mat)\n    (facing floor drawing)\n    (obj_next_to wall wall)\n    (inside_room curtain bedroom)\n    (lieable bed)\n    (obj_next_to tablelamp nightstand)\n    (obj_next_to curtain nightstand)\n    (obj_next_to pillow mat)\n    (inside_room mat dining_room)\n    (obj_next_to wall nightstand)\n    (obj_next_to curtain bed)\n    (grabbable drawing)\n    (obj_next_to window mat)\n    (facing pillow drawing)\n    (obj_next_to window curtain)\n    (obj_next_to floor window)\n    (inside_room bed bedroom)\n    (obj_ontop bed floor)\n    (inside_room tablelamp bedroom)\n    (inside character dining_room)\n    (facing nightstand drawing)\n    (obj_next_to nightstand wall)\n    (obj_next_to tablelamp bed)\n    (grabbable pillow)\n    (facing curtain drawing)\n    (obj_next_to mat bed)\n    (obj_next_to nightstand window)\n    (inside_room drawing dining_room)\n    (facing bed drawing)\n    (can_open curtain)\n    (can_open nightstand)\n    (obj_next_to pillow wall)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character bed)\n    )\n)\n    )\n    "
      },
      "102_1": {
        "task_name": "Wash hands",
        "natural_language_description": "I go to the bathroom, walk to the sink, turn on the faucet and then wash my hands under the water.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <faucet> (43)",
          "[TURNTO] <faucet> (43)",
          "[FIND] <hands_both> (2.1000)",
          "[WASH] <hands_both> (2.1000)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet home_office hands_both bathroom sink bathroom_counter - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (has_switch faucet)\n    (body_part hands_both)\n    (inside character home_office)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "154_2": {
        "task_name": "Wash hands",
        "natural_language_description": "I go to the sink, turn on the water,  put soap on my hands, rub them together, then rinse them off and turn off the water. I then towel off my hands.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <faucet> (43)",
          "[SWITCHON] <faucet> (43)",
          "[FIND] <soap> (1000)",
          "[GRAB] <soap> (1000)",
          "[FIND] <hands_both> (2.1001)",
          "[WASH] <hands_both> (2.1001)",
          "[RINSE] <hands_both> (2.1001)",
          "[SWITCHOFF] <faucet> (43)",
          "[FIND] <towel> (1002)",
          "[GRAB] <towel> (1002)",
          "[FIND] <hands_both> (1003)",
          "[WIPE] <hands_both> (1003)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dining_room hands_both bathroom towel sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (has_switch faucet)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n    (cover_object towel)\n    (grabbable towel)\n    (movable towel)\n    (body_part hands_both)\n    (inside character dining_room)\n    (next_to soap sink)\n    (next_to sink towel)\n    (next_to towel sink)\n    (next_to sink soap)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "176_1": {
        "task_name": "Wash hands",
        "natural_language_description": "Apply soap in hand over sink.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[FIND] <soap> (1000)",
          "[GRAB] <soap> (1000)",
          "[FIND] <sink> (42)",
          "[TURNTO] <sink> (42)",
          "[FIND] <hands_both> (1001)",
          "[WASH] <hands_both> (1001)",
          "[RINSE] <hands_both> (1001)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    hands_both bathroom_counter sink soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "214_1": {
        "task_name": "Wash hands",
        "natural_language_description": "walk to bathroom, find sink, turn on faucet, put soap in hands, wash and rinse hands,",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <sink> (42)",
          "[FIND] <soap> (1000)",
          "[WASH] <soap> (1000)",
          "[RINSE] <soap> (1000)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dining_room bathroom sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "258_2": {
        "task_name": "Wash hands",
        "natural_language_description": "walk to kitchen, turn on water, find soap, apply to hand, lather, rinse, dry hands",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <sink> (231)",
          "[FIND] <sink> (231)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <soap> (1000)",
          "[GRAB] <soap> (1000)",
          "[SCRUB] <soap> (1000)",
          "[PUTOBJBACK] <soap> (1000)",
          "[FIND] <water> (1001)",
          "[RINSE] <water> (1001)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dining_room bedroom water sink kitchen_counter soap - object\n)\n    (:init\n    (clean faucet)\n    (off faucet)\n    (surfaces kitchen_counter)\n    (containers sink)\n    (recipient sink)\n    (has_switch faucet)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (drinkable water)\n    (pourable water)\n    (next_to soap sink)\n    (inside character bedroom)\n    (next_to sink soap)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "499_1": {
        "task_name": "Wash hands",
        "natural_language_description": "I walk into the bathroom. I turn on the water. I put soap on my hands. I rinse my hands. I turn off the water. I dry my hands.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <water> (1000)",
          "[TURNTO] <water> (1000)",
          "[FIND] <soap> (1001)",
          "[GRAB] <soap> (1001)",
          "[FIND] <hands_both> (1002)",
          "[SCRUB] <hands_both> (1002)",
          "[RINSE] <hands_both> (1002)",
          "[TURNTO] <water> (1000)",
          "[FIND] <paper_towel> (1003)",
          "[GRAB] <paper_towel> (1003)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office hands_both paper_towel water bathroom sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (drinkable water)\n    (pourable water)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n    (cover_object paper_towel)\n    (cuttable paper_towel)\n    (grabbable paper_towel)\n    (hangable paper_towel)\n    (has_paper paper_towel)\n    (movable paper_towel)\n    (next_to sink soap)\n    (next_to paper_towel sink)\n    (next_to soap sink)\n    (inside character home_office)\n    (next_to sink paper_towel)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "517_1": {
        "task_name": "Wash hands",
        "natural_language_description": "Go to the bathroom. turn on the water in the sink. apply soap to hands. rub hands together. rinse hands with water. turn off the water.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <sink> (42)",
          "[FIND] <soap> (1000)",
          "[GRAB] <soap> (1000)",
          "[FIND] <hands_both> (1001)",
          "[SCRUB] <hands_both> (1001)",
          "[RINSE] <hands_both> (1001)",
          "[WIPE] <hands_both> (1001)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office hands_both bathroom sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n    (inside character home_office)\n    (ontop soap sink)\n    (next_to sink soap)\n    (next_to soap sink)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "549_2": {
        "task_name": "Wash hands",
        "natural_language_description": "Go to the sink. Turn on the water, wash hands with soap. turn off the sink.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[FIND] <sink> (42)",
          "[FIND] <hands_both> (1000)",
          "[WASH] <hands_both> (1000)",
          "[FIND] <soap> (1001)",
          "[GRAB] <soap> (1001)",
          "[SCRUB] <hands_both> (1000)",
          "[PUTOBJBACK] <soap> (1001)",
          "[RINSE] <hands_both> (1000)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    hands_both soap - object\n)\n    (:init\n    (body_part hands_both)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "562_1": {
        "task_name": "Wash hands",
        "natural_language_description": "I turn on faucet. I hold out my hands. I get my hands wet.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 1000,
              "relation_type": "INSIDE",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "INSIDE(water.1000, hands_both.1001)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <faucet> (43)",
          "[FIND] <faucet> (43)",
          "[TURNTO] <faucet> (43)",
          "[FIND] <water> (1000)",
          "[GRAB] <water> (1000)",
          "[FIND] <hands_both> (1001)",
          "[POUR] <water> (1000) <hands_both> (1001)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet home_office hands_both water bathroom - object\n)\n    (:init\n    (has_switch faucet)\n    (drinkable water)\n    (pourable water)\n    (body_part hands_both)\n    (inside character home_office)\n    (next_to faucet water)\n    (next_to water faucet)\n)\n    (:goal\n    (and\n        (inside water hands_both)\n    )\n)\n    )\n    "
      },
      "580_1": {
        "task_name": "Wash hands",
        "natural_language_description": "I go to the bathroom and locate the sink. I turn the faucet so that water is running, and rinse my hands briefly. Then I grab the soap and squeeze some onto my hands. I spend a few minutes rubbing my hands together, then I rinse them again. Finally, I turn the faucet off and wipe my hands on a towel.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <sink> (42)",
          "[TURNTO] <sink> (42)",
          "[FIND] <faucet> (43)",
          "[SWITCHON] <faucet> (43)",
          "[FIND] <hands_both> (1000)",
          "[RINSE] <hands_both> (1000)",
          "[FIND] <soap> (1001)",
          "[GRAB] <soap> (1001)",
          "[SQUEEZE] <soap> (1001)",
          "[WASH] <hands_both> (1000)",
          "[RINSE] <hands_both> (1000)",
          "[SWITCHOFF] <faucet> (43)",
          "[FIND] <towel> (1002)",
          "[GRAB] <towel> (1002)",
          "[WIPE] <hands_both> (1000)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet hands_both bedroom bathroom towel sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (has_switch faucet)\n    (body_part hands_both)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (cover_object towel)\n    (grabbable towel)\n    (movable towel)\n    (next_to sink soap)\n    (next_to sink towel)\n    (next_to soap sink)\n    (next_to towel sink)\n    (inside character bedroom)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "657_1": {
        "task_name": "Wash hands",
        "natural_language_description": "Go to bathroom, turn on faucet, wet hands, apply soap, rub hands, rinse hands, turn off faucet, dry hands",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <faucet> (43)",
          "[FIND] <faucet> (43)",
          "[SWITCHON] <faucet> (43)",
          "[FIND] <hands_both> (1000)",
          "[RINSE] <hands_both> (1000)",
          "[FIND] <soap> (1001)",
          "[GRAB] <soap> (1001)",
          "[SCRUB] <hands_both> (1000)",
          "[RINSE] <hands_both> (1000)",
          "[SWITCHOFF] <faucet> (43)",
          "[FIND] <towel> (1002)",
          "[GRAB] <towel> (1002)",
          "[WIPE] <hands_both> (1000)",
          "[PUTOBJBACK] <towel> (1002)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dining_room hands_both bathroom towel soap - object\n)\n    (:init\n    (has_switch faucet)\n    (body_part hands_both)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (cover_object towel)\n    (grabbable towel)\n    (movable towel)\n    (next_to towel faucet)\n    (inside character dining_room)\n    (next_to faucet soap)\n    (next_to faucet towel)\n    (next_to soap faucet)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "660_1": {
        "task_name": "Wash hands",
        "natural_language_description": "Go to the bathroom and to the sink, turn the faucet on, push the bottle of soap onto your hands and scrub them. Then rinse your hands out and turn the faucet off.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <sink> (42)",
          "[FIND] <faucet> (43)",
          "[SWITCHON] <faucet> (43)",
          "[FIND] <soap> (1000)",
          "[PUSH] <soap> (1000)",
          "[FIND] <hands_both> (1001)",
          "[SCRUB] <hands_both> (1001)",
          "[RINSE] <hands_both> (1001)",
          "[SWITCHOFF] <faucet> (43)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet hands_both bedroom bathroom sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (has_switch faucet)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n    (inside character bedroom)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "672_1": {
        "task_name": "Wash hands",
        "natural_language_description": "I go to the bathroom, open the faucet rinse the hands, wash the hands with soap and rinse again, then wipe with a towel.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <faucet> (43)",
          "[FIND] <faucet> (43)",
          "[TURNTO] <faucet> (43)",
          "[FIND] <hands_both> (1000)",
          "[RINSE] <hands_both> (1000)",
          "[FIND] <soap> (1001)",
          "[GRAB] <soap> (1001)",
          "[WASH] <hands_both> (1000)",
          "[RINSE] <hands_both> (1000)",
          "[TURNTO] <faucet> (43)",
          "[FIND] <towel> (1002)",
          "[GRAB] <towel> (1002)",
          "[WIPE] <hands_both> (1000)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dining_room hands_both bathroom towel soap - object\n)\n    (:init\n    (has_switch faucet)\n    (body_part hands_both)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (cover_object towel)\n    (grabbable towel)\n    (movable towel)\n    (next_to towel faucet)\n    (inside character dining_room)\n    (next_to faucet soap)\n    (next_to faucet towel)\n    (next_to soap faucet)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "710_1": {
        "task_name": "Wash hands",
        "natural_language_description": "Walk to bathroom. Walk to sink and turn on the water. Grab the soap and wash the hands.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <water> (1000)",
          "[TURNTO] <water> (1000)",
          "[FIND] <soap> (1001)",
          "[GRAB] <soap> (1001)",
          "[FIND] <hands_both> (1002)",
          "[WASH] <hands_both> (1002)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office hands_both water bathroom sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (drinkable water)\n    (pourable water)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n    (inside character home_office)\n    (next_to sink soap)\n    (next_to soap sink)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "741_1": {
        "task_name": "Wash hands",
        "natural_language_description": "I walk in to the bathroom. I find the soap. I find the faucet. I turn on the faucet. I wash my hands. I put the soap back. I rinse my hands. I turn the faucet off.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <faucet> (43)",
          "[FIND] <faucet> (43)",
          "[SWITCHON] <faucet> (43)",
          "[FIND] <soap> (1000)",
          "[GRAB] <soap> (1000)",
          "[FIND] <hands_both> (1001)",
          "[WASH] <hands_both> (1001)",
          "[PUTOBJBACK] <soap> (1000)",
          "[RINSE] <hands_both> (1001)",
          "[SWITCHOFF] <faucet> (43)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dining_room hands_both bathroom soap - object\n)\n    (:init\n    (has_switch faucet)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n    (next_to faucet soap)\n    (inside character dining_room)\n    (next_to soap faucet)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "750_2": {
        "task_name": "Wash hands",
        "natural_language_description": "Go into the bathroom and go over to the sink. Grab soap and turn on the water. Wet your hands and rub them together so that the soap lathers. Rub the soap all over your hands thoroughly. Rinse off the soap with water and turn off the sink. Dry your hands with a towel.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 1001,
              "relation_type": "INSIDE",
              "to_id": 1002
            }
          ]
        },
        "tl_goal": "INSIDE(water.1001, hands_both.1002)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <soap> (1000)",
          "[GRAB] <soap> (1000)",
          "[FIND] <water> (1001)",
          "[GRAB] <water> (1001)",
          "[FIND] <hands_both> (1002)",
          "[POUR] <water> (1001) <hands_both> (1002)",
          "[FIND] <hands_both> (1002)",
          "[SCRUB] <hands_both> (1002)",
          "[PUTOBJBACK] <soap> (1000)",
          "[RINSE] <hands_both> (1002)",
          "[FIND] <towel> (1003)",
          "[GRAB] <towel> (1003)",
          "[WIPE] <hands_both> (1002)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    hands_both bedroom water bathroom towel sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (drinkable water)\n    (pourable water)\n    (body_part hands_both)\n    (cover_object towel)\n    (grabbable towel)\n    (movable towel)\n    (next_to sink water)\n    (next_to towel sink)\n    (next_to water sink)\n    (next_to sink towel)\n    (inside character bedroom)\n)\n    (:goal\n    (and\n        (inside water hands_both)\n    )\n)\n    )\n    "
      },
      "805_1": {
        "task_name": "Wash hands",
        "natural_language_description": "I walk into the bathroom. Walk to the sink. Turn on tap. Get soap. Wash and rinse hands. Turn off tap. Dry hands.",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <sink> (42)",
          "[TURNTO] <sink> (42)",
          "[LOOKAT] <sink> (42)",
          "[WALK] <sink> (42)",
          "[FIND] <faucet> (43)",
          "[SWITCHON] <faucet> (43)",
          "[FIND] <soap> (1000)",
          "[GRAB] <soap> (1000)",
          "[RINSE] <soap> (1000)",
          "[SWITCHOFF] <faucet> (43)",
          "[FIND] <towel> (1001)",
          "[GRAB] <towel> (1001)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dining_room bathroom towel sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (has_switch faucet)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (cover_object towel)\n    (grabbable towel)\n    (movable towel)\n    (next_to sink towel)\n    (inside character dining_room)\n    (next_to soap sink)\n    (next_to towel sink)\n    (next_to sink soap)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "80_1": {
        "task_name": "Wash hands",
        "natural_language_description": "Walk to the sink, turn on the faucet, put soap on hands, rub hands together under the water, rinse off hands, turn off faucet, dry hands",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <sink> (42)",
          "[WALK] <sink> (42)",
          "[FIND] <soap> (1000)",
          "[FIND] <faucet> (43)",
          "[SWITCHON] <faucet> (43)",
          "[FIND] <hands_both> (1001)",
          "[WASH] <hands_both> (1001)",
          "[RINSE] <hands_both> (1001)",
          "[SWITCHOFF] <faucet> (43)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet home_office hands_both bathroom sink bathroom_counter soap - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (has_switch faucet)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n    (inside character home_office)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "813_2": {
        "task_name": "Wash hands",
        "natural_language_description": "walk to bathroom, look at the water, wash hands",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <water> (1000)",
          "[FIND] <water> (1000)",
          "[TURNTO] <water> (1000)",
          "[LOOKAT] <water> (1000)",
          "[FIND] <hands_both> (1001)",
          "[WASH] <hands_both> (1001)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    water bathroom home_office hands_both - object\n)\n    (:init\n    (drinkable water)\n    (pourable water)\n    (body_part hands_both)\n    (inside character home_office)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "928_2": {
        "task_name": "Wash hands",
        "natural_language_description": "Going to the sink and scrubbing hands",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <sink> (42)",
          "[FIND] <hands_both> (1000)",
          "[RINSE] <hands_both> (1000)",
          "[SCRUB] <hands_both> (1000)",
          "[RINSE] <hands_both> (1000)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office hands_both bathroom sink bathroom_counter - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (body_part hands_both)\n    (inside character home_office)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "995_2": {
        "task_name": "Wash hands",
        "natural_language_description": "Wash Hands",
        "vh_goal": {
          "actions": [
            "RINSE|WASH"
          ],
          "goal": []
        },
        "tl_goal": "exists x0. ((RINSE(x0) or WASH(x0)))",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <faucet> (43)",
          "[FIND] <faucet> (43)",
          "[SWITCHON] <faucet> (43)",
          "[RINSE] <faucet> (43)",
          "[FIND] <soap> (1000)",
          "[SCRUB] <soap> (1000)",
          "[FIND] <hands_both> (1001)",
          "[SCRUB] <hands_both> (1001)",
          "[RINSE] <hands_both> (1001)",
          "[SWITCHOFF] <faucet> (43)"
        ],
        "transition_model": "(define (problem Wash_hands)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dining_room hands_both bathroom soap - object\n)\n    (:init\n    (has_switch faucet)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (body_part hands_both)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "1035_1": {
        "task_name": "Pet cat",
        "natural_language_description": "Find the cat. Touch the cat with your hands.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cat - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "113_2": {
        "task_name": "Pet cat",
        "natural_language_description": "I find cat. I touch cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cat - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "12_2": {
        "task_name": "Pet cat",
        "natural_language_description": "You walk to the living room and find the cat. You look at the cat and touch it to pet it.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TURNTO] <cat> (1000)",
          "[LOOKAT] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office cat dining_room - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "137_2": {
        "task_name": "Pet cat",
        "natural_language_description": "stimulate a feline tactily",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cat - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "203_2": {
        "task_name": "Pet cat",
        "natural_language_description": "Petting the cat",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom cat home_office hair - object\n)\n    (:init\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (movable hair)\n    (grabbable hair)\n    (inside character bathroom)\n    (body_part hair)\n    (cuttable hair)\n    (movable cat)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "220_2": {
        "task_name": "Pet cat",
        "natural_language_description": "First I need to find the cat in the living room. Then I walk over to the cat and pet it gently.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[WALK] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom cat home_office - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "242_1": {
        "task_name": "Pet cat",
        "natural_language_description": "Find the cat; pet the cat by touching it",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office cat dining_room - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "279_2": {
        "task_name": "Pet cat",
        "natural_language_description": "Find the cat.  Pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom cat home_office - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "287_1": {
        "task_name": "Pet cat",
        "natural_language_description": "Locate the cat.  Move close to the cat.  Extend arm toward cat.  Gently pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cat - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "292_1": {
        "task_name": "Pet cat",
        "natural_language_description": "I would walk into the living room. Then sit on the couch and pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office cat hair couch bedroom - object\n)\n    (:init\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (lieable couch)\n    (movable hair)\n    (obj_next_to cat couch)\n    (grabbable hair)\n    (surfaces couch)\n    (inside character bedroom)\n    (obj_next_to couch cat)\n    (movable couch)\n    (body_part hair)\n    (cuttable hair)\n    (movable cat)\n    (obj_inside couch home_office)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "297_1": {
        "task_name": "Pet cat",
        "natural_language_description": "The cat is laying on the couch in the living room. I want to pet it, so I am going to walk to the living room, sit on the couch, and pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <cat> (1000)",
          "[TURNTO] <cat> (1000)",
          "[LOOKAT] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room cat - object\n)\n    (:init\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (lieable couch)\n    (obj_next_to cat couch)\n    (surfaces couch)\n    (obj_next_to couch cat)\n    (movable couch)\n    (obj_inside couch home_office)\n    (inside character dining_room)\n    (movable cat)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "381_1": {
        "task_name": "Pet cat",
        "natural_language_description": "Walk into the living room. Walk up to the cat. Pet the cat with your hand.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom cat home_office - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "388_2": {
        "task_name": "Pet cat",
        "natural_language_description": "Find cat. Walk to cat. Pick up cat. Pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[FIND] <cat> (1000)",
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office cat dining_room - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "38_1": {
        "task_name": "Pet cat",
        "natural_language_description": "I look for my cat and start petting it.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[FIND] <cat> (1000)",
          "[TURNTO] <cat> (1000)",
          "[LOOKAT] <cat> (1000)",
          "[FIND] <face> (1001)",
          "[TOUCH] <face> (1001)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cat face - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (body_part face)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "429_1": {
        "task_name": "Pet cat",
        "natural_language_description": "I see my cat on the couch so I walk over, sit down and pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TURNTO] <cat> (1000)",
          "[LOOKAT] <cat> (1000)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office cat couch television dining_room - object\n)\n    (:init\n    (obj_next_to cat couch)\n    (has_plug television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (grabbable cat)\n    (lieable couch)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_inside cat home_office)\n    (obj_next_to couch cat)\n    (movable couch)\n    (inside character dining_room)\n    (movable cat)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "437_1": {
        "task_name": "Pet cat",
        "natural_language_description": "I walk into the living room. I see my cat on the couch. I go sit next to the cat on the couch. I pet the cat on the back.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TURNTO] <cat> (1000)",
          "[LOOKAT] <cat> (1000)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office cat hair couch bedroom television - object\n)\n    (:init\n    (obj_next_to cat couch)\n    (has_plug television)\n    (surfaces couch)\n    (body_part hair)\n    (obj_inside couch home_office)\n    (grabbable cat)\n    (lieable couch)\n    (movable hair)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_inside cat home_office)\n    (obj_next_to couch cat)\n    (movable couch)\n    (cuttable hair)\n    (movable cat)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (grabbable hair)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "451_1": {
        "task_name": "Pet cat",
        "natural_language_description": "I walk to the living room. I find the cat. I pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office cat dining_room - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character dining_room)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "469_2": {
        "task_name": "Pet cat",
        "natural_language_description": "I sit next to the cat. I hold out my hand. I put my hand on the cat. I pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <cat> (1000)",
          "[TURNTO] <cat> (1000)",
          "[LOOKAT] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch cat - object\n)\n    (:init\n    (grabbable cat)\n    (lieable couch)\n    (obj_next_to cat couch)\n    (surfaces couch)\n    (obj_next_to couch cat)\n    (movable couch)\n    (movable cat)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "479_2": {
        "task_name": "Pet cat",
        "natural_language_description": "I walk into the living room and I pet the cat",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom cat home_office - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "502_1": {
        "task_name": "Pet cat",
        "natural_language_description": "Pick up cat. Rub hand on cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cat - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "612_1": {
        "task_name": "Pet cat",
        "natural_language_description": "I enter the room where the cat is. I look for the cat. I find the cat. I walk over to the cat. I use my hand to pet the cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[TURNTO] <cat> (1000)",
          "[LOOKAT] <cat> (1000)",
          "[FIND] <cat> (1000)",
          "[WALK] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office cat - object\n)\n    (:init\n    (movable cat)\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (inside character bedroom)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "856_2": {
        "task_name": "Pet cat",
        "natural_language_description": "Walk into bedrrom and to the sofa. Sit on the sofa and touch cat.",
        "vh_goal": {
          "actions": [
            "TOUCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (TOUCH(x0)) then NEXT_TO(character.65, cat.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <cat> (1000)",
          "[TOUCH] <cat> (1000)"
        ],
        "transition_model": "(define (problem Pet_cat)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom couch home_office cat - object\n)\n    (:init\n    (grabbable cat)\n    (obj_inside cat home_office)\n    (lieable couch)\n    (obj_next_to cat couch)\n    (surfaces couch)\n    (inside character bathroom)\n    (obj_next_to couch cat)\n    (movable couch)\n    (obj_inside couch home_office)\n    (movable cat)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (next_to character cat)\n    )\n)\n    )\n    "
      },
      "384_1": {
        "task_name": "Browse internet",
        "natural_language_description": "I will walk to the computer at the desk in my home office, sit in the chair, turn on the computer, open a web browser, type in the address, and view the computer.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 417
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 415
            },
            {
              "from_id": 65,
              "relation_type": "INSIDE",
              "to_id": 319
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 413
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(computer.417) and FACING(character.65, computer.417) and HOLDS_LH(character.65, keyboard.415) and INSIDE(character.65, home_office.319) and HOLDS_RH(character.65, mouse.413)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[TOUCH] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[GRAB] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Browse_internet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office desk walllamp mouse keyboard powersocket cpuscreen doorjamb computer chair mousepad wall floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (obj_next_to doorjamb walllamp)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_next_to walllamp floor)\n    (obj_ontop mousepad desk)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_ontop doorjamb floor)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to chair walllamp)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_inside walllamp home_office)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_next_to walllamp keyboard)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to desk walllamp)\n    (obj_next_to computer desk)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (facing walllamp computer)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (obj_next_to keyboard floor)\n    (obj_next_to walllamp chair)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to walllamp desk)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to walllamp wall)\n    (obj_next_to wall walllamp)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to floor walllamp)\n    (movable chair)\n    (obj_next_to desk mouse)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to walllamp doorjamb)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (inside_room doorjamb bathroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_ontop desk floor)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (inside_room walllamp bathroom)\n    (obj_next_to chair wall)\n    (inside_room wall bathroom)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room floor bathroom)\n    (obj_next_to floor cpuscreen)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard walllamp)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n        (inside character home_office)\n        (facing character computer)\n        (holds_rh character mouse)\n        (holds_lh character keyboard)\n    )\n)\n    )\n    "
      },
      "540_1": {
        "task_name": "Browse internet",
        "natural_language_description": "I pick up my phone. I touch it to navigate to the web browser. I can swipe and tap the screen to visit different websites. Then I read or watch the content within those websites.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 1000
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 1000
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (FACING(character.65, phone.1000) and FACING(character.65, phone.1000) and HOLDS_RH(character.65, phone.1000)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)",
          "[TOUCH] <phone> (1000)",
          "[TURNTO] <phone> (1000)",
          "[LOOKAT] <phone> (1000)"
        ],
        "transition_model": "(define (problem Browse_internet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom phone home_office - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (grabbable phone)\n    (inside character bathroom)\n    (has_plug phone)\n    (has_switch phone)\n    (movable phone)\n)\n    (:goal\n    (and\n        (facing character phone)\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "60_1": {
        "task_name": "Browse internet",
        "natural_language_description": "first ill go to the entrance hall ill enter into my home office after that i will switch on mylaptop and then with the use of mouse and keyboard i will browse",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 1000,
              "class_name": "laptop",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "laptop",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(laptop.1000) and PLUGGED_IN(laptop.1000) and FACING(character.65, laptop.1000)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <home_office> (319)",
          "[WALK] <keyboard> (415)",
          "[FIND] <keyboard> (415)",
          "[GRAB] <keyboard> (415)",
          "[FIND] <laptop> (1000)",
          "[SWITCHON] <laptop> (1000)",
          "[FIND] <mouse> (413)",
          "[TOUCH] <mouse> (413)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <laptop> (1000)",
          "[WATCH] <laptop> (1000)"
        ],
        "transition_model": "(define (problem Browse_internet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk walllamp mouse keyboard cpuscreen laptop computer chair mousepad wall dining_room floor - object\n)\n    (:init\n    (obj_next_to cpuscreen mousepad)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to walllamp floor)\n    (obj_ontop mousepad desk)\n    (grabbable laptop)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (movable laptop)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (inside_room floor dining_room)\n    (has_plug laptop)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (inside_room wall dining_room)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to chair walllamp)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_inside walllamp home_office)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (has_switch laptop)\n    (obj_next_to walllamp keyboard)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to desk walllamp)\n    (obj_next_to computer desk)\n    (clean laptop)\n    (obj_next_to desk wall)\n    (plugged_in laptop)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (facing walllamp computer)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (obj_next_to keyboard floor)\n    (obj_next_to walllamp chair)\n    (grabbable mouse)\n    (obj_next_to laptop keyboard)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_inside laptop home_office)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (off laptop)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to walllamp desk)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (obj_next_to keyboard laptop)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to floor floor)\n    (obj_next_to walllamp wall)\n    (obj_next_to wall walllamp)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (lookable laptop)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to wall computer)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to floor walllamp)\n    (movable chair)\n    (obj_next_to desk mouse)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (obj_ontop desk floor)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to mouse computer)\n    (obj_next_to chair desk)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (inside character dining_room)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to keyboard wall)\n    (obj_next_to mouse cpuscreen)\n    (obj_next_to floor cpuscreen)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard walllamp)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on laptop)\n        (plugged_in laptop)\n        (facing character laptop)\n    )\n)\n    )\n    "
      },
      "71_2": {
        "task_name": "Browse internet",
        "natural_language_description": "Go to home office and browse the internet.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 417
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 415
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 413
            },
            {
              "from_id": 65,
              "relation_type": "INSIDE",
              "to_id": 319
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(computer.417) and FACING(character.65, computer.417) and HOLDS_LH(character.65, keyboard.415) and HOLDS_RH(character.65, mouse.413) and INSIDE(character.65, home_office.319)))",
        "action_trajectory": [
          "[RUN] <home_office> (319)",
          "[WALK] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[FIND] <keyboard> (415)",
          "[GRAB] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[TOUCH] <mouse> (413)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)",
          "[TOUCH] <mouse> (413)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Browse_internet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk walllamp mouse keyboard powersocket cpuscreen doorjamb bedroom chair mousepad computer wall floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (obj_next_to doorjamb walllamp)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_next_to walllamp floor)\n    (obj_ontop mousepad desk)\n    (inside_room chair bedroom)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (inside_room mouse bedroom)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (inside_room mousepad bedroom)\n    (obj_ontop doorjamb floor)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to chair walllamp)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_inside walllamp home_office)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_next_to walllamp keyboard)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (inside_room doorjamb bedroom)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to desk walllamp)\n    (obj_next_to computer desk)\n    (inside character bedroom)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (facing walllamp computer)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (inside_room wall bedroom)\n    (obj_next_to keyboard floor)\n    (obj_next_to walllamp chair)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to walllamp desk)\n    (obj_next_to chair floor)\n    (inside_room floor bedroom)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to walllamp wall)\n    (obj_next_to wall walllamp)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (inside_room desk bedroom)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to floor walllamp)\n    (movable chair)\n    (obj_next_to desk mouse)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to walllamp doorjamb)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (inside_room cpuscreen bedroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_ontop desk floor)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (obj_next_to floor cpuscreen)\n    (inside_room keyboard bedroom)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard walllamp)\n    (inside_room computer bedroom)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n        (inside character home_office)\n        (facing character computer)\n        (holds_rh character mouse)\n        (holds_lh character keyboard)\n    )\n)\n    )\n    "
      },
      "7_1": {
        "task_name": "Browse internet",
        "natural_language_description": "I go to the office and sit in a chair, I turn on the computer and grab the mouse. I type on the keyboard and starting working on the computer.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 417,
              "class_name": "computer",
              "state": "ON"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 417
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 413
            },
            {
              "from_id": 65,
              "relation_type": "INSIDE",
              "to_id": 319
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(computer.417) and FACING(character.65, computer.417) and HOLDS_RH(character.65, mouse.413) and INSIDE(character.65, home_office.319)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <desk> (357)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <computer> (417)",
          "[SWITCHON] <computer> (417)",
          "[FIND] <mouse> (413)",
          "[GRAB] <mouse> (413)",
          "[FIND] <keyboard> (415)",
          "[TYPE] <keyboard> (415)",
          "[TURNTO] <computer> (417)",
          "[LOOKAT] <computer> (417)"
        ],
        "transition_model": "(define (problem Browse_internet)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office desk mouse keyboard powersocket cpuscreen doorjamb computer chair mousepad wall dining_room floor - object\n)\n    (:init\n    (obj_inside powersocket home_office)\n    (obj_next_to cpuscreen mousepad)\n    (obj_next_to wall powersocket)\n    (surfaces chair)\n    (obj_next_to cpuscreen floor)\n    (movable mousepad)\n    (obj_next_to keyboard computer)\n    (plugged_out computer)\n    (obj_next_to computer cpuscreen)\n    (has_plug keyboard)\n    (obj_next_to mouse powersocket)\n    (obj_next_to mousepad doorjamb)\n    (sittable chair)\n    (obj_next_to floor computer)\n    (obj_next_to mousepad wall)\n    (obj_next_to computer doorjamb)\n    (obj_ontop mousepad desk)\n    (obj_ontop keyboard mousepad)\n    (facing floor computer)\n    (obj_next_to mouse chair)\n    (obj_inside wall home_office)\n    (obj_next_to floor powersocket)\n    (obj_next_to computer floor)\n    (obj_ontop mouse desk)\n    (obj_next_to computer wall)\n    (movable mouse)\n    (obj_next_to wall mousepad)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to chair computer)\n    (inside_room floor dining_room)\n    (obj_next_to chair mouse)\n    (obj_next_to wall cpuscreen)\n    (surfaces floor)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (obj_next_to wall mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_ontop doorjamb floor)\n    (inside_room wall dining_room)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to doorjamb wall)\n    (obj_next_to wall doorjamb)\n    (obj_next_to floor mouse)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to desk doorjamb)\n    (obj_inside floor home_office)\n    (obj_next_to cpuscreen desk)\n    (obj_inside doorjamb home_office)\n    (obj_next_to mousepad powersocket)\n    (facing wall computer)\n    (obj_next_to floor mousepad)\n    (lookable computer)\n    (obj_next_to cpuscreen computer)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to wall keyboard)\n    (obj_next_to desk computer)\n    (obj_inside desk home_office)\n    (obj_next_to computer desk)\n    (obj_next_to desk wall)\n    (obj_next_to computer mousepad)\n    (obj_inside chair home_office)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad floor)\n    (obj_next_to mousepad desk)\n    (obj_next_to keyboard floor)\n    (grabbable mouse)\n    (obj_next_to doorjamb computer)\n    (obj_next_to mouse wall)\n    (obj_next_to computer chair)\n    (obj_next_to mouse desk)\n    (obj_next_to desk floor)\n    (obj_next_to keyboard mouse)\n    (obj_inside keyboard home_office)\n    (obj_inside mousepad home_office)\n    (obj_next_to chair floor)\n    (obj_next_to mouse floor)\n    (grabbable chair)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to powersocket wall)\n    (obj_next_to floor floor)\n    (obj_next_to doorjamb mousepad)\n    (obj_next_to doorjamb desk)\n    (obj_next_to computer mouse)\n    (obj_next_to floor keyboard)\n    (obj_next_to desk powersocket)\n    (obj_next_to wall floor)\n    (obj_inside computer home_office)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_next_to wall chair)\n    (obj_next_to mousepad chair)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to chair mousepad)\n    (obj_next_to powersocket doorjamb)\n    (obj_next_to floor wall)\n    (obj_inside mouse home_office)\n    (obj_next_to mousepad computer)\n    (obj_next_to powersocket mousepad)\n    (obj_next_to wall computer)\n    (obj_next_to powersocket floor)\n    (obj_next_to mouse doorjamb)\n    (surfaces desk)\n    (obj_next_to computer keyboard)\n    (facing chair computer)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to wall wall)\n    (obj_next_to floor desk)\n    (obj_next_to desk chair)\n    (has_switch computer)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (obj_next_to powersocket desk)\n    (obj_next_to powersocket mouse)\n    (grabbable keyboard)\n    (obj_ontop desk floor)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to chair desk)\n    (obj_next_to mouse computer)\n    (obj_next_to doorjamb floor)\n    (obj_next_to computer powersocket)\n    (obj_next_to floor doorjamb)\n    (obj_next_to wall desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to cpuscreen wall)\n    (obj_next_to chair wall)\n    (inside character dining_room)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to doorjamb mouse)\n    (obj_next_to powersocket computer)\n    (obj_next_to keyboard wall)\n    (clean computer)\n    (obj_next_to mouse cpuscreen)\n    (off computer)\n    (inside_room powersocket dining_room)\n    (obj_next_to floor cpuscreen)\n    (facing doorjamb computer)\n    (obj_next_to floor chair)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (on computer)\n        (inside character home_office)\n        (facing character computer)\n        (holds_rh character mouse)\n    )\n)\n    )\n    "
      },
      "1070_1": {
        "task_name": "Wash teeth",
        "natural_language_description": "walk to bathroom, look at the toothbrush holder, grab the toothbrush from the toothbrush holder, find the toothpaste, squeeze the toothpaste into toothbrush, now wash the teeth",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, toothbrush.1001)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <toothbrush_holder> (1000)",
          "[FIND] <toothbrush_holder> (1000)",
          "[TURNTO] <toothbrush_holder> (1000)",
          "[LOOKAT] <toothbrush_holder> (1000)",
          "[FIND] <toothbrush> (1001)",
          "[GRAB] <toothbrush> (1001)",
          "[FIND] <tooth_paste> (1002)",
          "[SQUEEZE] <tooth_paste> (1002)",
          "[FIND] <teeth> (1003)",
          "[WASH] <teeth> (1003)"
        ],
        "transition_model": "(define (problem Wash_teeth)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office teeth toothbrush_holder tooth_paste toothbrush - object\n)\n    (:init\n    (containers toothbrush_holder)\n    (grabbable toothbrush_holder)\n    (grabbable teeth)\n    (obj_next_to toothbrush toothbrush_holder)\n    (obj_ontop toothbrush toothbrush_holder)\n    (movable toothbrush_holder)\n    (cream tooth_paste)\n    (pourable tooth_paste)\n    (inside_room tooth_paste bathroom)\n    (obj_next_to toothbrush_holder toothbrush)\n    (inside_room toothbrush_holder bathroom)\n    (movable toothbrush)\n    (movable teeth)\n    (grabbable toothbrush)\n    (obj_next_to toothbrush_holder teeth)\n    (obj_next_to tooth_paste toothbrush_holder)\n    (inside_room toothbrush bathroom)\n    (obj_next_to teeth toothbrush_holder)\n    (inside_room teeth bathroom)\n    (obj_next_to toothbrush_holder tooth_paste)\n    (inside character home_office)\n    (recipient toothbrush)\n    (grabbable tooth_paste)\n    (movable tooth_paste)\n    (can_open tooth_paste)\n)\n    (:goal\n    (and\n        (holds_rh character toothbrush)\n    )\n)\n    )\n    "
      },
      "313_2": {
        "task_name": "Wash teeth",
        "natural_language_description": "I go to sleep and i eat the dinner so i have to clean my mouth",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "HOLDS_LH(character.65, toothbrush.1001)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <sink> (42)",
          "[FIND] <tooth_paste> (1000)",
          "[GRAB] <tooth_paste> (1000)",
          "[FIND] <toothbrush> (1001)",
          "[GRAB] <toothbrush> (1001)",
          "[DROP] <tooth_paste> (1000)",
          "[FIND] <teeth> (1002)",
          "[SCRUB] <teeth> (1002)",
          "[RINSE] <teeth> (1002)",
          "[FIND] <towel> (1003)",
          "[GRAB] <towel> (1003)"
        ],
        "transition_model": "(define (problem Wash_teeth)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom bathroom_counter teeth sink towel dining_room tooth_paste toothbrush - object\n)\n    (:init\n    (obj_next_to sink toothbrush)\n    (containers sink)\n    (grabbable teeth)\n    (inside_room sink bathroom)\n    (cream tooth_paste)\n    (pourable tooth_paste)\n    (cover_object towel)\n    (inside_room tooth_paste bathroom)\n    (inside_room sink dining_room)\n    (obj_next_to sink tooth_paste)\n    (obj_next_to sink bathroom_counter)\n    (obj_next_to sink towel)\n    (movable toothbrush)\n    (obj_next_to bathroom_counter sink)\n    (movable teeth)\n    (grabbable toothbrush)\n    (obj_next_to sink teeth)\n    (inside_room towel bathroom)\n    (inside_room toothbrush bathroom)\n    (obj_ontop tooth_paste sink)\n    (obj_next_to towel sink)\n    (obj_inside sink bathroom_counter)\n    (inside character dining_room)\n    (movable towel)\n    (grabbable towel)\n    (inside_room bathroom_counter bathroom)\n    (inside_room teeth bathroom)\n    (recipient sink)\n    (obj_next_to tooth_paste sink)\n    (obj_next_to teeth sink)\n    (surfaces bathroom_counter)\n    (obj_next_to toothbrush sink)\n    (grabbable tooth_paste)\n    (movable tooth_paste)\n    (recipient toothbrush)\n    (can_open tooth_paste)\n)\n    (:goal\n    (and\n        (holds_lh character toothbrush)\n    )\n)\n    )\n    "
      },
      "689_1": {
        "task_name": "Wash teeth",
        "natural_language_description": "WALK TO THE BATHROOM USE PASTE AND BRUSH TO WASH YOUR TEETH",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 1002
            }
          ]
        },
        "tl_goal": "HOLDS_LH(character.65, toothbrush.1002)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <toothbrush_holder> (1000)",
          "[FIND] <toothbrush_holder> (1000)",
          "[FIND] <tooth_paste> (1001)",
          "[GRAB] <tooth_paste> (1001)",
          "[FIND] <toothbrush> (1002)",
          "[GRAB] <toothbrush> (1002)"
        ],
        "transition_model": "(define (problem Wash_teeth)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom toothbrush_holder bedroom tooth_paste toothbrush - object\n)\n    (:init\n    (containers toothbrush_holder)\n    (grabbable toothbrush_holder)\n    (obj_next_to toothbrush toothbrush_holder)\n    (movable toothbrush_holder)\n    (cream tooth_paste)\n    (pourable tooth_paste)\n    (inside_room tooth_paste bathroom)\n    (obj_next_to toothbrush_holder toothbrush)\n    (inside_room toothbrush_holder bathroom)\n    (movable toothbrush)\n    (grabbable toothbrush)\n    (obj_next_to tooth_paste toothbrush_holder)\n    (inside_room toothbrush bathroom)\n    (obj_ontop tooth_paste toothbrush_holder)\n    (obj_next_to toothbrush_holder tooth_paste)\n    (inside character bedroom)\n    (grabbable tooth_paste)\n    (movable tooth_paste)\n    (recipient toothbrush)\n    (can_open tooth_paste)\n)\n    (:goal\n    (and\n        (holds_lh character toothbrush)\n    )\n)\n    )\n    "
      },
      "718_1": {
        "task_name": "Wash teeth",
        "natural_language_description": "before going to bed or when wake up earily morning brush teeth",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "HOLDS_LH(character.65, toothbrush.1001)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <tooth_paste> (1000)",
          "[FIND] <tooth_paste> (1000)",
          "[GRAB] <tooth_paste> (1000)",
          "[FIND] <toothbrush> (1001)",
          "[GRAB] <toothbrush> (1001)"
        ],
        "transition_model": "(define (problem Wash_teeth)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom dining_room tooth_paste toothbrush - object\n)\n    (:init\n    (obj_next_to tooth_paste toothbrush)\n    (obj_next_to toothbrush tooth_paste)\n    (inside_room toothbrush bathroom)\n    (inside character dining_room)\n    (movable tooth_paste)\n    (grabbable tooth_paste)\n    (cream tooth_paste)\n    (pourable tooth_paste)\n    (movable toothbrush)\n    (can_open tooth_paste)\n    (recipient toothbrush)\n    (inside_room tooth_paste bathroom)\n    (grabbable toothbrush)\n)\n    (:goal\n    (and\n        (holds_lh character toothbrush)\n    )\n)\n    )\n    "
      },
      "1049_1": {
        "task_name": "Listen to music",
        "natural_language_description": "walk to living room, look at the DVD player, switch on the dvd player, look at the sofa, sit on the sofa and listen the music",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "dvd_player",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "dvd_player",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "dvd_player",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(dvd_player.1000) and ON(dvd_player.1000) and PLUGGED_IN(dvd_player.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <dvd_player> (1000)",
          "[FIND] <dvd_player> (1000)",
          "[TURNTO] <dvd_player> (1000)",
          "[LOOKAT] <dvd_player> (1000)",
          "[SWITCHON] <dvd_player> (1000)",
          "[FIND] <couch> (352)",
          "[TURNTO] <couch> (352)",
          "[LOOKAT] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office couch television dvd_player - object\n)\n    (:init\n    (has_plug television)\n    (clean dvd_player)\n    (surfaces couch)\n    (can_open dvd_player)\n    (plugged_in dvd_player)\n    (obj_inside couch home_office)\n    (closed dvd_player)\n    (lieable couch)\n    (obj_next_to couch television)\n    (lookable television)\n    (off dvd_player)\n    (grabbable dvd_player)\n    (movable couch)\n    (facing couch television)\n    (surfaces dvd_player)\n    (sittable couch)\n    (has_plug dvd_player)\n    (movable dvd_player)\n    (obj_next_to couch dvd_player)\n    (has_switch television)\n    (obj_next_to dvd_player couch)\n    (has_switch dvd_player)\n    (inside character bathroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n    (obj_inside dvd_player home_office)\n)\n    (:goal\n    (and\n        (closed dvd_player)\n        (on dvd_player)\n        (plugged_in dvd_player)\n    )\n)\n    )\n    "
      },
      "113_1": {
        "task_name": "Listen to music",
        "natural_language_description": "I find CD player. I turn on CD player. I press play.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(cd_player.1000) and ON(cd_player.1000) and PLUGGED_IN(cd_player.1000))",
        "action_trajectory": [
          "[FIND] <cd_player> (1000)",
          "[SWITCHON] <cd_player> (1000)",
          "[TOUCH] <cd_player> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cd_player - object\n)\n    (:init\n    (plugged_in cd_player)\n    (grabbable cd_player)\n    (closed cd_player)\n    (clean cd_player)\n    (off cd_player)\n    (movable cd_player)\n    (surfaces cd_player)\n    (has_switch cd_player)\n    (has_plug cd_player)\n    (can_open cd_player)\n)\n    (:goal\n    (and\n        (closed cd_player)\n        (on cd_player)\n        (plugged_in cd_player)\n    )\n)\n    )\n    "
      },
      "161_1": {
        "task_name": "Listen to music",
        "natural_language_description": "turn radio on, listen to music",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <stereo> (1000)",
          "[FIND] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dining_room stereo - object\n)\n    (:init\n    (plugged_in stereo)\n    (obj_inside stereo home_office)\n    (has_plug stereo)\n    (has_switch stereo)\n    (grabbable stereo)\n    (off stereo)\n    (movable stereo)\n    (closed stereo)\n    (inside character dining_room)\n    (surfaces stereo)\n    (clean stereo)\n    (can_open stereo)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "173_1": {
        "task_name": "Listen to music",
        "natural_language_description": "Find player and switch on to headphones",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(cd_player.1000) and ON(cd_player.1000) and PLUGGED_IN(cd_player.1000))",
        "action_trajectory": [
          "[STANDUP]",
          "[WALK] <bedroom> (67)",
          "[WALK] <cd_player> (1000)",
          "[FIND] <cd_player> (1000)",
          "[FIND] <headset> (1001)",
          "[GRAB] <headset> (1001)",
          "[PLUGIN] <cd_player> (1000)",
          "[SWITCHON] <cd_player> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office cd_player headset - object\n)\n    (:init\n    (grabbable headset)\n    (sitting character)\n    (movable cd_player)\n    (obj_next_to cd_player headset)\n    (obj_next_to headset cd_player)\n    (inside_room cd_player bedroom)\n    (has_switch cd_player)\n    (plugged_out cd_player)\n    (closed cd_player)\n    (clean cd_player)\n    (off cd_player)\n    (movable headset)\n    (inside_room headset bedroom)\n    (grabbable cd_player)\n    (surfaces cd_player)\n    (inside character home_office)\n    (clothes headset)\n    (has_plug cd_player)\n    (can_open cd_player)\n)\n    (:goal\n    (and\n        (closed cd_player)\n        (on cd_player)\n        (plugged_in cd_player)\n    )\n)\n    )\n    "
      },
      "23_1": {
        "task_name": "Listen to music",
        "natural_language_description": "I walk into the living room. I find the stereo and turn it on, and I listen to the music.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <stereo> (1000)",
          "[FIND] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office stereo - object\n)\n    (:init\n    (plugged_in stereo)\n    (obj_inside stereo home_office)\n    (has_plug stereo)\n    (has_switch stereo)\n    (grabbable stereo)\n    (inside character bathroom)\n    (off stereo)\n    (movable stereo)\n    (closed stereo)\n    (surfaces stereo)\n    (clean stereo)\n    (can_open stereo)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "263_1": {
        "task_name": "Listen to music",
        "natural_language_description": "Find radio, turn it on",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <stereo> (1000)",
          "[FIND] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office stereo - object\n)\n    (:init\n    (plugged_in stereo)\n    (obj_inside stereo home_office)\n    (has_plug stereo)\n    (has_switch stereo)\n    (grabbable stereo)\n    (inside character bathroom)\n    (off stereo)\n    (movable stereo)\n    (closed stereo)\n    (surfaces stereo)\n    (clean stereo)\n    (can_open stereo)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "305_2": {
        "task_name": "Listen to music",
        "natural_language_description": "I go to the bedroom and sit at my desk. I turn my radio on and listen to music.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <light> (169)",
          "[FIND] <light> (169)",
          "[SWITCHON] <light> (169)",
          "[WALK] <desk> (104)",
          "[FIND] <chair> (103)",
          "[SIT] <chair> (103)",
          "[FIND] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom desk mouse keyboard light cpuscreen stereo bedroom chair mousepad - object\n)\n    (:init\n    (obj_next_to stereo chair)\n    (obj_next_to cpuscreen mousepad)\n    (surfaces chair)\n    (has_plug light)\n    (movable mousepad)\n    (inside_room light bedroom)\n    (has_plug keyboard)\n    (sittable chair)\n    (has_plug stereo)\n    (obj_next_to light chair)\n    (obj_ontop mousepad desk)\n    (clean light)\n    (inside_room chair bedroom)\n    (obj_next_to mouse chair)\n    (obj_next_to stereo desk)\n    (inside_room mouse bedroom)\n    (obj_ontop mouse desk)\n    (movable mouse)\n    (movable stereo)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to light cpuscreen)\n    (obj_next_to chair mouse)\n    (obj_next_to chair keyboard)\n    (obj_next_to mousepad mouse)\n    (inside_room light bathroom)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (inside_room stereo bedroom)\n    (inside_room mousepad bedroom)\n    (obj_next_to mouse mousepad)\n    (obj_ontop keyboard desk)\n    (obj_next_to light light)\n    (obj_next_to cpuscreen mouse)\n    (obj_next_to mousepad keyboard)\n    (surfaces stereo)\n    (plugged_in stereo)\n    (obj_next_to light desk)\n    (obj_next_to cpuscreen desk)\n    (obj_next_to chair light)\n    (obj_next_to cpuscreen light)\n    (obj_next_to desk light)\n    (clean stereo)\n    (has_switch stereo)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to desk stereo)\n    (obj_next_to desk mousepad)\n    (obj_next_to mousepad desk)\n    (grabbable mouse)\n    (can_open stereo)\n    (plugged_in light)\n    (obj_next_to mouse desk)\n    (obj_next_to keyboard mouse)\n    (off stereo)\n    (grabbable chair)\n    (closed stereo)\n    (obj_next_to cpuscreen chair)\n    (obj_next_to keyboard light)\n    (grabbable stereo)\n    (inside character bathroom)\n    (off light)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (inside_room desk bedroom)\n    (obj_next_to keyboard cpuscreen)\n    (obj_next_to mousepad chair)\n    (obj_next_to chair mousepad)\n    (has_switch light)\n    (surfaces desk)\n    (obj_next_to desk mouse)\n    (movable chair)\n    (obj_next_to desk chair)\n    (obj_next_to chair cpuscreen)\n    (obj_next_to keyboard chair)\n    (grabbable keyboard)\n    (inside_room cpuscreen bedroom)\n    (obj_next_to desk cpuscreen)\n    (obj_next_to chair desk)\n    (obj_next_to mouse keyboard)\n    (has_plug mouse)\n    (obj_next_to chair stereo)\n    (obj_next_to mouse cpuscreen)\n    (inside_room keyboard bedroom)\n    (obj_next_to light keyboard)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "363_2": {
        "task_name": "Listen to music",
        "natural_language_description": "Walking to Living room. Grab the music player. Switch on player. Put CD into the player. Sit the chair and Listening music",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1001,
              "class_name": "dvd_player",
              "state": "CLOSED"
            },
            {
              "id": 1001,
              "class_name": "dvd_player",
              "state": "ON"
            },
            {
              "id": 1001,
              "class_name": "dvd_player",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(dvd_player.1001) and ON(dvd_player.1001) and PLUGGED_IN(dvd_player.1001))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <music_stand> (1000)",
          "[FIND] <music_stand> (1000)",
          "[FIND] <dvd_player> (1001)",
          "[TURNTO] <dvd_player> (1001)",
          "[LOOKAT] <dvd_player> (1001)",
          "[FIND] <remote_control> (1002)",
          "[GRAB] <remote_control> (1002)",
          "[SWITCHON] <dvd_player> (1001)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    music_stand home_office remote_control bedroom chair computer dvd_player - object\n)\n    (:init\n    (grabbable remote_control)\n    (surfaces music_stand)\n    (clean dvd_player)\n    (surfaces chair)\n    (obj_next_to dvd_player music_stand)\n    (obj_next_to chair music_stand)\n    (can_open music_stand)\n    (obj_next_to music_stand chair)\n    (can_open dvd_player)\n    (plugged_in dvd_player)\n    (facing chair computer)\n    (closed dvd_player)\n    (movable chair)\n    (movable remote_control)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (containers music_stand)\n    (has_switch computer)\n    (off dvd_player)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (obj_inside music_stand home_office)\n    (grabbable dvd_player)\n    (obj_next_to music_stand dvd_player)\n    (inside_room chair bedroom)\n    (grabbable chair)\n    (obj_next_to remote_control music_stand)\n    (lookable computer)\n    (surfaces dvd_player)\n    (obj_next_to music_stand remote_control)\n    (has_plug dvd_player)\n    (movable dvd_player)\n    (has_switch dvd_player)\n    (obj_inside computer home_office)\n    (inside character bedroom)\n    (inside_room computer bedroom)\n    (obj_inside chair home_office)\n    (obj_next_to chair computer)\n    (obj_inside dvd_player home_office)\n    (movable music_stand)\n)\n    (:goal\n    (and\n        (closed dvd_player)\n        (on dvd_player)\n        (plugged_in dvd_player)\n    )\n)\n    )\n    "
      },
      "385_2": {
        "task_name": "Listen to music",
        "natural_language_description": "Go to living room. Find CD player. Pick CD. Put CD in CD player. Play music.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(cd_player.1000) and ON(cd_player.1000) and PLUGGED_IN(cd_player.1000))",
        "action_trajectory": [
          "[FIND] <cd_player> (1000)",
          "[WALK] <cd_player> (1000)",
          "[SWITCHON] <cd_player> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cd_player - object\n)\n    (:init\n    (plugged_in cd_player)\n    (grabbable cd_player)\n    (closed cd_player)\n    (clean cd_player)\n    (off cd_player)\n    (movable cd_player)\n    (surfaces cd_player)\n    (has_switch cd_player)\n    (has_plug cd_player)\n    (can_open cd_player)\n)\n    (:goal\n    (and\n        (closed cd_player)\n        (on cd_player)\n        (plugged_in cd_player)\n    )\n)\n    )\n    "
      },
      "403_1": {
        "task_name": "Listen to music",
        "natural_language_description": "I walk into my room and turn the radio on so that I can listen to music.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <stereo> (1000)",
          "[FIND] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    hair bedroom dining_room stereo - object\n)\n    (:init\n    (inside_room stereo bedroom)\n    (plugged_in stereo)\n    (movable hair)\n    (grabbable hair)\n    (has_plug stereo)\n    (has_switch stereo)\n    (grabbable stereo)\n    (off stereo)\n    (cuttable hair)\n    (movable stereo)\n    (closed stereo)\n    (inside character dining_room)\n    (body_part hair)\n    (surfaces stereo)\n    (clean stereo)\n    (can_open stereo)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "415_1": {
        "task_name": "Listen to music",
        "natural_language_description": "Find telephone and grab it. Find headset and put on your head. Connect it to the telephone. Look at your telephone and listen to music.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 65
            }
          ]
        },
        "tl_goal": "ONTOP(headset.1000, character.65)",
        "action_trajectory": [
          "[FIND] <phone> (247)",
          "[FIND] <headset> (1000)",
          "[GRAB] <headset> (1000)",
          "[FIND] <headset> (1000)",
          "[PUTON] <headset> (1000)",
          "[TURNTO] <phone> (247)",
          "[LOOKAT] <phone> (247)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    phone headset - object\n)\n    (:init\n    (grabbable headset)\n    (grabbable phone)\n    (has_plug phone)\n    (movable headset)\n    (has_switch phone)\n    (clothes headset)\n    (movable phone)\n)\n    (:goal\n    (and\n        (on_char headset character)\n    )\n)\n    )\n    "
      },
      "462_2": {
        "task_name": "Listen to music",
        "natural_language_description": "I walk to my bedroom.  I locate my stereo and turn it on.  I put on my headphones and sit to listen.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <stereo> (1000)",
          "[FIND] <stereo> (1000)",
          "[WALK] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)",
          "[FIND] <headset> (1001)",
          "[GRAB] <headset> (1001)",
          "[PUTON] <headset> (1001)",
          "[FIND] <chair> (103)",
          "[SIT] <chair> (103)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom stereo headset bedroom chair - object\n)\n    (:init\n    (obj_next_to stereo chair)\n    (grabbable headset)\n    (surfaces chair)\n    (can_open stereo)\n    (inside_room stereo bedroom)\n    (movable chair)\n    (sittable chair)\n    (has_plug stereo)\n    (off stereo)\n    (surfaces stereo)\n    (plugged_in stereo)\n    (inside_room chair bedroom)\n    (obj_next_to chair stereo)\n    (movable headset)\n    (grabbable chair)\n    (obj_next_to headset stereo)\n    (closed stereo)\n    (inside_room headset bedroom)\n    (has_switch stereo)\n    (clean stereo)\n    (obj_next_to stereo headset)\n    (grabbable stereo)\n    (inside character bathroom)\n    (movable stereo)\n    (clothes headset)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "463_2": {
        "task_name": "Listen to music",
        "natural_language_description": "I walk into the bedroom. I walk to stereo. I turn on stereo.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office stereo - object\n)\n    (:init\n    (inside_room stereo bedroom)\n    (plugged_in stereo)\n    (has_plug stereo)\n    (has_switch stereo)\n    (grabbable stereo)\n    (off stereo)\n    (movable stereo)\n    (closed stereo)\n    (inside character home_office)\n    (surfaces stereo)\n    (clean stereo)\n    (can_open stereo)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "503_2": {
        "task_name": "Listen to music",
        "natural_language_description": "Walk to CD player and turn it on then go and sit in a chair and turn the remote control on and then listen to some music.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "cd_player",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(cd_player.1000) and ON(cd_player.1000) and PLUGGED_IN(cd_player.1000))",
        "action_trajectory": [
          "[WALK] <cd_player> (1000)",
          "[SWITCHON] <cd_player> (1000)",
          "[FIND] <chair> (103)",
          "[SIT] <chair> (103)",
          "[FIND] <remote_control> (1001)",
          "[TOUCH] <remote_control> (1001)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    remote_control chair cd_player - object\n)\n    (:init\n    (grabbable remote_control)\n    (obj_next_to chair remote_control)\n    (surfaces chair)\n    (obj_next_to cd_player chair)\n    (movable cd_player)\n    (movable chair)\n    (movable remote_control)\n    (sittable chair)\n    (obj_next_to chair cd_player)\n    (has_switch cd_player)\n    (has_switch remote_control)\n    (closed cd_player)\n    (clean cd_player)\n    (off cd_player)\n    (grabbable chair)\n    (obj_next_to remote_control chair)\n    (plugged_in cd_player)\n    (obj_next_to remote_control cd_player)\n    (obj_next_to cd_player remote_control)\n    (grabbable cd_player)\n    (surfaces cd_player)\n    (has_plug cd_player)\n    (can_open cd_player)\n)\n    (:goal\n    (and\n        (closed cd_player)\n        (on cd_player)\n        (plugged_in cd_player)\n    )\n)\n    )\n    "
      },
      "59_1": {
        "task_name": "Listen to music",
        "natural_language_description": "walk to living room. grab cellphone. grab headset. put on headset. type with cellphone.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 65
            }
          ]
        },
        "tl_goal": "ONTOP(headset.1001, character.65)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)",
          "[FIND] <headset> (1001)",
          "[GRAB] <headset> (1001)",
          "[PUTON] <headset> (1001)",
          "[TYPE] <phone> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office phone dining_room headset - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (inside_room phone dining_room)\n    (grabbable headset)\n    (obj_next_to headset phone)\n    (grabbable phone)\n    (has_plug phone)\n    (movable headset)\n    (obj_next_to phone headset)\n    (has_switch phone)\n    (inside character dining_room)\n    (clothes headset)\n    (obj_inside headset home_office)\n    (movable phone)\n)\n    (:goal\n    (and\n        (on_char headset character)\n    )\n)\n    )\n    "
      },
      "737_1": {
        "task_name": "Listen to music",
        "natural_language_description": "I find a radio. I turn on the radio. I listen to music.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <stereo> (1000)",
          "[FIND] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office stereo - object\n)\n    (:init\n    (plugged_in stereo)\n    (obj_inside stereo home_office)\n    (has_plug stereo)\n    (has_switch stereo)\n    (grabbable stereo)\n    (inside character bedroom)\n    (off stereo)\n    (movable stereo)\n    (closed stereo)\n    (surfaces stereo)\n    (clean stereo)\n    (can_open stereo)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "773_1": {
        "task_name": "Listen to music",
        "natural_language_description": "Find radio. Turn on radio. Find a station that you like by switching through the channels. Listen.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[FIND] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    stereo - object\n)\n    (:init\n    (plugged_in stereo)\n    (has_plug stereo)\n    (has_switch stereo)\n    (grabbable stereo)\n    (off stereo)\n    (movable stereo)\n    (closed stereo)\n    (surfaces stereo)\n    (clean stereo)\n    (can_open stereo)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "910_2": {
        "task_name": "Listen to music",
        "natural_language_description": "Listen to music",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "CLOSED"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "ON"
            },
            {
              "id": 1000,
              "class_name": "stereo",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(stereo.1000) and ON(stereo.1000) and PLUGGED_IN(stereo.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <stereo> (1000)",
          "[FIND] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office stereo - object\n)\n    (:init\n    (plugged_in stereo)\n    (obj_inside stereo home_office)\n    (has_plug stereo)\n    (has_switch stereo)\n    (grabbable stereo)\n    (inside character bedroom)\n    (off stereo)\n    (movable stereo)\n    (closed stereo)\n    (surfaces stereo)\n    (clean stereo)\n    (can_open stereo)\n)\n    (:goal\n    (and\n        (closed stereo)\n        (on stereo)\n        (plugged_in stereo)\n    )\n)\n    )\n    "
      },
      "953_1": {
        "task_name": "Listen to music",
        "natural_language_description": "Walk to the living and turn to the music stand. Switch on the CD player to listen to music.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 1001,
              "class_name": "cd_player",
              "state": "CLOSED"
            },
            {
              "id": 1001,
              "class_name": "cd_player",
              "state": "ON"
            },
            {
              "id": 1001,
              "class_name": "cd_player",
              "state": "PLUGGED_IN"
            }
          ]
        },
        "tl_goal": "(CLOSED(cd_player.1001) and ON(cd_player.1001) and PLUGGED_IN(cd_player.1001))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <music_stand> (1000)",
          "[FIND] <music_stand> (1000)",
          "[TURNTO] <music_stand> (1000)",
          "[FIND] <cd_player> (1001)",
          "[SWITCHON] <cd_player> (1001)"
        ],
        "transition_model": "(define (problem Listen_to_music)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    music_stand bathroom home_office cd_player - object\n)\n    (:init\n    (surfaces music_stand)\n    (obj_next_to music_stand cd_player)\n    (obj_next_to cd_player music_stand)\n    (can_open music_stand)\n    (movable cd_player)\n    (containers music_stand)\n    (can_open cd_player)\n    (has_switch cd_player)\n    (obj_inside music_stand home_office)\n    (closed cd_player)\n    (clean cd_player)\n    (off cd_player)\n    (obj_inside cd_player home_office)\n    (plugged_in cd_player)\n    (grabbable cd_player)\n    (inside character bathroom)\n    (surfaces cd_player)\n    (has_plug cd_player)\n    (movable music_stand)\n)\n    (:goal\n    (and\n        (closed cd_player)\n        (on cd_player)\n        (plugged_in cd_player)\n    )\n)\n    )\n    "
      },
      "1057_1": {
        "task_name": "Watch TV",
        "natural_language_description": "Go to the living room, sit on the couch, find the remote, switch on the TV and watch",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office hair couch remote_control bedroom television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (body_part hair)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (movable hair)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (cuttable hair)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (grabbable hair)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "117_1": {
        "task_name": "Watch TV",
        "natural_language_description": "Go to the living room. Find the remote. Pick up the remote. Find the sofa. Sit on the sofa. Look at the television. Aim the remote at the television. Press the power button. Flip the channels.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)",
          "[TURNTO] <television> (410)",
          "[POINTAT] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[PUSH] <remote_control> (1000)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office couch remote_control television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_next_to television remote_control)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to remote_control television)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bathroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "134_1": {
        "task_name": "Watch TV",
        "natural_language_description": "watching TV from sofa",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <television> (410)",
          "[FIND] <television> (410)",
          "[PLUGIN] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[DROP] <remote_control> (1000)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office couch remote_control television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_next_to television remote_control)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to remote_control television)\n    (lieable couch)\n    (obj_next_to couch television)\n    (plugged_out television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bathroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "170_1": {
        "task_name": "Watch TV",
        "natural_language_description": "find the TV remote, Use the remote to turn on the TV, sit on the couch, watch te",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[FIND] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (plugged_in television)\n    (off television)\n    (obj_next_to couch television)\n    (clean television)\n    (surfaces couch)\n    (lookable television)\n    (obj_next_to television couch)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "197_2": {
        "task_name": "Watch TV",
        "natural_language_description": "i will walk into living room and the i will first take the remote control switch on tv after that i will watch all my favorite shows",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <chair> (356)",
          "[PULL] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <electrical_outlet> (1001)",
          "[SWITCHON] <electrical_outlet> (1001)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office remote_control electrical_outlet bedroom chair television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to chair remote_control)\n    (surfaces chair)\n    (clean television)\n    (obj_next_to television remote_control)\n    (clean electrical_outlet)\n    (obj_next_to electrical_outlet remote_control)\n    (movable chair)\n    (movable remote_control)\n    (obj_next_to chair television)\n    (obj_next_to chair electrical_outlet)\n    (obj_next_to remote_control television)\n    (sittable chair)\n    (plugged_in television)\n    (obj_inside electrical_outlet home_office)\n    (obj_next_to television chair)\n    (lookable television)\n    (has_switch electrical_outlet)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (obj_next_to electrical_outlet chair)\n    (off television)\n    (obj_next_to remote_control electrical_outlet)\n    (inside_room chair bedroom)\n    (grabbable chair)\n    (obj_next_to remote_control chair)\n    (off electrical_outlet)\n    (has_switch television)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_inside chair home_office)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "21_2": {
        "task_name": "Watch TV",
        "natural_language_description": "I go to living room, sit on sofa, find the remote control on the table, switch on TV and watch the TV.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <table> (355)",
          "[TURNTO] <table> (355)",
          "[LOOKAT] <table> (355)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[PUTOBJBACK] <remote_control> (1000)",
          "[TURNTO] <television> (410)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control table television dining_room - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (surfaces table)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (obj_next_to television table)\n    (obj_ontop remote_control table)\n    (movable remote_control)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (movable table)\n    (obj_next_to table television)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (inside character dining_room)\n    (movable couch)\n    (obj_next_to table couch)\n    (facing couch television)\n    (sittable couch)\n    (inside_room table dining_room)\n    (has_switch television)\n    (obj_inside table home_office)\n    (obj_inside television home_office)\n    (obj_next_to couch table)\n    (obj_inside table couch)\n    (obj_next_to television couch)\n    (facing table television)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "225_2": {
        "task_name": "Watch TV",
        "natural_language_description": "Sit down, turn on the TV with the remote control that is on the coffee table.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <coffee_table> (1000)",
          "[TURNTO] <coffee_table> (1000)",
          "[LOOKAT] <coffee_table> (1000)",
          "[FIND] <remote_control> (1001)",
          "[GRAB] <remote_control> (1001)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)",
          "[TURNTO] <television> (410)",
          "[POINTAT] <television> (410)",
          "[SWITCHON] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control coffee_table bedroom television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to couch coffee_table)\n    (movable coffee_table)\n    (lieable couch)\n    (obj_next_to coffee_table couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (obj_ontop remote_control coffee_table)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (surfaces coffee_table)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n    (obj_inside coffee_table home_office)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "259_1": {
        "task_name": "Watch TV",
        "natural_language_description": "stand up, walk to living room, find remote control, grab remote control, find couch, walk to couch, sit in couch, find television, lift remote control, switch on television, look at television",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[STANDUP]",
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <couch> (352)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control television dining_room - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (inside character dining_room)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "307_2": {
        "task_name": "Watch TV",
        "natural_language_description": "I go into the living room. I find the remote. I turn on the tv. I sit on the couch and watch tv.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[POINTAT] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control television dining_room - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_next_to television remote_control)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to remote_control television)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (inside character dining_room)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "329_1": {
        "task_name": "Watch TV",
        "natural_language_description": "Walk to living room, walk to TV, grab TV remote, turn on TV, put down the remote, walk to sofa, sit in soft, watch TV",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <television> (410)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[SWITCHON] <television> (410)",
          "[PUTOBJBACK] <remote_control> (1000)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control bedroom television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (clean television)\n    (surfaces couch)\n    (obj_next_to television remote_control)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to remote_control television)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "342_2": {
        "task_name": "Watch TV",
        "natural_language_description": "Turn on the TV, sit on the couch, find a show, and watch it.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <television> (410)",
          "[FIND] <television> (410)",
          "[FIND] <remote_control> (1000)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[SWITCHON] <television> (410)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control television dining_room - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (clean television)\n    (surfaces couch)\n    (obj_next_to television remote_control)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to remote_control television)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (inside character dining_room)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "377_2": {
        "task_name": "Watch TV",
        "natural_language_description": "Walk into the living room/den. Turn on the television. Switch channels to find a program with remote. I find a program and look at the screen.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <television> (410)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <remote_control> (1000)",
          "[TURNTO] <remote_control> (1000)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office remote_control dining_room television - object\n)\n    (:init\n    (grabbable remote_control)\n    (obj_next_to remote_control television)\n    (has_switch television)\n    (has_plug television)\n    (plugged_in television)\n    (off television)\n    (clean television)\n    (obj_next_to television remote_control)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (inside character dining_room)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (movable remote_control)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "383_2": {
        "task_name": "Watch TV",
        "natural_language_description": "Walk into the living room. Sit down on the sofa. Pick up the remote control. Turn on the television with the remote control. Put down the remote control. Watch the television.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[PUTOBJBACK] <remote_control> (1000)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office couch remote_control television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bathroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "411_1": {
        "task_name": "Watch TV",
        "natural_language_description": "Walk to Living room. Find Television. Walk to sofa. Sit on sofa. Find Remote. Grab remote. Turn to television. Look at television. Switch on Television.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <television> (410)",
          "[FIND] <television> (410)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)",
          "[SWITCHON] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office couch remote_control television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bathroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "454_2": {
        "task_name": "Watch TV",
        "natural_language_description": "Walk to the living room. Sit on the sofa. Grab the remote and turn on the television.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control bedroom television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "459_1": {
        "task_name": "Watch TV",
        "natural_language_description": "I walk into the living room. I sit on the couch. I pick up the remote control. I push the power button.  I push the guide button and look for my favorite show \"The Middle.\"  I click that channel and enjoy my show.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[PUSH] <remote_control> (1000)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control television dining_room - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (inside character dining_room)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "548_2": {
        "task_name": "Watch TV",
        "natural_language_description": "go to living room.Turn on TV with remote. Watch TV.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 248,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 248,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 248
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.248) and PLUGGED_IN(television.248) and FACING(character.65, television.248)))",
        "action_trajectory": [
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (248)",
          "[SWITCHON] <television> (248)",
          "[TURNTO] <television> (248)",
          "[LOOKAT] <television> (248)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    remote_control television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_switch television)\n    (has_plug television)\n    (plugged_in television)\n    (off television)\n    (clean television)\n    (lookable television)\n    (has_switch remote_control)\n    (movable remote_control)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "595_1": {
        "task_name": "Watch TV",
        "natural_language_description": "I walk into the living room and sit on the couch. I pick up the remote to turn on the television. I put down the remote on the coffee table and look at the television.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <coffee_table> (1001)",
          "[PUTBACK] <remote_control> (1000) <coffee_table> (1001)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control coffee_table bedroom television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to couch coffee_table)\n    (movable coffee_table)\n    (lieable couch)\n    (obj_next_to coffee_table couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (surfaces coffee_table)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n    (obj_inside coffee_table home_office)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "684_2": {
        "task_name": "Watch TV",
        "natural_language_description": "walk into the living room walk to the remote pick it up and turn in the tv and watch",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[POINTAT] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office remote_control dining_room television - object\n)\n    (:init\n    (grabbable remote_control)\n    (obj_next_to remote_control television)\n    (has_switch television)\n    (has_plug television)\n    (plugged_in television)\n    (off television)\n    (clean television)\n    (obj_next_to television remote_control)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (inside character dining_room)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (movable remote_control)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "74_1": {
        "task_name": "Watch TV",
        "natural_language_description": "Enter the living room, find TV remote, grab TV remote, switch on TV, find sofa, sit down on the sofa, watch TV",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <couch> (352)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office couch remote_control television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_next_to television remote_control)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to remote_control television)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bathroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "806_1": {
        "task_name": "Watch TV",
        "natural_language_description": "I will enter the room with the TV and walk to a remote. I'll pick up the remote and walk to a nearby couch or chair. I'll sit in the couch and use the remote to turn on the TV. I'll then select a channel to watch.",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[WALK] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <couch> (352)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[LOOKAT] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control television dining_room - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (inside character dining_room)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "98_1": {
        "task_name": "Watch TV",
        "natural_language_description": "Watching TV",
        "vh_goal": {
          "actions": [
            "LOOKAT|WATCH"
          ],
          "goal": [
            {
              "id": 410,
              "class_name": "television",
              "state": "ON"
            },
            {
              "id": 410,
              "class_name": "television",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 65,
              "relation_type": "FACING",
              "to_id": 410
            }
          ]
        },
        "tl_goal": "(exists x0. ((LOOKAT(x0) or WATCH(x0))) then (ON(television.410) and PLUGGED_IN(television.410) and FACING(character.65, television.410)))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <remote_control> (1000)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Watch_TV)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control bedroom television - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (obj_next_to television remote_control)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (obj_next_to remote_control television)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bedroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (on television)\n        (plugged_in television)\n        (facing character television)\n    )\n)\n    )\n    "
      },
      "1064_1": {
        "task_name": "Drink",
        "natural_language_description": "Drink water",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <water_glass> (1000)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    water_glass bedroom dining_room - object\n)\n    (:init\n    (inside character bedroom)\n    (pourable water_glass)\n    (inside_room water_glass dining_room)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (movable water_glass)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "156_1": {
        "task_name": "Drink",
        "natural_language_description": "Drink water from a cup",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, cup.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cup> (1000)",
          "[FIND] <cup> (1000)",
          "[GRAB] <cup> (1000)",
          "[FIND] <faucet> (232)",
          "[WALK] <sink> (231)",
          "[PUTBACK] <cup> (1000) <sink> (231)",
          "[SWITCHON] <faucet> (232)",
          "[SWITCHOFF] <faucet> (232)",
          "[GRAB] <cup> (1000)",
          "[DRINK] <cup> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office faucet cup sink kitchen_counter dining_room - object\n)\n    (:init\n    (containers sink)\n    (obj_next_to sink kitchen_counter)\n    (recipient cup)\n    (movable cup)\n    (inside_room cup dining_room)\n    (inside_room faucet dining_room)\n    (grabbable cup)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (inside_room kitchen_counter dining_room)\n    (obj_next_to faucet cup)\n    (obj_next_to sink cup)\n    (obj_next_to cup faucet)\n    (obj_next_to cup sink)\n    (obj_next_to kitchen_counter faucet)\n    (surfaces kitchen_counter)\n    (has_switch faucet)\n    (obj_ontop faucet kitchen_counter)\n    (obj_next_to faucet kitchen_counter)\n    (recipient sink)\n    (inside character home_office)\n    (obj_next_to faucet sink)\n    (obj_next_to kitchen_counter sink)\n    (pourable cup)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character cup)\n    )\n)\n    )\n    "
      },
      "171_2": {
        "task_name": "Drink",
        "natural_language_description": "Go to the kitchen, grab a cup from the cupboard, go to the sink, put cup under faucet, turn on faucet til cup is full, turn off faucet, drink from cup",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, cup.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cupboard> (229)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[FIND] <cup> (1000)",
          "[GRAB] <cup> (1000)",
          "[WALK] <sink> (231)",
          "[FIND] <faucet> (232)",
          "[TURNTO] <faucet> (232)",
          "[PUTBACK] <cup> (1000) <sink> (231)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <water> (1001)",
          "[GRAB] <cup> (1000)",
          "[PUTBACK] <cup> (1000) <sink> (231)",
          "[GRAB] <cup> (1000)",
          "[SWITCHOFF] <faucet> (232)",
          "[DRINK] <cup> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom faucet cup water sink kitchen_counter cupboard dining_room - object\n)\n    (:init\n    (containers sink)\n    (inside_room water dining_room)\n    (obj_next_to sink water)\n    (obj_next_to sink kitchen_counter)\n    (recipient cup)\n    (obj_next_to cupboard sink)\n    (movable cup)\n    (inside_room sink bathroom)\n    (obj_next_to faucet cupboard)\n    (inside_room cup dining_room)\n    (inside_room faucet dining_room)\n    (pourable water)\n    (grabbable cup)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (obj_inside cup cupboard)\n    (closed cupboard)\n    (inside_room kitchen_counter dining_room)\n    (obj_ontop faucet sink)\n    (obj_next_to cupboard kitchen_counter)\n    (obj_next_to sink cup)\n    (clean cupboard)\n    (inside_room cupboard dining_room)\n    (containers cupboard)\n    (can_open cupboard)\n    (obj_next_to cup sink)\n    (obj_next_to kitchen_counter faucet)\n    (obj_next_to cup cupboard)\n    (surfaces kitchen_counter)\n    (inside_room faucet bathroom)\n    (drinkable water)\n    (has_switch faucet)\n    (obj_ontop faucet kitchen_counter)\n    (obj_next_to faucet kitchen_counter)\n    (recipient sink)\n    (obj_next_to sink cupboard)\n    (obj_next_to cupboard cup)\n    (inside character bathroom)\n    (obj_next_to cupboard faucet)\n    (obj_next_to kitchen_counter cupboard)\n    (obj_next_to faucet sink)\n    (obj_next_to water sink)\n    (obj_next_to kitchen_counter sink)\n    (pourable cup)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character cup)\n    )\n)\n    )\n    "
      },
      "175_2": {
        "task_name": "Drink",
        "natural_language_description": "To go kitchen and find a cup. open the faucet and fill water in the cup and drink.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, cup.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <sink> (231)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <cup> (1000)",
          "[GRAB] <cup> (1000)",
          "[TURNTO] <faucet> (232)",
          "[POINTAT] <faucet> (232)",
          "[SWITCHOFF] <faucet> (232)",
          "[DRINK] <cup> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office faucet cup sink kitchen_counter dining_room - object\n)\n    (:init\n    (containers sink)\n    (obj_next_to sink kitchen_counter)\n    (recipient cup)\n    (movable cup)\n    (inside_room cup dining_room)\n    (inside_room faucet dining_room)\n    (grabbable cup)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (obj_ontop faucet sink)\n    (inside_room kitchen_counter dining_room)\n    (obj_next_to sink cup)\n    (obj_next_to cup sink)\n    (obj_next_to kitchen_counter faucet)\n    (surfaces kitchen_counter)\n    (has_switch faucet)\n    (obj_ontop faucet kitchen_counter)\n    (obj_next_to faucet kitchen_counter)\n    (recipient sink)\n    (inside character home_office)\n    (obj_next_to faucet sink)\n    (obj_next_to kitchen_counter sink)\n    (pourable cup)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character cup)\n    )\n)\n    )\n    "
      },
      "181_2": {
        "task_name": "Drink",
        "natural_language_description": "go to kitchen, find water glass and grab it, find fridge and open grab water and pour into it, then drink.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <water_glass> (1000)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[WALK] <water> (1001)",
          "[FIND] <water> (1001)",
          "[GRAB] <water> (1001)",
          "[POUR] <water> (1001) <water_glass> (1000)",
          "[CLOSE] <freezer> (289)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom freezer water_glass water dining_room - object\n)\n    (:init\n    (obj_next_to freezer water)\n    (inside_room water dining_room)\n    (inside_room freezer dining_room)\n    (has_switch freezer)\n    (pourable water)\n    (movable water_glass)\n    (pourable water_glass)\n    (inside_room water_glass dining_room)\n    (obj_next_to water freezer)\n    (obj_inside water freezer)\n    (can_open freezer)\n    (drinkable water)\n    (has_plug freezer)\n    (obj_next_to freezer water_glass)\n    (inside character bathroom)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (obj_next_to water_glass freezer)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "26_1": {
        "task_name": "Drink",
        "natural_language_description": "I go to the kitchen, I pour water into a glass, I go back to the living room, sit down, and drink it.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, cup.1000))",
        "action_trajectory": [
          "[STANDUP]",
          "[WALK] <dining_room> (201)",
          "[WALK] <cup> (1000)",
          "[FIND] <cup> (1000)",
          "[GRAB] <cup> (1000)",
          "[WALK] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <water> (1001)",
          "[FIND] <sink> (231)",
          "[PUTBACK] <cup> (1000) <sink> (231)",
          "[GRAB] <cup> (1000)",
          "[SWITCHOFF] <faucet> (232)",
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[DRINK] <cup> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet couch hair cup television - object\n)\n    (:init\n    (has_plug television)\n    (surfaces couch)\n    (recipient cup)\n    (movable cup)\n    (body_part hair)\n    (grabbable cup)\n    (lieable couch)\n    (movable hair)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to faucet cup)\n    (obj_next_to cup faucet)\n    (movable couch)\n    (cuttable hair)\n    (has_switch faucet)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (grabbable hair)\n    (obj_next_to television couch)\n    (pourable cup)\n)\n    (:goal\n    (and\n        (holds_rh character cup)\n    )\n)\n    )\n    "
      },
      "286_2": {
        "task_name": "Drink",
        "natural_language_description": "I enter the kitchen and grab a waterglass from the cupboard. I open the fridge and grap some water. I pour the water into the cup and drink it.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cupboard> (229)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[WALK] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[WALK] <water> (1001)",
          "[FIND] <water> (1001)",
          "[GRAB] <water> (1001)",
          "[POUR] <water> (1001) <water_glass> (1000)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom freezer water_glass water cupboard dining_room - object\n)\n    (:init\n    (inside_room water dining_room)\n    (inside_room freezer dining_room)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (has_switch freezer)\n    (obj_next_to freezer cupboard)\n    (obj_next_to water_glass cupboard)\n    (pourable water)\n    (obj_next_to cupboard freezer)\n    (obj_next_to cupboard water_glass)\n    (closed cupboard)\n    (movable water_glass)\n    (pourable water_glass)\n    (inside_room water_glass dining_room)\n    (clean cupboard)\n    (obj_inside water_glass cupboard)\n    (inside_room cupboard dining_room)\n    (obj_inside water freezer)\n    (containers cupboard)\n    (can_open freezer)\n    (can_open cupboard)\n    (drinkable water)\n    (has_plug freezer)\n    (inside character bathroom)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "291_1": {
        "task_name": "Drink",
        "natural_language_description": "GOING TO DRINK WATER IN KITCHEN",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <water> (1000)",
          "[FIND] <water> (1000)",
          "[GRAB] <water> (1000)",
          "[FIND] <water_glass> (1001)",
          "[POUR] <water> (1000) <water_glass> (1001)",
          "[GRAB] <water_glass> (1001)",
          "[DRINK] <water_glass> (1001)",
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office water_glass couch water television dining_room - object\n)\n    (:init\n    (has_plug television)\n    (inside_room water dining_room)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (pourable water)\n    (lieable couch)\n    (obj_next_to couch television)\n    (movable water_glass)\n    (pourable water_glass)\n    (lookable television)\n    (inside_room water_glass dining_room)\n    (obj_next_to water water_glass)\n    (obj_next_to water_glass water)\n    (drinkable water)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bathroom)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "317_2": {
        "task_name": "Drink",
        "natural_language_description": "I walk the kitchen and walk up to the kitchen cabinet. I open the cabinet and take out a cup. I walk to sink and I turn the faucet on using the cold water handle. I put my cup under the running water until it is full. I turn off the cold water handle and bring the cup to my mouth and take a drink.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, cup.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <kitchen_cabinet> (1000)",
          "[FIND] <kitchen_cabinet> (1000)",
          "[OPEN] <kitchen_cabinet> (1000)",
          "[FIND] <cup> (1001)",
          "[GRAB] <cup> (1001)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[WALK] <sink> (231)",
          "[FIND] <faucet> (232)",
          "[PUSH] <faucet> (232)",
          "[PUTBACK] <cup> (1001) <sink> (231)",
          "[GRAB] <cup> (1001)",
          "[SWITCHOFF] <faucet> (232)",
          "[DRINK] <cup> (1001)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom kitchen_cabinet faucet cup sink kitchen_counter dining_room - object\n)\n    (:init\n    (containers sink)\n    (obj_next_to sink kitchen_counter)\n    (recipient cup)\n    (movable cup)\n    (inside_room sink bathroom)\n    (inside_room cup dining_room)\n    (inside_room faucet dining_room)\n    (grabbable cup)\n    (obj_next_to faucet kitchen_cabinet)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (obj_ontop faucet sink)\n    (inside_room kitchen_counter dining_room)\n    (obj_next_to kitchen_cabinet faucet)\n    (obj_next_to sink cup)\n    (closed kitchen_cabinet)\n    (surfaces kitchen_cabinet)\n    (obj_next_to cup kitchen_cabinet)\n    (obj_inside cup kitchen_cabinet)\n    (clean kitchen_cabinet)\n    (obj_next_to kitchen_cabinet cup)\n    (obj_next_to cup sink)\n    (obj_next_to kitchen_counter faucet)\n    (surfaces kitchen_counter)\n    (inside_room faucet bathroom)\n    (has_switch faucet)\n    (obj_ontop faucet kitchen_counter)\n    (obj_next_to faucet kitchen_counter)\n    (containers kitchen_cabinet)\n    (recipient sink)\n    (inside_room kitchen_cabinet dining_room)\n    (inside character bathroom)\n    (obj_next_to faucet sink)\n    (can_open kitchen_cabinet)\n    (obj_next_to kitchen_counter sink)\n    (pourable cup)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character cup)\n    )\n)\n    )\n    "
      },
      "488_2": {
        "task_name": "Drink",
        "natural_language_description": "Walk to kitchen, grab a glass, walk to sink, turn on tap and pour water into glass, drink from glass.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, cup.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cup> (1000)",
          "[FIND] <cup> (1000)",
          "[GRAB] <cup> (1000)",
          "[WALK] <sink> (231)",
          "[WALK] <water> (1001)",
          "[FIND] <water> (1001)",
          "[GRAB] <water> (1001)",
          "[POUR] <water> (1001) <cup> (1000)",
          "[DRINK] <cup> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    cup water sink bedroom dining_room - object\n)\n    (:init\n    (recipient sink)\n    (inside_room sink dining_room)\n    (containers sink)\n    (inside_room water dining_room)\n    (obj_ontop water sink)\n    (recipient cup)\n    (inside character bedroom)\n    (movable cup)\n    (drinkable water)\n    (inside_room cup dining_room)\n    (pourable cup)\n    (pourable water)\n    (grabbable cup)\n)\n    (:goal\n    (and\n        (holds_rh character cup)\n    )\n)\n    )\n    "
      },
      "510_1": {
        "task_name": "Drink",
        "natural_language_description": "I walk to the kitchen. Take a glass out of the cabinet. Then I walk to the sink and turn the water on and fill the glass. Then I take a drink.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, drinking_glass.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <water> (1000)",
          "[FIND] <water> (1000)",
          "[GRAB] <water> (1000)",
          "[FIND] <drinking_glass> (1001)",
          "[POUR] <water> (1000) <drinking_glass> (1001)",
          "[FIND] <drinking_glass> (1001)",
          "[GRAB] <drinking_glass> (1001)",
          "[DRINK] <drinking_glass> (1001)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dining_room water drinking_glass - object\n)\n    (:init\n    (inside_room water dining_room)\n    (pourable drinking_glass)\n    (drinkable water)\n    (grabbable drinking_glass)\n    (inside character home_office)\n    (movable drinking_glass)\n    (obj_next_to drinking_glass water)\n    (obj_next_to water drinking_glass)\n    (inside_room drinking_glass dining_room)\n    (pourable water)\n    (recipient drinking_glass)\n)\n    (:goal\n    (and\n        (holds_rh character drinking_glass)\n    )\n)\n    )\n    "
      },
      "528_1": {
        "task_name": "Drink",
        "natural_language_description": "go to the kitchen",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, drinking_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <freezer> (289)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[FIND] <drinking_glass> (1000)",
          "[GRAB] <drinking_glass> (1000)",
          "[FIND] <water> (1001)",
          "[DRINK] <drinking_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office freezer water dining_room drinking_glass - object\n)\n    (:init\n    (obj_next_to freezer water)\n    (inside_room water dining_room)\n    (inside_room freezer dining_room)\n    (obj_inside drinking_glass freezer)\n    (grabbable drinking_glass)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (has_switch freezer)\n    (obj_next_to freezer drinking_glass)\n    (pourable water)\n    (pourable drinking_glass)\n    (obj_next_to water freezer)\n    (can_open freezer)\n    (containers freezer)\n    (drinkable water)\n    (movable drinking_glass)\n    (recipient drinking_glass)\n    (has_plug freezer)\n    (obj_next_to drinking_glass freezer)\n    (inside character home_office)\n    (inside_room drinking_glass dining_room)\n)\n    (:goal\n    (and\n        (holds_rh character drinking_glass)\n    )\n)\n    )\n    "
      },
      "532_1": {
        "task_name": "Drink",
        "natural_language_description": "I walk to the kitchen and open the cabinet containing the drinking glasses. I grab a drinking glass and close the cabinet. I bring the glass to the sink and turn on the faucet to cold. I move the glass under the stream of water and keep it there until the glass is 80% full of water. I move the glass away from the stream of water and shut off the faucet. I bring the cup to my mouth and drink the water.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, drinking_glass.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <kitchen_cabinet> (1000)",
          "[FIND] <kitchen_cabinet> (1000)",
          "[OPEN] <kitchen_cabinet> (1000)",
          "[FIND] <drinking_glass> (1001)",
          "[GRAB] <drinking_glass> (1001)",
          "[CLOSE] <kitchen_cabinet> (1000)",
          "[WALK] <sink> (231)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <water> (1002)",
          "[PUTBACK] <drinking_glass> (1001) <sink> (231)",
          "[GRAB] <drinking_glass> (1001)",
          "[SWITCHOFF] <faucet> (232)",
          "[DRINK] <drinking_glass> (1001)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom kitchen_cabinet faucet water sink kitchen_counter dining_room drinking_glass - object\n)\n    (:init\n    (containers sink)\n    (inside_room water dining_room)\n    (obj_next_to sink water)\n    (obj_next_to sink kitchen_counter)\n    (inside_room sink bathroom)\n    (grabbable drinking_glass)\n    (inside_room faucet dining_room)\n    (pourable water)\n    (obj_next_to water sink)\n    (obj_inside drinking_glass kitchen_cabinet)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (obj_ontop faucet sink)\n    (inside_room kitchen_counter dining_room)\n    (surfaces kitchen_cabinet)\n    (pourable drinking_glass)\n    (obj_next_to drinking_glass kitchen_cabinet)\n    (obj_next_to sink drinking_glass)\n    (obj_next_to kitchen_counter faucet)\n    (surfaces kitchen_counter)\n    (inside_room faucet bathroom)\n    (drinkable water)\n    (movable drinking_glass)\n    (has_switch faucet)\n    (obj_next_to kitchen_cabinet drinking_glass)\n    (obj_ontop faucet kitchen_counter)\n    (recipient drinking_glass)\n    (obj_next_to faucet kitchen_counter)\n    (containers kitchen_cabinet)\n    (recipient sink)\n    (inside_room kitchen_cabinet dining_room)\n    (inside character bathroom)\n    (obj_next_to drinking_glass sink)\n    (obj_next_to faucet sink)\n    (can_open kitchen_cabinet)\n    (obj_next_to kitchen_counter sink)\n    (inside_room drinking_glass dining_room)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character drinking_glass)\n    )\n)\n    )\n    "
      },
      "589_1": {
        "task_name": "Drink",
        "natural_language_description": "I go to the kitchen. I get a glass. I fill it with water. I take a drink from the glass.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, cup.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cup> (1000)",
          "[FIND] <cup> (1000)",
          "[GRAB] <cup> (1000)",
          "[WALK] <water> (1001)",
          "[FIND] <water> (1001)",
          "[GRAB] <water> (1001)",
          "[POUR] <water> (1001) <cup> (1000)",
          "[DRINK] <cup> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom dining_room cup water - object\n)\n    (:init\n    (inside_room water dining_room)\n    (recipient cup)\n    (inside character bedroom)\n    (movable cup)\n    (drinkable water)\n    (inside_room cup dining_room)\n    (pourable cup)\n    (pourable water)\n    (grabbable cup)\n)\n    (:goal\n    (and\n        (holds_rh character cup)\n    )\n)\n    )\n    "
      },
      "600_1": {
        "task_name": "Drink",
        "natural_language_description": "walk to kitchen ,find fridge ,open fridge ,find water  glass , drink from water glass",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <freezer> (289)",
          "[FIND] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    freezer bathroom dining_room water_glass - object\n)\n    (:init\n    (has_plug freezer)\n    (obj_inside water_glass freezer)\n    (can_open freezer)\n    (obj_next_to freezer water_glass)\n    (inside character bathroom)\n    (movable water_glass)\n    (pourable water_glass)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (inside_room water_glass dining_room)\n    (obj_next_to water_glass freezer)\n    (inside_room freezer dining_room)\n    (closed freezer)\n    (plugged_in freezer)\n    (clean freezer)\n    (has_switch freezer)\n    (containers freezer)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "662_1": {
        "task_name": "Drink",
        "natural_language_description": "Walk to kitchen. Find water glass. Grab water glass. Find water. Pour water in water glass. Drink water from water glass.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <water_glass> (1000)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[WALK] <water> (1001)",
          "[FIND] <water> (1001)",
          "[GRAB] <water> (1001)",
          "[POUR] <water> (1001) <water_glass> (1000)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    water_glass bedroom dining_room water - object\n)\n    (:init\n    (inside_room water dining_room)\n    (inside character bedroom)\n    (pourable water_glass)\n    (movable water_glass)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (inside_room water_glass dining_room)\n    (drinkable water)\n    (pourable water)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "688_1": {
        "task_name": "Drink",
        "natural_language_description": "I am thirsty and need to drink some water. Unfortunately, I am out of water bottles so I must get some tap water from the sink.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then (HOLDS_RH(character.65, water_glass.1000) and HOLDS_LH(character.65, water_glass.1000)))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cupboard> (229)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[CLOSE] <cupboard> (229)",
          "[WALK] <sink> (231)",
          "[PUTBACK] <water_glass> (1000) <sink> (231)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <water> (1001)",
          "[GRAB] <water_glass> (1000)",
          "[PUTBACK] <water_glass> (1000) <sink> (231)",
          "[GRAB] <water_glass> (1000)",
          "[SWITCHOFF] <faucet> (232)",
          "[GRAB] <water_glass> (1000)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office water_glass faucet water sink kitchen_counter cupboard dining_room - object\n)\n    (:init\n    (containers sink)\n    (inside_room water dining_room)\n    (obj_next_to sink water)\n    (obj_next_to sink kitchen_counter)\n    (obj_next_to cupboard sink)\n    (obj_next_to faucet cupboard)\n    (inside_room faucet dining_room)\n    (obj_next_to water_glass cupboard)\n    (pourable water)\n    (obj_next_to cupboard water_glass)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (obj_next_to sink water_glass)\n    (inside_room kitchen_counter dining_room)\n    (movable water_glass)\n    (pourable water_glass)\n    (inside_room water_glass dining_room)\n    (obj_next_to cupboard kitchen_counter)\n    (obj_inside water_glass cupboard)\n    (inside_room cupboard dining_room)\n    (containers cupboard)\n    (can_open cupboard)\n    (obj_next_to water_glass sink)\n    (obj_next_to kitchen_counter faucet)\n    (surfaces kitchen_counter)\n    (drinkable water)\n    (has_switch faucet)\n    (obj_ontop faucet kitchen_counter)\n    (obj_next_to faucet kitchen_counter)\n    (recipient sink)\n    (obj_next_to sink cupboard)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (obj_next_to cupboard faucet)\n    (obj_next_to kitchen_counter cupboard)\n    (inside character home_office)\n    (obj_next_to faucet sink)\n    (obj_next_to water sink)\n    (obj_next_to kitchen_counter sink)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n        (holds_lh character water_glass)\n    )\n)\n    )\n    "
      },
      "787_1": {
        "task_name": "Drink",
        "natural_language_description": "I walk to the kitchen. I find a cup. I pick up the cup. I find the water faucet. I turn on the water faucet. I fill the cup. I turn off the water faucet. I drink the water.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <water_glass> (1000)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <water> (1001)",
          "[FIND] <sink> (231)",
          "[PUTBACK] <water_glass> (1000) <sink> (231)",
          "[GRAB] <water_glass> (1000)",
          "[SWITCHOFF] <faucet> (232)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom water_glass faucet water sink kitchen_counter dining_room - object\n)\n    (:init\n    (containers sink)\n    (inside_room water dining_room)\n    (obj_next_to sink kitchen_counter)\n    (inside_room sink bathroom)\n    (inside_room faucet dining_room)\n    (pourable water)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (obj_next_to sink water_glass)\n    (inside_room kitchen_counter dining_room)\n    (movable water_glass)\n    (pourable water_glass)\n    (inside_room water_glass dining_room)\n    (obj_next_to water_glass faucet)\n    (obj_next_to faucet water_glass)\n    (obj_next_to water water_glass)\n    (obj_next_to water_glass sink)\n    (obj_next_to kitchen_counter faucet)\n    (obj_next_to water_glass water)\n    (surfaces kitchen_counter)\n    (inside_room faucet bathroom)\n    (drinkable water)\n    (has_switch faucet)\n    (obj_ontop faucet kitchen_counter)\n    (obj_next_to faucet kitchen_counter)\n    (recipient sink)\n    (inside character bathroom)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (obj_next_to faucet sink)\n    (obj_next_to kitchen_counter sink)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "788_1": {
        "task_name": "Drink",
        "natural_language_description": "I go to the kitchen to get a glass from the cabinet. I turn on the faucet and fill up the glass. I take a drink.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, drinking_glass.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <kitchen_cabinet> (1000)",
          "[FIND] <kitchen_cabinet> (1000)",
          "[OPEN] <kitchen_cabinet> (1000)",
          "[FIND] <drinking_glass> (1001)",
          "[GRAB] <drinking_glass> (1001)",
          "[WALK] <sink> (231)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[PUTBACK] <drinking_glass> (1001) <sink> (231)",
          "[FIND] <water> (1002)",
          "[GRAB] <drinking_glass> (1001)",
          "[PUTBACK] <drinking_glass> (1001) <sink> (231)",
          "[GRAB] <drinking_glass> (1001)",
          "[DRINK] <drinking_glass> (1001)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom kitchen_cabinet faucet water sink kitchen_counter dining_room drinking_glass - object\n)\n    (:init\n    (containers sink)\n    (inside_room water dining_room)\n    (obj_next_to sink water)\n    (obj_next_to sink kitchen_counter)\n    (inside_room sink bathroom)\n    (grabbable drinking_glass)\n    (inside_room faucet dining_room)\n    (pourable water)\n    (obj_next_to water sink)\n    (obj_inside drinking_glass kitchen_cabinet)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (off faucet)\n    (inside_room kitchen_counter dining_room)\n    (obj_ontop faucet sink)\n    (closed kitchen_cabinet)\n    (surfaces kitchen_cabinet)\n    (pourable drinking_glass)\n    (obj_next_to drinking_glass kitchen_cabinet)\n    (obj_next_to sink drinking_glass)\n    (clean kitchen_cabinet)\n    (obj_next_to kitchen_counter faucet)\n    (surfaces kitchen_counter)\n    (inside_room faucet bathroom)\n    (drinkable water)\n    (movable drinking_glass)\n    (has_switch faucet)\n    (obj_next_to kitchen_cabinet drinking_glass)\n    (obj_ontop faucet kitchen_counter)\n    (recipient drinking_glass)\n    (obj_next_to faucet kitchen_counter)\n    (clean faucet)\n    (containers kitchen_cabinet)\n    (recipient sink)\n    (inside_room kitchen_cabinet dining_room)\n    (inside character bathroom)\n    (obj_next_to drinking_glass sink)\n    (obj_next_to faucet sink)\n    (can_open kitchen_cabinet)\n    (obj_next_to kitchen_counter sink)\n    (inside_room drinking_glass dining_room)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character drinking_glass)\n    )\n)\n    )\n    "
      },
      "814_1": {
        "task_name": "Drink",
        "natural_language_description": "I walk to the kitchen. open the cupboard. Find the water glass, grab it. Fill the glass with water and drink water.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cupboard> (229)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[WALK] <water> (1001)",
          "[FIND] <water> (1001)",
          "[GRAB] <water> (1001)",
          "[POUR] <water> (1001) <water_glass> (1000)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office water_glass water cupboard dining_room - object\n)\n    (:init\n    (containers cupboard)\n    (obj_next_to cupboard water_glass)\n    (can_open cupboard)\n    (inside_room water dining_room)\n    (obj_inside water cupboard)\n    (inside_room cupboard dining_room)\n    (closed cupboard)\n    (movable water_glass)\n    (pourable water_glass)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (inside_room water_glass dining_room)\n    (drinkable water)\n    (inside character home_office)\n    (obj_inside water_glass cupboard)\n    (clean cupboard)\n    (obj_next_to water_glass cupboard)\n    (pourable water)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "850_2": {
        "task_name": "Drink",
        "natural_language_description": "I walk into the kitchen. I reach into the cabinet and pick up a water glass. Turn on the faucet and place the glass under the water stream. Bring the glass of water to lips and drink.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1001))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <kitchen_cabinet> (1000)",
          "[FIND] <kitchen_cabinet> (1000)",
          "[OPEN] <kitchen_cabinet> (1000)",
          "[FIND] <water_glass> (1001)",
          "[GRAB] <water_glass> (1001)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[DRINK] <water_glass> (1001)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office kitchen_cabinet water_glass faucet dining_room - object\n)\n    (:init\n    (inside_room faucet dining_room)\n    (obj_inside water_glass kitchen_cabinet)\n    (obj_next_to faucet kitchen_cabinet)\n    (off faucet)\n    (movable water_glass)\n    (pourable water_glass)\n    (inside_room water_glass dining_room)\n    (obj_next_to kitchen_cabinet faucet)\n    (closed kitchen_cabinet)\n    (surfaces kitchen_cabinet)\n    (obj_next_to water_glass kitchen_cabinet)\n    (obj_next_to kitchen_cabinet water_glass)\n    (clean kitchen_cabinet)\n    (has_switch faucet)\n    (clean faucet)\n    (containers kitchen_cabinet)\n    (inside_room kitchen_cabinet dining_room)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (inside character home_office)\n    (can_open kitchen_cabinet)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "861_2": {
        "task_name": "Drink",
        "natural_language_description": "I go in the kitchen and get the glass near the sink. I open the faucet, then I pour water in it, turn off the faucet and drink it.",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, cup.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <sink> (231)",
          "[FIND] <cup> (1000)",
          "[GRAB] <cup> (1000)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <water> (1001)",
          "[PUTBACK] <cup> (1000) <sink> (231)",
          "[GRAB] <cup> (1000)",
          "[SWITCHOFF] <faucet> (232)",
          "[DRINK] <cup> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet cup water sink kitchen_counter bedroom dining_room - object\n)\n    (:init\n    (containers sink)\n    (inside_room water dining_room)\n    (obj_next_to sink water)\n    (obj_next_to sink kitchen_counter)\n    (recipient cup)\n    (movable cup)\n    (inside_room cup dining_room)\n    (inside_room faucet dining_room)\n    (pourable water)\n    (grabbable cup)\n    (inside_room sink dining_room)\n    (obj_next_to sink faucet)\n    (inside_room kitchen_counter dining_room)\n    (obj_next_to sink cup)\n    (obj_next_to cup sink)\n    (obj_next_to kitchen_counter faucet)\n    (surfaces kitchen_counter)\n    (drinkable water)\n    (has_switch faucet)\n    (inside_room cup bedroom)\n    (obj_ontop faucet kitchen_counter)\n    (obj_ontop cup sink)\n    (obj_next_to faucet kitchen_counter)\n    (recipient sink)\n    (inside character bedroom)\n    (obj_next_to faucet sink)\n    (obj_next_to water sink)\n    (obj_next_to kitchen_counter sink)\n    (pourable cup)\n    (obj_inside sink kitchen_counter)\n)\n    (:goal\n    (and\n        (holds_rh character cup)\n    )\n)\n    )\n    "
      },
      "878_2": {
        "task_name": "Drink",
        "natural_language_description": "I need to go to Kitchen.  Get a cup.  Fill cup.  Drink",
        "vh_goal": {
          "actions": [
            "DRINK"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. (DRINK(x0)) then HOLDS_RH(character.65, water_glass.1000))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cupboard> (229)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[WALK] <freezer> (289)",
          "[WALK] <water> (1001)",
          "[FIND] <water> (1001)",
          "[GRAB] <water> (1001)",
          "[POUR] <water> (1001) <water_glass> (1000)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Drink)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office water_glass water cupboard dining_room - object\n)\n    (:init\n    (containers cupboard)\n    (obj_next_to cupboard water_glass)\n    (can_open cupboard)\n    (inside_room water dining_room)\n    (obj_inside water cupboard)\n    (inside_room cupboard dining_room)\n    (closed cupboard)\n    (movable water_glass)\n    (pourable water_glass)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (inside_room water_glass dining_room)\n    (drinkable water)\n    (inside character home_office)\n    (obj_inside water_glass cupboard)\n    (clean cupboard)\n    (obj_next_to water_glass cupboard)\n    (pourable water)\n)\n    (:goal\n    (and\n        (holds_rh character water_glass)\n    )\n)\n    )\n    "
      },
      "1073_1": {
        "task_name": "Read book",
        "natural_language_description": "Walk to home office, turn on light, grab a book, sit in chair, start to read the book",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel home_office light computer chair dining_room - object\n)\n    (:init\n    (obj_next_to computer light)\n    (surfaces chair)\n    (has_plug light)\n    (has_switch light)\n    (facing chair computer)\n    (readable novel)\n    (obj_next_to light computer)\n    (movable chair)\n    (obj_next_to light novel)\n    (plugged_in light)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_next_to light chair)\n    (obj_next_to light light)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (obj_next_to novel light)\n    (clean light)\n    (movable novel)\n    (cuttable novel)\n    (grabbable chair)\n    (obj_next_to chair light)\n    (inside character dining_room)\n    (grabbable novel)\n    (lookable computer)\n    (can_open novel)\n    (obj_inside computer home_office)\n    (off light)\n    (obj_inside chair home_office)\n    (obj_next_to chair computer)\n    (inside_room light dining_room)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "1088_1": {
        "task_name": "Read book",
        "natural_language_description": "I go to the book case, I select a book, I go back and sit down, then I read.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <filing_cabinet> (399)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[WALK] <couch> (352)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch filing_cabinet novel - object\n)\n    (:init\n    (can_open filing_cabinet)\n    (containers filing_cabinet)\n    (surfaces filing_cabinet)\n    (lieable couch)\n    (movable novel)\n    (obj_ontop novel filing_cabinet)\n    (cuttable novel)\n    (obj_next_to novel filing_cabinet)\n    (surfaces couch)\n    (has_paper novel)\n    (movable couch)\n    (obj_next_to filing_cabinet novel)\n    (grabbable novel)\n    (readable novel)\n    (sittable couch)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "15_2": {
        "task_name": "Read book",
        "natural_language_description": "Open coffee maker. Put filter in main basket, put ground coffee in filter, fill reservoir with water, turn on coffee maker.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, address_book.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <address_book> (1000)",
          "[FIND] <address_book> (1000)",
          "[GRAB] <address_book> (1000)",
          "[READ] <address_book> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office address_book - object\n)\n    (:init\n    (can_open address_book)\n    (grabbable address_book)\n    (readable address_book)\n    (inside character bathroom)\n    (has_paper address_book)\n    (cuttable address_book)\n    (obj_inside address_book home_office)\n    (movable address_book)\n)\n    (:goal\n    (and\n        (holds_rh character address_book)\n    )\n)\n    )\n    "
      },
      "163_1": {
        "task_name": "Read book",
        "natural_language_description": "Take a book, open it and read it",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <novel> (1000)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom novel home_office computer chair - object\n)\n    (:init\n    (surfaces chair)\n    (facing chair computer)\n    (readable novel)\n    (movable chair)\n    (obj_next_to novel chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (obj_next_to chair novel)\n    (movable novel)\n    (cuttable novel)\n    (grabbable chair)\n    (grabbable novel)\n    (lookable computer)\n    (can_open novel)\n    (obj_inside computer home_office)\n    (inside character bathroom)\n    (obj_inside chair home_office)\n    (obj_next_to chair computer)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "16_2": {
        "task_name": "Read book",
        "natural_language_description": "I walk to the living room and pick up a book from the coffee table. I find my favorite chair.  I sit in the armchair and open the book.  I read.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <novel> (1000)",
          "[FIND] <novel> (1000)",
          "[WALK] <coffee_table> (1001)",
          "[GRAB] <novel> (1000)",
          "[WALK] <chair> (356)",
          "[SIT] <chair> (356)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel home_office coffee_table computer chair dining_room - object\n)\n    (:init\n    (obj_next_to coffee_table novel)\n    (surfaces chair)\n    (obj_next_to novel coffee_table)\n    (facing chair computer)\n    (readable novel)\n    (movable chair)\n    (obj_next_to computer chair)\n    (movable coffee_table)\n    (sittable chair)\n    (has_switch computer)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (movable novel)\n    (cuttable novel)\n    (grabbable chair)\n    (inside character dining_room)\n    (grabbable novel)\n    (lookable computer)\n    (can_open novel)\n    (surfaces coffee_table)\n    (obj_inside computer home_office)\n    (obj_ontop novel coffee_table)\n    (obj_inside chair home_office)\n    (obj_inside coffee_table home_office)\n    (obj_next_to chair computer)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "192_1": {
        "task_name": "Read book",
        "natural_language_description": "Take a book from the shelf, sit on sofa and start reading.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch novel - object\n)\n    (:init\n    (obj_next_to couch novel)\n    (lieable couch)\n    (movable novel)\n    (cuttable novel)\n    (surfaces couch)\n    (has_paper novel)\n    (movable couch)\n    (grabbable novel)\n    (obj_next_to novel couch)\n    (readable novel)\n    (sittable couch)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "208_2": {
        "task_name": "Read book",
        "natural_language_description": "Turn a light on and read a book in the bedroom.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1001))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <floor_lamp> (1000)",
          "[FIND] <floor_lamp> (1000)",
          "[SWITCHON] <floor_lamp> (1000)",
          "[FIND] <novel> (1001)",
          "[GRAB] <novel> (1001)",
          "[READ] <novel> (1001)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel home_office hair bedroom floor_lamp - object\n)\n    (:init\n    (obj_inside hair home_office)\n    (body_part hair)\n    (readable novel)\n    (clean floor_lamp)\n    (movable hair)\n    (has_paper novel)\n    (obj_next_to novel floor_lamp)\n    (has_switch floor_lamp)\n    (movable novel)\n    (obj_next_to floor_lamp novel)\n    (cuttable novel)\n    (off floor_lamp)\n    (movable floor_lamp)\n    (inside_room novel bedroom)\n    (cuttable hair)\n    (grabbable novel)\n    (can_open novel)\n    (plugged_out floor_lamp)\n    (grabbable hair)\n    (inside_room floor_lamp bedroom)\n    (inside character home_office)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "221_2": {
        "task_name": "Read book",
        "natural_language_description": "I open up my book to where my bookmark is, and then i begin reading to the end of the page. Then I turn the page and read to the end of the next and so on.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1001))",
        "action_trajectory": [
          "[FIND] <bookmark> (1000)",
          "[TOUCH] <bookmark> (1000)",
          "[FIND] <novel> (1001)",
          "[GRAB] <novel> (1001)",
          "[READ] <novel> (1001)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel - object\n)\n    (:init\n    (movable novel)\n    (cuttable novel)\n    (has_paper novel)\n    (grabbable novel)\n    (readable novel)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "241_2": {
        "task_name": "Read book",
        "natural_language_description": "Find book. Pick up book. Open book. Read the book.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[STANDUP]",
          "[WALK] <home_office> (319)",
          "[WALK] <novel> (1000)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[TURNTO] <novel> (1000)",
          "[LOOKAT] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom novel home_office - object\n)\n    (:init\n    (movable novel)\n    (cuttable novel)\n    (obj_inside novel home_office)\n    (inside character bathroom)\n    (sitting character)\n    (has_paper novel)\n    (grabbable novel)\n    (readable novel)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "341_1": {
        "task_name": "Read book",
        "natural_language_description": "I finish of washes dishes, go to the living room, pick my book and read a while",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 1003
            },
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1001
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then (HOLDS_LH(character.65, spectacles.1003) and HOLDS_RH(character.65, novel.1001)))",
        "action_trajectory": [
          "[FIND] <plate> (1000)",
          "[GRAB] <plate> (1000)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[PUTBACK] <plate> (1000) <cupboard> (229)",
          "[WALK] <home_office> (319)",
          "[WALK] <novel> (1001)",
          "[FIND] <novel> (1001)",
          "[GRAB] <novel> (1001)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <coffee_table> (1002)",
          "[TOUCH] <coffee_table> (1002)",
          "[FIND] <spectacles> (1003)",
          "[GRAB] <spectacles> (1003)",
          "[READ] <novel> (1001)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel home_office couch coffee_table spectacles cupboard plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (obj_next_to coffee_table novel)\n    (movable spectacles)\n    (obj_next_to novel coffee_table)\n    (surfaces couch)\n    (obj_next_to couch spectacles)\n    (grabbable spectacles)\n    (obj_inside couch home_office)\n    (obj_inside spectacles home_office)\n    (obj_next_to spectacles couch)\n    (readable novel)\n    (obj_next_to novel spectacles)\n    (obj_next_to couch coffee_table)\n    (grabbable plate)\n    (lieable couch)\n    (movable coffee_table)\n    (obj_next_to coffee_table couch)\n    (closed cupboard)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (clean cupboard)\n    (inside_room cupboard dining_room)\n    (surfaces plate)\n    (obj_inside novel cupboard)\n    (obj_next_to couch novel)\n    (containers cupboard)\n    (movable novel)\n    (can_open cupboard)\n    (obj_next_to spectacles novel)\n    (cuttable novel)\n    (inside character dining_room)\n    (movable couch)\n    (grabbable novel)\n    (obj_next_to novel couch)\n    (sittable couch)\n    (can_open novel)\n    (surfaces coffee_table)\n    (movable plate)\n    (clothes spectacles)\n    (obj_inside spectacles cupboard)\n    (obj_inside coffee_table home_office)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n        (holds_lh character spectacles)\n    )\n)\n    )\n    "
      },
      "484_1": {
        "task_name": "Read book",
        "natural_language_description": "I walk into the living room. I pick up a book. I sit down in a chair and read the book.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <novel> (1000)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel home_office bedroom chair computer - object\n)\n    (:init\n    (surfaces chair)\n    (facing chair computer)\n    (readable novel)\n    (movable chair)\n    (obj_next_to novel chair)\n    (obj_next_to computer chair)\n    (sittable chair)\n    (has_switch computer)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (obj_next_to chair novel)\n    (movable novel)\n    (cuttable novel)\n    (inside_room chair bedroom)\n    (grabbable chair)\n    (grabbable novel)\n    (lookable computer)\n    (can_open novel)\n    (obj_inside computer home_office)\n    (inside character bedroom)\n    (inside_room computer bedroom)\n    (obj_inside chair home_office)\n    (obj_next_to chair computer)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "504_2": {
        "task_name": "Read book",
        "natural_language_description": "I find my favorite book then I sit down open the book and begin reading it",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[FIND] <desk> (104)",
          "[FIND] <chair> (103)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel - object\n)\n    (:init\n    (movable novel)\n    (cuttable novel)\n    (has_paper novel)\n    (grabbable novel)\n    (readable novel)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "508_2": {
        "task_name": "Read book",
        "natural_language_description": "go to bedroom, sit down, pick up book, read",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <novel> (1000)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office novel - object\n)\n    (:init\n    (movable novel)\n    (cuttable novel)\n    (obj_inside novel home_office)\n    (inside character bedroom)\n    (has_paper novel)\n    (grabbable novel)\n    (readable novel)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "544_1": {
        "task_name": "Read book",
        "natural_language_description": "pick up your book and read it",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office novel - object\n)\n    (:init\n    (movable novel)\n    (cuttable novel)\n    (has_paper novel)\n    (inside_room novel bedroom)\n    (inside character home_office)\n    (grabbable novel)\n    (readable novel)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "57_1": {
        "task_name": "Read book",
        "natural_language_description": "Walk to the couch in the living room, sit on ti and read the book",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom couch home_office novel - object\n)\n    (:init\n    (obj_next_to couch novel)\n    (lieable couch)\n    (movable novel)\n    (cuttable novel)\n    (surfaces couch)\n    (obj_inside novel home_office)\n    (inside character bathroom)\n    (has_paper novel)\n    (movable couch)\n    (obj_inside couch home_office)\n    (grabbable novel)\n    (obj_next_to novel couch)\n    (readable novel)\n    (sittable couch)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "617_2": {
        "task_name": "Read book",
        "natural_language_description": "Go to the bedroom. Grab the book out of the nightstand. Lay down in bed. Open the book. Read the book.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <nightstand> (100)",
          "[FIND] <nightstand> (100)",
          "[OPEN] <nightstand> (100)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[FIND] <bed> (105)",
          "[TURNTO] <bed> (105)",
          "[SIT] <bed> (105)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    nightstand novel home_office bedroom drawing tablelamp bed - object\n)\n    (:init\n    (has_paper drawing)\n    (obj_next_to drawing drawing)\n    (inside_room nightstand bedroom)\n    (sittable bed)\n    (obj_next_to nightstand novel)\n    (readable novel)\n    (has_switch tablelamp)\n    (obj_next_to bed nightstand)\n    (lieable bed)\n    (obj_next_to tablelamp nightstand)\n    (obj_next_to bed tablelamp)\n    (clean nightstand)\n    (facing drawing drawing)\n    (has_paper novel)\n    (grabbable drawing)\n    (closed nightstand)\n    (lookable drawing)\n    (surfaces bed)\n    (obj_inside novel nightstand)\n    (containers nightstand)\n    (movable novel)\n    (surfaces nightstand)\n    (cuttable novel)\n    (obj_next_to novel nightstand)\n    (inside_room bed bedroom)\n    (inside_room tablelamp bedroom)\n    (inside_room novel bedroom)\n    (facing nightstand drawing)\n    (cuttable drawing)\n    (grabbable novel)\n    (facing tablelamp drawing)\n    (obj_next_to tablelamp bed)\n    (can_open novel)\n    (facing bed drawing)\n    (obj_next_to nightstand tablelamp)\n    (can_open nightstand)\n    (inside character home_office)\n    (inside_room drawing bedroom)\n    (movable drawing)\n    (obj_ontop tablelamp nightstand)\n    (obj_next_to nightstand bed)\n    (obj_inside drawing home_office)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "628_1": {
        "task_name": "Read book",
        "natural_language_description": "I go to the living room, take a book from the shelf, sit in the sofa and read the book",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <novel> (1000)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom novel home_office couch television - object\n)\n    (:init\n    (has_plug television)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (readable novel)\n    (lieable couch)\n    (obj_next_to couch television)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (lookable television)\n    (obj_next_to couch novel)\n    (movable novel)\n    (cuttable novel)\n    (movable couch)\n    (grabbable novel)\n    (obj_next_to novel couch)\n    (facing couch television)\n    (sittable couch)\n    (can_open novel)\n    (has_switch television)\n    (inside character bathroom)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "688_2": {
        "task_name": "Read book",
        "natural_language_description": "I want to read a book in my living room, but must first put my reading glasses on and turn the light by the couch on so I can see what I am reading.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <novel> (1000)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[FIND] <spectacles> (1001)",
          "[GRAB] <spectacles> (1001)",
          "[PUTON] <spectacles> (1001)",
          "[FIND] <light> (411)",
          "[PLUGIN] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[TURNTO] <novel> (1000)",
          "[LOOKAT] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel home_office couch light bedroom spectacles - object\n)\n    (:init\n    (has_switch light)\n    (has_plug light)\n    (movable spectacles)\n    (surfaces couch)\n    (inside_room light bedroom)\n    (grabbable spectacles)\n    (obj_inside couch home_office)\n    (obj_inside spectacles home_office)\n    (readable novel)\n    (obj_next_to light novel)\n    (obj_next_to novel spectacles)\n    (lieable couch)\n    (plugged_out light)\n    (obj_next_to light light)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (obj_next_to novel light)\n    (obj_next_to couch novel)\n    (clean light)\n    (movable novel)\n    (obj_next_to spectacles novel)\n    (cuttable novel)\n    (movable couch)\n    (grabbable novel)\n    (obj_next_to novel couch)\n    (sittable couch)\n    (can_open novel)\n    (clothes spectacles)\n    (inside character bedroom)\n    (off light)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "693_2": {
        "task_name": "Read book",
        "natural_language_description": "Go to bedroom, find a book I like, pull out a chair, sit in it and open the book to read",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <novel> (1000)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[FIND] <chair> (103)",
          "[PULL] <chair> (103)",
          "[SIT] <chair> (103)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom bedroom chair novel - object\n)\n    (:init\n    (sittable chair)\n    (movable novel)\n    (surfaces chair)\n    (cuttable novel)\n    (inside_room chair bedroom)\n    (inside character bathroom)\n    (has_paper novel)\n    (grabbable chair)\n    (movable chair)\n    (inside_room novel bedroom)\n    (grabbable novel)\n    (readable novel)\n    (obj_next_to chair novel)\n    (can_open novel)\n    (obj_next_to novel chair)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "821_1": {
        "task_name": "Read book",
        "natural_language_description": "I walk to home office and search for a book, and sit to the chair with a table, and start reading.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <chair> (356)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom novel home_office chair - object\n)\n    (:init\n    (sittable chair)\n    (movable novel)\n    (surfaces chair)\n    (cuttable novel)\n    (obj_inside novel home_office)\n    (inside character bathroom)\n    (has_paper novel)\n    (grabbable chair)\n    (movable chair)\n    (obj_inside chair home_office)\n    (grabbable novel)\n    (readable novel)\n    (obj_next_to chair novel)\n    (can_open novel)\n    (obj_next_to novel chair)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "86_1": {
        "task_name": "Read book",
        "natural_language_description": "Walk to the Living Room. Look at the Cabinet. Find a Textbook. Grab the textbook. Open the Textbook. Read the textbook.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <filing_cabinet> (399)",
          "[FIND] <filing_cabinet> (399)",
          "[TURNTO] <filing_cabinet> (399)",
          "[LOOKAT] <filing_cabinet> (399)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    filing_cabinet bathroom novel home_office - object\n)\n    (:init\n    (can_open filing_cabinet)\n    (containers filing_cabinet)\n    (surfaces filing_cabinet)\n    (obj_ontop novel filing_cabinet)\n    (movable novel)\n    (cuttable novel)\n    (obj_next_to novel filing_cabinet)\n    (obj_inside novel home_office)\n    (inside character bathroom)\n    (has_paper novel)\n    (obj_next_to filing_cabinet novel)\n    (grabbable novel)\n    (obj_inside filing_cabinet home_office)\n    (readable novel)\n    (can_open novel)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "896_2": {
        "task_name": "Read book",
        "natural_language_description": "Find book, grab book, fin bookmark, sit down somewhere comfortable, open book, read book, close book after reading.",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_LH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_LH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <desk> (357)",
          "[FIND] <novel> (1000)",
          "[FIND] <bookmark> (1001)",
          "[GRAB] <bookmark> (1001)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)",
          "[PUTBACK] <bookmark> (1001) <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel bookmark desk mouse couch keyboard cpuscreen television mousepad - object\n)\n    (:init\n    (has_plug television)\n    (obj_next_to cpuscreen mousepad)\n    (movable mousepad)\n    (surfaces couch)\n    (obj_ontop novel desk)\n    (obj_next_to mousepad mouse)\n    (obj_next_to mousepad desk)\n    (obj_next_to desk couch)\n    (grabbable mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (surfaces desk)\n    (has_plug keyboard)\n    (obj_next_to desk mousepad)\n    (readable novel)\n    (obj_next_to desk mouse)\n    (lieable couch)\n    (obj_next_to mouse mousepad)\n    (obj_next_to mouse desk)\n    (obj_ontop keyboard desk)\n    (has_paper bookmark)\n    (obj_next_to couch television)\n    (obj_next_to keyboard mouse)\n    (obj_next_to cpuscreen mouse)\n    (grabbable keyboard)\n    (has_paper novel)\n    (lookable television)\n    (obj_next_to desk cpuscreen)\n    (obj_ontop mousepad desk)\n    (obj_next_to mousepad keyboard)\n    (obj_next_to couch novel)\n    (obj_next_to mouse keyboard)\n    (movable novel)\n    (obj_next_to cpuscreen desk)\n    (has_plug mouse)\n    (cuttable novel)\n    (obj_next_to desk novel)\n    (movable couch)\n    (grabbable novel)\n    (obj_next_to novel couch)\n    (facing couch television)\n    (obj_next_to bookmark desk)\n    (obj_next_to couch desk)\n    (sittable couch)\n    (can_open novel)\n    (obj_next_to mousepad cpuscreen)\n    (movable bookmark)\n    (obj_ontop mouse desk)\n    (obj_next_to mouse cpuscreen)\n    (grabbable bookmark)\n    (has_switch television)\n    (movable desk)\n    (movable mouse)\n    (obj_next_to novel desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to desk bookmark)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n    (obj_next_to television couch)\n    (obj_next_to keyboard cpuscreen)\n)\n    (:goal\n    (and\n        (holds_lh character novel)\n    )\n)\n    )\n    "
      },
      "897_2": {
        "task_name": "Read book",
        "natural_language_description": "walk to home office, look at the light switch board, switch on the light, find the book, grap the book, sit in the chair, put the book into table, open the book, now read the book",
        "vh_goal": {
          "actions": [
            "READ|LOOKAT"
          ],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "(exists x0. ((READ(x0) or LOOKAT(x0))) then HOLDS_RH(character.65, novel.1000))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[TURNTO] <light> (411)",
          "[LOOKAT] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[FIND] <novel> (1000)",
          "[GRAB] <novel> (1000)",
          "[FIND] <chair> (356)",
          "[SIT] <chair> (356)",
          "[FIND] <table> (355)",
          "[PUTBACK] <novel> (1000) <table> (355)",
          "[GRAB] <novel> (1000)",
          "[READ] <novel> (1000)"
        ],
        "transition_model": "(define (problem Read_book)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel home_office light table chair dining_room - object\n)\n    (:init\n    (surfaces chair)\n    (has_plug light)\n    (has_switch light)\n    (surfaces table)\n    (readable novel)\n    (obj_next_to light novel)\n    (movable chair)\n    (plugged_in light)\n    (sittable chair)\n    (obj_next_to light light)\n    (obj_next_to light chair)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (obj_next_to light table)\n    (movable table)\n    (obj_next_to table light)\n    (obj_next_to novel light)\n    (clean light)\n    (movable novel)\n    (cuttable novel)\n    (obj_next_to chair table)\n    (grabbable chair)\n    (obj_next_to chair light)\n    (inside character dining_room)\n    (grabbable novel)\n    (inside_room table dining_room)\n    (can_open novel)\n    (obj_next_to table chair)\n    (off light)\n    (obj_inside table home_office)\n    (obj_inside chair home_office)\n    (inside_room light dining_room)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (holds_rh character novel)\n    )\n)\n    )\n    "
      },
      "1083_2": {
        "task_name": "Cook some food",
        "natural_language_description": "walk to kicthen , find stove , find cooking pot , find vegetables , find water  ,put vegetables in cooking pot, pour water to cooking pot,put cooking pot on stove, switch on stove",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 295,
              "class_name": "oven",
              "state": "CLOSED"
            },
            {
              "id": 295,
              "class_name": "oven",
              "state": "ON"
            },
            {
              "id": 295,
              "class_name": "oven",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 295
            }
          ]
        },
        "tl_goal": "(CLOSED(oven.295) and ON(oven.295) and PLUGGED_IN(oven.295) and ONTOP(pot.1003, oven.295))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <oven> (2.295)",
          "[FIND] <oven> (2.295)",
          "[FIND] <pot> (3.1000)",
          "[FIND] <food_vegetable> (4.1001)",
          "[FIND] <water> (5.1002)",
          "[GRAB] <water> (5.1002)",
          "[WASH] <food_vegetable> (4.1001)",
          "[POUR] <water> (5.1002) <pot> (3.1000)",
          "[FIND] <pot> (1003)",
          "[GRAB] <pot> (1003)",
          "[PUTBACK] <pot> (1003) <oven> (2.295)",
          "[SWITCHON] <oven> (2.295)"
        ],
        "transition_model": "(define (problem Cook_some_food)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    pot water food_vegetable bedroom oven dining_room - object\n)\n    (:init\n    (inside_room water dining_room)\n    (can_open pot)\n    (off oven)\n    (obj_next_to oven water)\n    (closed oven)\n    (obj_next_to oven pot)\n    (recipient pot)\n    (pourable water)\n    (plugged_in oven)\n    (obj_inside pot oven)\n    (movable food_vegetable)\n    (inside_room pot dining_room)\n    (clean oven)\n    (obj_next_to oven food_vegetable)\n    (cuttable food_vegetable)\n    (grabbable pot)\n    (has_plug oven)\n    (can_open oven)\n    (containers oven)\n    (grabbable food_vegetable)\n    (drinkable water)\n    (obj_next_to water oven)\n    (inside character bedroom)\n    (inside_room oven dining_room)\n    (obj_next_to pot oven)\n    (movable pot)\n    (eatable food_vegetable)\n    (obj_next_to food_vegetable oven)\n    (inside_room food_vegetable dining_room)\n    (has_switch oven)\n)\n    (:goal\n    (and\n        (closed oven)\n        (on oven)\n        (plugged_in oven)\n        (obj_ontop pot oven)\n    )\n)\n    )\n    "
      },
      "392_2": {
        "task_name": "Cook some food",
        "natural_language_description": "find fridge. walk to fridge. open fridge. find food. grab food. close fridge door. find frying pan. walk to frying pan. grab frying pan. find stove. walk to stove. put frying pan on stove. put food in frying pan. switch on stove.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 295,
              "class_name": "oven",
              "state": "CLOSED"
            },
            {
              "id": 295,
              "class_name": "oven",
              "state": "ON"
            },
            {
              "id": 295,
              "class_name": "oven",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 295
            }
          ]
        },
        "tl_goal": "(CLOSED(oven.295) and ON(oven.295) and PLUGGED_IN(oven.295) and ONTOP(pot.1001, oven.295))",
        "action_trajectory": [
          "[FIND] <freezer> (289)",
          "[WALK] <freezer> (289)",
          "[OPEN] <freezer> (289)",
          "[FIND] <food_food> (1000)",
          "[PULL] <food_food> (1000)",
          "[FIND] <pot> (1001)",
          "[WALK] <pot> (1001)",
          "[GRAB] <pot> (1001)",
          "[FIND] <oven> (295)",
          "[WALK] <oven> (295)",
          "[PUTBACK] <pot> (1001) <oven> (295)",
          "[SWITCHON] <oven> (295)"
        ],
        "transition_model": "(define (problem Cook_some_food)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    freezer oven pot - object\n)\n    (:init\n    (can_open pot)\n    (off oven)\n    (closed oven)\n    (closed freezer)\n    (clean freezer)\n    (plugged_in freezer)\n    (obj_next_to oven pot)\n    (has_switch freezer)\n    (recipient pot)\n    (plugged_in oven)\n    (obj_inside pot oven)\n    (clean oven)\n    (obj_inside pot freezer)\n    (can_open freezer)\n    (grabbable pot)\n    (has_plug oven)\n    (can_open oven)\n    (containers oven)\n    (obj_next_to pot freezer)\n    (has_plug freezer)\n    (obj_next_to pot oven)\n    (obj_next_to freezer pot)\n    (movable pot)\n    (containers freezer)\n    (has_switch oven)\n)\n    (:goal\n    (and\n        (closed oven)\n        (on oven)\n        (plugged_in oven)\n        (obj_ontop pot oven)\n    )\n)\n    )\n    "
      },
      "755_2": {
        "task_name": "Cook some food",
        "natural_language_description": "Cook some pasta on the stove",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 295,
              "class_name": "oven",
              "state": "CLOSED"
            },
            {
              "id": 295,
              "class_name": "oven",
              "state": "ON"
            },
            {
              "id": 295,
              "class_name": "oven",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 295
            }
          ]
        },
        "tl_goal": "(CLOSED(oven.295) and ON(oven.295) and PLUGGED_IN(oven.295) and ONTOP(sauce_pan.1003, oven.295))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <kitchen_cabinet> (1000)",
          "[FIND] <kitchen_cabinet> (1000)",
          "[OPEN] <kitchen_cabinet> (1000)",
          "[FIND] <pasta> (1001)",
          "[GRAB] <pasta> (1001)",
          "[FIND] <water> (1002)",
          "[GRAB] <water> (1002)",
          "[FIND] <sauce_pan> (1003)",
          "[POUR] <water> (1002) <sauce_pan> (1003)",
          "[FIND] <oven> (295)",
          "[SWITCHON] <oven> (295)",
          "[PUTBACK] <pasta> (1001) <sauce_pan> (1003)",
          "[FIND] <sauce_pan> (1003)",
          "[GRAB] <sauce_pan> (1003)",
          "[PUTBACK] <sauce_pan> (1003) <oven> (295)"
        ],
        "transition_model": "(define (problem Cook_some_food)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office kitchen_cabinet pasta water oven sauce_pan dining_room - object\n)\n    (:init\n    (obj_next_to kitchen_cabinet oven)\n    (obj_next_to kitchen_cabinet water)\n    (inside_room water dining_room)\n    (off oven)\n    (closed oven)\n    (pourable water)\n    (movable pasta)\n    (plugged_in oven)\n    (recipient sauce_pan)\n    (surfaces sauce_pan)\n    (grabbable sauce_pan)\n    (obj_inside water kitchen_cabinet)\n    (clean oven)\n    (obj_next_to kitchen_cabinet sauce_pan)\n    (closed kitchen_cabinet)\n    (surfaces kitchen_cabinet)\n    (obj_inside pasta kitchen_cabinet)\n    (obj_inside sauce_pan kitchen_cabinet)\n    (clean kitchen_cabinet)\n    (has_plug oven)\n    (can_open oven)\n    (pourable pasta)\n    (obj_next_to kitchen_cabinet pasta)\n    (containers oven)\n    (drinkable water)\n    (grabbable pasta)\n    (containers kitchen_cabinet)\n    (obj_next_to sauce_pan kitchen_cabinet)\n    (movable sauce_pan)\n    (obj_next_to water kitchen_cabinet)\n    (obj_next_to oven kitchen_cabinet)\n    (inside_room pasta dining_room)\n    (inside_room kitchen_cabinet dining_room)\n    (inside_room oven dining_room)\n    (containers sauce_pan)\n    (inside character home_office)\n    (inside_room sauce_pan dining_room)\n    (can_open kitchen_cabinet)\n    (has_switch oven)\n    (obj_next_to pasta kitchen_cabinet)\n)\n    (:goal\n    (and\n        (closed oven)\n        (on oven)\n        (plugged_in oven)\n        (obj_ontop sauce_pan oven)\n    )\n)\n    )\n    "
      },
      "124_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "go to the living room,find the sofa,sat down in the sofa,take some relaxation.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office hair couch bedroom television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (movable hair)\n    (obj_next_to couch television)\n    (grabbable hair)\n    (obj_inside hair home_office)\n    (surfaces couch)\n    (inside character bedroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (body_part hair)\n    (cuttable hair)\n    (obj_inside couch home_office)\n    (facing couch television)\n    (obj_next_to television couch)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "137_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "allow sofa to support weight in order to decrease gravity induced entropy",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "204_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "im feeling so tired so i wanted to go to my living room and relax on my sofa and i love drinking coffee while relaxing and some good shows in television",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <coffee> (1000)",
          "[FIND] <coffee> (1000)",
          "[GRAB] <coffee> (1000)",
          "[FIND] <couch> (352)",
          "[LIE] <couch> (352)",
          "[FIND] <television> (410)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch bedroom television coffee - object\n)\n    (:init\n    (has_plug television)\n    (movable coffee)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (lieable couch)\n    (obj_next_to coffee couch)\n    (drinkable coffee)\n    (obj_next_to couch television)\n    (grabbable coffee)\n    (obj_next_to television coffee)\n    (lookable television)\n    (pourable coffee)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (inside character bedroom)\n    (obj_inside coffee home_office)\n    (obj_next_to couch coffee)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n    (obj_next_to coffee television)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "268_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I walk into the living room and turn on the light. I walk to the couch then sit on the couch.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch light television dining_room - object\n)\n    (:init\n    (has_plug television)\n    (has_switch light)\n    (has_plug light)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (plugged_in light)\n    (lieable couch)\n    (obj_next_to couch television)\n    (obj_next_to light light)\n    (lookable television)\n    (clean light)\n    (inside character dining_room)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (off light)\n    (facing light television)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n    (inside_room light dining_room)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "297_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I am feeling tired, so I am going to go turn off the lamp, grab the pillow off of the chair, put it on the couch, and lie down to sleep.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <floor_lamp> (1000)",
          "[FIND] <floor_lamp> (1000)",
          "[TURNTO] <floor_lamp> (1000)",
          "[LOOKAT] <floor_lamp> (1000)",
          "[WALK] <floor_lamp> (1000)",
          "[SWITCHOFF] <floor_lamp> (1000)",
          "[FIND] <chair> (356)",
          "[TURNTO] <chair> (356)",
          "[LOOKAT] <chair> (356)",
          "[WALK] <chair> (356)",
          "[FIND] <pillow> (405)",
          "[GRAB] <pillow> (405)",
          "[WALK] <couch> (352)",
          "[PUTBACK] <pillow> (405) <couch> (352)",
          "[LIE] <couch> (352)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    mat home_office couch pillow window bedroom chair drawing television wall curtain floor_lamp floor - object\n)\n    (:init\n    (obj_next_to mat wall)\n    (obj_next_to floor pillow)\n    (facing wall drawing)\n    (obj_next_to mat curtain)\n    (surfaces chair)\n    (obj_next_to pillow floor)\n    (facing window drawing)\n    (obj_next_to television floor)\n    (obj_next_to curtain mat)\n    (obj_next_to window floor)\n    (obj_next_to floor mat)\n    (surfaces mat)\n    (sittable chair)\n    (obj_next_to curtain pillow)\n    (facing drawing drawing)\n    (obj_next_to pillow couch)\n    (lookable television)\n    (obj_next_to mat television)\n    (obj_inside window home_office)\n    (has_switch floor_lamp)\n    (inside_room chair bedroom)\n    (obj_next_to pillow drawing)\n    (obj_next_to floor drawing)\n    (obj_inside wall home_office)\n    (cuttable drawing)\n    (obj_next_to window wall)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (obj_next_to mat drawing)\n    (obj_next_to curtain couch)\n    (inside_room mat bedroom)\n    (obj_next_to pillow pillow)\n    (obj_next_to wall mat)\n    (obj_next_to television mat)\n    (obj_next_to couch drawing)\n    (has_plug television)\n    (obj_next_to curtain wall)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to wall couch)\n    (obj_next_to curtain curtain)\n    (on floor_lamp)\n    (obj_ontop curtain floor)\n    (obj_inside curtain curtain)\n    (facing wall television)\n    (inside_room pillow bedroom)\n    (obj_next_to floor couch)\n    (sittable mat)\n    (lookable drawing)\n    (obj_next_to mat window)\n    (obj_ontop drawing wall)\n    (grabbable mat)\n    (obj_inside floor home_office)\n    (obj_next_to wall television)\n    (obj_next_to wall curtain)\n    (facing drawing television)\n    (facing floor television)\n    (obj_next_to wall pillow)\n    (obj_next_to drawing pillow)\n    (obj_inside curtain home_office)\n    (obj_next_to floor curtain)\n    (obj_next_to mat floor)\n    (obj_next_to chair mat)\n    (obj_inside floor_lamp home_office)\n    (obj_next_to mat chair)\n    (cover_object curtain)\n    (obj_next_to drawing wall)\n    (inside character bedroom)\n    (obj_next_to mat mat)\n    (obj_inside chair home_office)\n    (movable pillow)\n    (inside_room window bedroom)\n    (obj_next_to curtain window)\n    (obj_next_to drawing couch)\n    (obj_next_to wall window)\n    (obj_next_to television wall)\n    (inside_room wall bedroom)\n    (obj_next_to drawing floor)\n    (movable mat)\n    (obj_next_to floor_lamp chair)\n    (clean floor_lamp)\n    (lieable couch)\n    (obj_inside mat home_office)\n    (obj_next_to mat couch)\n    (obj_next_to mat pillow)\n    (obj_inside pillow couch)\n    (obj_next_to pillow chair)\n    (movable curtain)\n    (obj_next_to couch window)\n    (lieable mat)\n    (obj_next_to chair floor)\n    (inside_room floor bedroom)\n    (obj_next_to chair drawing)\n    (obj_next_to couch pillow)\n    (grabbable chair)\n    (obj_next_to chair pillow)\n    (obj_next_to floor floor)\n    (facing mat drawing)\n    (obj_next_to pillow curtain)\n    (obj_next_to wall drawing)\n    (plugged_out floor_lamp)\n    (facing chair drawing)\n    (obj_next_to drawing mat)\n    (facing curtain television)\n    (obj_next_to wall floor)\n    (obj_next_to couch mat)\n    (obj_inside television home_office)\n    (obj_next_to window couch)\n    (inside_room drawing bedroom)\n    (obj_next_to wall chair)\n    (movable drawing)\n    (obj_next_to pillow window)\n    (obj_inside pillow home_office)\n    (obj_next_to window pillow)\n    (obj_next_to floor television)\n    (obj_inside drawing home_office)\n    (has_paper drawing)\n    (obj_next_to curtain floor)\n    (obj_next_to floor wall)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (obj_next_to chair floor_lamp)\n    (facing floor drawing)\n    (movable chair)\n    (obj_next_to wall wall)\n    (inside_room curtain bedroom)\n    (obj_next_to couch wall)\n    (obj_next_to couch television)\n    (obj_next_to pillow mat)\n    (facing mat television)\n    (obj_next_to drawing chair)\n    (grabbable drawing)\n    (facing television drawing)\n    (obj_ontop couch mat)\n    (obj_next_to couch curtain)\n    (obj_next_to window mat)\n    (facing pillow drawing)\n    (obj_next_to window curtain)\n    (obj_next_to floor window)\n    (obj_next_to chair wall)\n    (facing pillow television)\n    (obj_next_to couch floor)\n    (movable floor_lamp)\n    (movable couch)\n    (grabbable pillow)\n    (facing curtain drawing)\n    (can_open curtain)\n    (obj_next_to floor chair)\n    (obj_next_to pillow wall)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "299_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "walk to living room, walk to sofa, sit in sofa, relax",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "300_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Go to living room.  Find sofa.  Sit on sofa.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bedroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "321_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Drink a glass of water in the sofa",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <water_glass> (1000)",
          "[GRAB] <water_glass> (1000)",
          "[DRINK] <water_glass> (1000)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    water_glass couch bedroom home_office - object\n)\n    (:init\n    (lieable couch)\n    (surfaces couch)\n    (inside character bedroom)\n    (obj_next_to couch water_glass)\n    (movable water_glass)\n    (pourable water_glass)\n    (recipient water_glass)\n    (grabbable water_glass)\n    (obj_inside water_glass home_office)\n    (obj_next_to water_glass couch)\n    (movable couch)\n    (obj_inside couch home_office)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "332_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I walk into the living room. I cross the room to the couch. I sit down and relax.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "379_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "go to living room and lie down on the sofa.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office - object\n)\n    (:init\n    (lieable couch)\n    (surfaces couch)\n    (inside character bedroom)\n    (movable couch)\n    (obj_inside couch home_office)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "387_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Walk to living room. Find couch. Sit on couch",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "390_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Walk into the living room. Walk up to the sofa. Sit down on the sofa.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bedroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "3_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I go to the living room and sit in the sofa",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bedroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "416_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I am going to lay on the sofa and relax.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (lookable television)\n    (obj_next_to television couch)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "438_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "go to the living room and sit on the couch, ease into the sofa and relax.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office - object\n)\n    (:init\n    (lieable couch)\n    (surfaces couch)\n    (inside character bedroom)\n    (movable couch)\n    (obj_inside couch home_office)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "442_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Find the sofa and sit on it.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bedroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "447_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "you walk to the living room, open the door, find a comfy sofa, sit on it, read a book or sip a cup of coffee and relax.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[FIND] <coffee_cup> (1000)",
          "[GRAB] <coffee_cup> (1000)",
          "[SIT] <couch> (352)",
          "[FIND] <novel> (1001)",
          "[GRAB] <novel> (1001)",
          "[READ] <novel> (1001)",
          "[DRINK] <coffee_cup> (1000)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    novel home_office couch coffee_cup dining_room - object\n)\n    (:init\n    (grabbable coffee_cup)\n    (surfaces couch)\n    (obj_inside couch home_office)\n    (obj_inside coffee_cup home_office)\n    (readable novel)\n    (recipient coffee_cup)\n    (movable coffee_cup)\n    (obj_next_to coffee_cup couch)\n    (lieable couch)\n    (obj_inside novel home_office)\n    (has_paper novel)\n    (obj_next_to couch novel)\n    (movable novel)\n    (cuttable novel)\n    (pourable coffee_cup)\n    (inside character dining_room)\n    (movable couch)\n    (grabbable novel)\n    (obj_next_to novel couch)\n    (sittable couch)\n    (can_open novel)\n    (obj_next_to couch coffee_cup)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "449_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Go into the living room. Walk over to the sofa. Lie down on the sofa. Turn on and watch TV.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[LIE] <couch> (352)",
          "[FIND] <remote_control> (1000)",
          "[GRAB] <remote_control> (1000)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch remote_control television dining_room - object\n)\n    (:init\n    (grabbable remote_control)\n    (has_plug television)\n    (obj_next_to couch remote_control)\n    (clean television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (movable remote_control)\n    (lieable couch)\n    (plugged_in television)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_next_to remote_control couch)\n    (obj_inside remote_control home_office)\n    (has_switch remote_control)\n    (off television)\n    (inside character dining_room)\n    (movable couch)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "455_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I walk to the living room and find the sofa. I sit on the sofa and get comfortable.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom couch home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bathroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "456_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I walk to the living room. I see the couch.  I sit down on the couch, then lie down and put my feet up.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom couch home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bathroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "473_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Find the sofa. Sit on it. Pick the blanket on the sofa and put on yourself. Relax.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[FIND] <sheets> (1000)",
          "[GRAB] <sheets> (1000)",
          "[PUTBACK] <sheets> (1000) <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch sheets - object\n)\n    (:init\n    (lieable couch)\n    (obj_next_to sheets couch)\n    (surfaces couch)\n    (cover_object sheets)\n    (movable sheets)\n    (movable couch)\n    (obj_next_to couch sheets)\n    (grabbable sheets)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "490_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "walk to living room, walk to sofa, sit in sofa",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom couch home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bathroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "563_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I walk to the sofa, and lie down on the sofa.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch - object\n)\n    (:init\n    (surfaces couch)\n    (lieable couch)\n    (sittable couch)\n    (movable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "567_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I want to relax on the sofa to some relaxing music in the living room.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <light> (411)",
          "[FIND] <light> (411)",
          "[SWITCHON] <light> (411)",
          "[WALK] <stereo> (1000)",
          "[PLUGIN] <stereo> (1000)",
          "[SWITCHON] <stereo> (1000)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch light stereo television dining_room - object\n)\n    (:init\n    (has_plug television)\n    (obj_inside stereo home_office)\n    (has_switch light)\n    (has_plug light)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (obj_inside couch home_office)\n    (can_open stereo)\n    (plugged_in light)\n    (lieable couch)\n    (obj_next_to couch television)\n    (obj_next_to light light)\n    (has_plug stereo)\n    (off stereo)\n    (lookable television)\n    (surfaces stereo)\n    (clean light)\n    (plugged_out stereo)\n    (closed stereo)\n    (inside character dining_room)\n    (movable couch)\n    (clean stereo)\n    (has_switch stereo)\n    (facing couch television)\n    (sittable couch)\n    (has_switch television)\n    (grabbable stereo)\n    (off light)\n    (facing light television)\n    (movable stereo)\n    (obj_inside television home_office)\n    (obj_next_to television couch)\n    (inside_room light dining_room)\n    (obj_inside light home_office)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "570_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I walk into the living room. I bend down. I sit on the sofa.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom couch home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bathroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "674_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Walk into the living room. Walk to the sofa and sit on it. Put your feet up on the sofa and lay down.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "6_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I turn on the tv and sit in the sofa. I watch the tv and fall asleep.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <television> (410)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[TURNTO] <television> (410)",
          "[WATCH] <television> (410)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (plugged_in television)\n    (off television)\n    (obj_next_to couch television)\n    (clean television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "742_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I walk to the living room. I sit in the sofa and I relax.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "762_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Walk to the living room. Find the sofa. Walk to the sofa. Lie in the sofa.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[WALK] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office - object\n)\n    (:init\n    (lieable couch)\n    (surfaces couch)\n    (inside character bedroom)\n    (movable couch)\n    (obj_inside couch home_office)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "793_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I walk to my living room and switch on the television, and lay on the sofa.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <television> (410)",
          "[FIND] <television> (410)",
          "[SWITCHON] <television> (410)",
          "[FIND] <couch> (352)",
          "[LIE] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (plugged_in television)\n    (off television)\n    (obj_next_to couch television)\n    (clean television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "798_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Sitting down and relaxing on the sofa",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom couch home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bathroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "932_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "walk to living room, find sofa, sit in sofa",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bedroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "941_2": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Open coffee maker. Put filter in main basket, put ground coffee in filter, fill reservoir with water, turn on coffee maker.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office couch dining_room television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside_room television dining_room)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (inside character dining_room)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "96_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "Relax",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "SITTING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(SITTING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[SIT] <couch> (352)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office television - object\n)\n    (:init\n    (lieable couch)\n    (has_plug television)\n    (has_switch television)\n    (obj_next_to couch television)\n    (surfaces couch)\n    (inside character bedroom)\n    (lookable television)\n    (obj_inside television home_office)\n    (movable couch)\n    (obj_inside couch home_office)\n    (obj_next_to television couch)\n    (facing couch television)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (sitting character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "976_1": {
        "task_name": "Relax on sofa",
        "natural_language_description": "I go in the living room sit on the sofa and relax.I then I sleep on the sofa because I am so relaxed.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "id": 65,
              "class_name": "character",
              "state": "LYING"
            },
            {
              "from_id": 65,
              "relation_type": "ON",
              "to_id": 352
            }
          ]
        },
        "tl_goal": "(LYING(character.65) and ONTOP(character.65, couch.352))",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <couch> (352)",
          "[FIND] <couch> (352)",
          "[LIE] <couch> (352)",
          "[SLEEP]"
        ],
        "transition_model": "(define (problem Relax_on_sofa)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    couch bedroom home_office - object\n)\n    (:init\n    (lieable couch)\n    (surfaces couch)\n    (inside character bedroom)\n    (movable couch)\n    (obj_inside couch home_office)\n    (sittable couch)\n)\n    (:goal\n    (and\n        (lying character)\n        (ontop character couch)\n    )\n)\n    )\n    "
      },
      "149_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "stand up, walk to Entrance Hall, walk to table, lift the phone",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[STANDUP]",
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[WALK] <table> (355)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office phone couch table food_food dining_room - object\n)\n    (:init\n    (inside_room food_food dining_room)\n    (obj_inside food_food home_office)\n    (inside_room phone dining_room)\n    (obj_next_to table food_food)\n    (grabbable phone)\n    (surfaces couch)\n    (surfaces table)\n    (sitting character)\n    (has_switch phone)\n    (obj_inside couch home_office)\n    (obj_next_to phone table)\n    (movable phone)\n    (obj_inside phone home_office)\n    (lieable couch)\n    (movable food_food)\n    (obj_ontop phone table)\n    (movable table)\n    (obj_ontop food_food table)\n    (grabbable food_food)\n    (obj_next_to table phone)\n    (inside character dining_room)\n    (movable couch)\n    (eatable food_food)\n    (obj_next_to table couch)\n    (sittable couch)\n    (inside_room table dining_room)\n    (has_plug phone)\n    (obj_inside table home_office)\n    (obj_next_to couch table)\n    (obj_inside table couch)\n    (obj_next_to food_food table)\n    (cuttable food_food)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "154_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "I would walk to my room where my phone is plugged in, pick up the phone, press the answer button, and lift the phone to my ear.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <bedroom> (67)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)",
          "[TURNTO] <phone> (1000)",
          "[LOOKAT] <phone> (1000)",
          "[FIND] <button> (1001)",
          "[PUSH] <button> (1001)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom dining_room phone button - object\n)\n    (:init\n    (movable button)\n    (inside_room phone dining_room)\n    (grabbable phone)\n    (has_plug phone)\n    (has_switch phone)\n    (inside_room phone bedroom)\n    (obj_next_to button phone)\n    (inside character dining_room)\n    (obj_next_to phone button)\n    (inside_room button bedroom)\n    (grabbable button)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "180_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "Find the phone",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[STANDUP]",
          "[FIND] <phone> (247)",
          "[GRAB] <phone> (247)",
          "[TOUCH] <phone> (247)",
          "[PLUGIN] <phone> (247)",
          "[TURNTO] <phone> (247)",
          "[POINTAT] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    phone door hair trashcan light powersocket doorjamb drawing wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (sitting character)\n    (obj_inside hair trashcan)\n    (lookable wall_clock)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (movable hair)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (clean phone)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to trashcan hair)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to trashcan powersocket)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_ontop doorjamb floor)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (obj_next_to doorjamb wall)\n    (obj_next_to doorjamb trashcan)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (can_open trashcan)\n    (obj_next_to doorjamb ceiling)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (grabbable hair)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (obj_next_to hair trashcan)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to powersocket wall)\n    (cuttable hair)\n    (obj_next_to floor floor)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (plugged_out phone)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to powersocket floor)\n    (body_part hair)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (off phone)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "195_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "Go to the phone and pick it up.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[RUN] <home_office> (319)",
          "[RUN] <table> (355)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)",
          "[WALK] <couch> (352)",
          "[SIT] <couch> (352)",
          "[TOUCH] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office phone couch table television dining_room - object\n)\n    (:init\n    (has_plug television)\n    (inside_room phone dining_room)\n    (grabbable phone)\n    (surfaces couch)\n    (surfaces table)\n    (inside_room television dining_room)\n    (has_switch phone)\n    (obj_inside couch home_office)\n    (obj_next_to television table)\n    (facing phone television)\n    (obj_next_to phone table)\n    (movable phone)\n    (obj_inside phone home_office)\n    (lieable couch)\n    (obj_next_to couch television)\n    (lookable television)\n    (obj_ontop phone table)\n    (movable table)\n    (obj_next_to table television)\n    (obj_next_to table phone)\n    (inside character dining_room)\n    (movable couch)\n    (obj_next_to table couch)\n    (facing couch television)\n    (sittable couch)\n    (inside_room table dining_room)\n    (has_switch television)\n    (has_plug phone)\n    (obj_inside table home_office)\n    (obj_inside television home_office)\n    (obj_next_to couch table)\n    (obj_inside table couch)\n    (obj_next_to television couch)\n    (facing table television)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "211_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "I walk over to the phone and pick it up.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[WALK] <phone> (247)",
          "[GRAB] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    phone door trashcan light powersocket doorjamb drawing wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (lookable wall_clock)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to trashcan powersocket)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_ontop doorjamb floor)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (obj_next_to doorjamb wall)\n    (obj_next_to doorjamb trashcan)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (can_open trashcan)\n    (obj_next_to doorjamb ceiling)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to powersocket wall)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "241_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "Find phone. Move to phone. Pick the phone up.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[FIND] <phone> (247)",
          "[GRAB] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    phone door trashcan light powersocket doorjamb drawing wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (lookable wall_clock)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to trashcan powersocket)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_ontop doorjamb floor)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (obj_next_to doorjamb wall)\n    (obj_next_to doorjamb trashcan)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (can_open trashcan)\n    (obj_next_to doorjamb ceiling)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to powersocket wall)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "264_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "Enter office. Go to desk. Pick up phone.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom home_office phone desk shoe-shine_kit mouse keyboard cpuscreen mousepad - object\n)\n    (:init\n    (obj_next_to cpuscreen mousepad)\n    (grabbable phone)\n    (obj_inside mouse home_office)\n    (movable mousepad)\n    (obj_next_to mousepad mouse)\n    (obj_next_to mousepad desk)\n    (has_switch phone)\n    (grabbable mouse)\n    (surfaces mousepad)\n    (grabbable shoe-shine_kit)\n    (obj_next_to desk keyboard)\n    (obj_next_to phone desk)\n    (surfaces desk)\n    (has_plug keyboard)\n    (obj_next_to desk mouse)\n    (movable phone)\n    (obj_inside phone home_office)\n    (obj_next_to mouse desk)\n    (obj_next_to mouse mousepad)\n    (obj_ontop phone desk)\n    (obj_ontop keyboard desk)\n    (obj_next_to keyboard mouse)\n    (obj_next_to cpuscreen mouse)\n    (grabbable keyboard)\n    (obj_next_to desk cpuscreen)\n    (obj_inside keyboard home_office)\n    (obj_ontop mousepad desk)\n    (obj_next_to mousepad keyboard)\n    (obj_inside mousepad home_office)\n    (obj_next_to shoe-shine_kit desk)\n    (obj_next_to mouse keyboard)\n    (obj_next_to cpuscreen desk)\n    (has_plug mouse)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to mouse cpuscreen)\n    (obj_next_to desk shoe-shine_kit)\n    (movable shoe-shine_kit)\n    (obj_ontop mouse desk)\n    (obj_inside desk home_office)\n    (obj_inside shoe-shine_kit home_office)\n    (obj_next_to desk phone)\n    (inside character bathroom)\n    (has_plug phone)\n    (movable mouse)\n    (movable desk)\n    (obj_next_to cpuscreen keyboard)\n    (obj_ontop cpuscreen desk)\n    (can_open shoe-shine_kit)\n    (movable keyboard)\n    (obj_next_to desk mousepad)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n    (obj_next_to keyboard mousepad)\n    (obj_ontop shoe-shine_kit desk)\n    (obj_next_to keyboard cpuscreen)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "265_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "I go to the living room and pick up the phone",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)",
          "[FIND] <button> (1001)",
          "[TOUCH] <button> (1001)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom phone home_office button - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (movable button)\n    (grabbable phone)\n    (inside character bathroom)\n    (has_plug phone)\n    (has_switch phone)\n    (obj_next_to button phone)\n    (obj_inside button home_office)\n    (obj_next_to phone button)\n    (grabbable button)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "287_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "Locate the phone.  Extend arm toward the phone and open hand.  Place hand on phone and close fingers around phone.  Lift phone.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[FIND] <phone> (247)",
          "[GRAB] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    phone door trashcan light powersocket doorjamb drawing wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (lookable wall_clock)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to trashcan powersocket)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_ontop doorjamb floor)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (obj_next_to doorjamb wall)\n    (obj_next_to doorjamb trashcan)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (can_open trashcan)\n    (obj_next_to doorjamb ceiling)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to powersocket wall)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "352_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "find the phone and pick it up",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[FIND] <table> (226)",
          "[TURNTO] <table> (226)",
          "[LOOKAT] <table> (226)",
          "[FIND] <phone> (247)",
          "[TURNTO] <phone> (247)",
          "[LOOKAT] <phone> (247)",
          "[GRAB] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    mat phone door trashcan light powersocket doorjamb table drawing wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to mat wall)\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (obj_next_to floor mat)\n    (lookable wall_clock)\n    (surfaces mat)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (obj_next_to doorjamb mat)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to mat light)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to light mat)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_ontop table mat)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to mat drawing)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to wall mat)\n    (obj_next_to drawing table)\n    (obj_next_to trashcan powersocket)\n    (obj_next_to table drawing)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_next_to table wall)\n    (obj_ontop doorjamb floor)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (sittable mat)\n    (obj_next_to doorjamb wall)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_ontop phone table)\n    (obj_next_to doorjamb trashcan)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (movable table)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (grabbable mat)\n    (can_open trashcan)\n    (obj_ontop mat table)\n    (facing table drawing)\n    (obj_next_to doorjamb ceiling)\n    (obj_ontop table floor)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to mat floor)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (obj_next_to mat mat)\n    (obj_next_to table mat)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (surfaces table)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable mat)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (lieable mat)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to powersocket wall)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (facing mat drawing)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to drawing mat)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (obj_next_to floor table)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to wall table)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (facing mat wall_clock)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to mat table)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (obj_next_to mat door)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to table floor)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to mat doorjamb)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (obj_next_to door mat)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "360_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "i go find the phone. i pick up the phone",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office phone dining_room - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (inside_room phone dining_room)\n    (grabbable phone)\n    (has_plug phone)\n    (has_switch phone)\n    (inside character dining_room)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "388_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "Find phone. Walk to phone. Pick up phone. Answer call with a greeting.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[FIND] <phone> (1000)",
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office phone dining_room - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (inside_room phone dining_room)\n    (grabbable phone)\n    (has_plug phone)\n    (has_switch phone)\n    (inside character dining_room)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "431_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "I hear the phone ringing in the living room. I walk to the living room and go to the phone. I pick it up and answer the phone.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[TURNTO] <phone> (1000)",
          "[LOOKAT] <phone> (1000)",
          "[GRAB] <phone> (1000)",
          "[SWITCHON] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office phone - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (plugged_in phone)\n    (grabbable phone)\n    (clean phone)\n    (inside character bedroom)\n    (has_plug phone)\n    (has_switch phone)\n    (off phone)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "436_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "walk to living room, walk to the phone reach for the phone and pick up the phone.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[TOUCH] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom phone home_office - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (grabbable phone)\n    (inside character bathroom)\n    (has_plug phone)\n    (has_switch phone)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "442_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "Find the phone and grab it.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[FIND] <phone> (247)",
          "[GRAB] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    phone door trashcan light powersocket doorjamb drawing wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (lookable wall_clock)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to trashcan powersocket)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_ontop doorjamb floor)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (obj_next_to doorjamb wall)\n    (obj_next_to doorjamb trashcan)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (can_open trashcan)\n    (obj_next_to doorjamb ceiling)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to powersocket wall)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "474_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "Find the phone and grab it.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[FIND] <phone> (247)",
          "[GRAB] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    phone door trashcan light powersocket doorjamb drawing wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (lookable wall_clock)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to trashcan powersocket)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_ontop doorjamb floor)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (obj_next_to doorjamb wall)\n    (obj_next_to doorjamb trashcan)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (can_open trashcan)\n    (obj_next_to doorjamb ceiling)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to powersocket wall)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "482_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "I walk to the kitchen and find the phone. I pick up the phone. I hold it to my ear.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <phone> (247)",
          "[FIND] <phone> (247)",
          "[GRAB] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom phone door trashcan light powersocket doorjamb drawing wall_clock wall ceiling dining_room floor - object\n)\n    (:init\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (lookable wall_clock)\n    (inside_room ceiling bathroom)\n    (obj_next_to floor trashcan)\n    (inside_room door dining_room)\n    (facing light wall_clock)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (inside_room ceiling dining_room)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to trashcan powersocket)\n    (inside_room floor dining_room)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (inside_room light bathroom)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_ontop doorjamb floor)\n    (inside_room wall dining_room)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (obj_next_to doorjamb wall)\n    (obj_next_to doorjamb trashcan)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (can_open trashcan)\n    (obj_next_to doorjamb ceiling)\n    (obj_next_to doorjamb door)\n    (inside_room wall_clock dining_room)\n    (facing floor wall_clock)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (inside_room light dining_room)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (inside_room phone dining_room)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to powersocket wall)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (inside character bathroom)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to trashcan floor)\n    (inside_room doorjamb bathroom)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (inside_room wall bathroom)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (inside_room door bathroom)\n    (inside_room powersocket dining_room)\n    (inside_room drawing dining_room)\n    (inside_room floor bathroom)\n    (has_plug phone)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "497_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "Walk to home office 1. Walk over to phone 1 on table 1.  Grab phone 1.  lift phone 1.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office phone dining_room hair - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (movable hair)\n    (inside_room phone dining_room)\n    (grabbable phone)\n    (grabbable hair)\n    (has_plug phone)\n    (has_switch phone)\n    (inside character dining_room)\n    (body_part hair)\n    (cuttable hair)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "553_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "Walk into the living room, walk over to phone, grab the phone, put it to your ear .",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office phone - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (grabbable phone)\n    (inside character bedroom)\n    (has_plug phone)\n    (has_switch phone)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "601_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "Listen for ring,lift  phone, click accept button to pick up, Begin talking.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[FIND] <phone> (247)",
          "[GRAB] <phone> (247)",
          "[FIND] <button> (1000)",
          "[PUSH] <button> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    phone door trashcan light powersocket doorjamb button drawing television wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (obj_next_to television floor)\n    (lookable wall_clock)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (lookable television)\n    (obj_next_to door wall_clock)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (grabbable button)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (has_switch television)\n    (obj_ontop ceiling wall)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to trashcan powersocket)\n    (has_plug television)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to television ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_ontop doorjamb floor)\n    (facing wall television)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (facing doorjamb television)\n    (obj_next_to doorjamb wall)\n    (obj_next_to doorjamb trashcan)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (facing ceiling television)\n    (obj_ontop drawing wall)\n    (can_open trashcan)\n    (obj_next_to wall television)\n    (movable button)\n    (obj_next_to doorjamb ceiling)\n    (facing drawing television)\n    (facing floor television)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (obj_next_to ceiling television)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (obj_next_to television wall)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (facing television wall_clock)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (obj_next_to powersocket wall)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (facing door television)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to floor television)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (facing phone television)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (grabbable drawing)\n    (facing television drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (facing wall_clock television)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (facing light television)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "70_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "walk to living room. find desk. plug out phone. grab phone. touch phone.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <desk> (357)",
          "[FIND] <phone> (1000)",
          "[PLUGOUT] <phone> (1000)",
          "[GRAB] <phone> (1000)",
          "[TOUCH] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office phone fork desk mouse keyboard cpuscreen mousepad dining_room - object\n)\n    (:init\n    (obj_next_to cpuscreen mousepad)\n    (inside_room phone dining_room)\n    (grabbable phone)\n    (obj_inside mouse home_office)\n    (movable mousepad)\n    (obj_next_to mousepad mouse)\n    (obj_next_to mousepad desk)\n    (has_switch phone)\n    (grabbable mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_next_to phone desk)\n    (surfaces desk)\n    (has_plug keyboard)\n    (obj_next_to desk mouse)\n    (movable phone)\n    (obj_inside phone home_office)\n    (obj_next_to mouse desk)\n    (obj_next_to mouse mousepad)\n    (obj_ontop phone desk)\n    (grabbable fork)\n    (obj_ontop keyboard desk)\n    (obj_next_to keyboard mouse)\n    (clean phone)\n    (movable fork)\n    (obj_next_to cpuscreen mouse)\n    (grabbable keyboard)\n    (obj_next_to desk cpuscreen)\n    (obj_inside keyboard home_office)\n    (obj_ontop mousepad desk)\n    (obj_next_to mousepad keyboard)\n    (obj_inside mousepad home_office)\n    (obj_next_to mouse keyboard)\n    (obj_ontop fork desk)\n    (obj_next_to cpuscreen desk)\n    (has_plug mouse)\n    (inside character dining_room)\n    (obj_inside cpuscreen home_office)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to desk fork)\n    (obj_next_to mouse cpuscreen)\n    (plugged_in phone)\n    (obj_ontop mouse desk)\n    (obj_inside fork home_office)\n    (obj_next_to fork desk)\n    (obj_inside desk home_office)\n    (obj_next_to desk phone)\n    (has_plug phone)\n    (movable desk)\n    (movable mouse)\n    (obj_next_to cpuscreen keyboard)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to desk mousepad)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n    (obj_next_to keyboard cpuscreen)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "864_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "I'll enter the location containing the phone. Once there, I'll locate the phone, and move close to it. I'll then use my hand to pick up the phone such that I can then use it.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[WALK] <phone> (1000)",
          "[TURNTO] <phone> (1000)",
          "[LOOKAT] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom phone home_office hair - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (movable hair)\n    (grabbable phone)\n    (grabbable hair)\n    (inside character bathroom)\n    (has_plug phone)\n    (has_switch phone)\n    (body_part hair)\n    (cuttable hair)\n    (inside_room hair bathroom)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "963_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "walk to phone, grab phone, pick up phone, put to ear",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office phone - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (grabbable phone)\n    (inside character bedroom)\n    (has_plug phone)\n    (has_switch phone)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "974_1": {
        "task_name": "Pick up phone",
        "natural_language_description": "Walk to the entrance hall. Find the telephone. Grab the telephone.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <phone> (1000)",
          "[FIND] <phone> (1000)",
          "[WALK] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bedroom home_office phone - object\n)\n    (:init\n    (obj_inside phone home_office)\n    (grabbable phone)\n    (inside character bedroom)\n    (has_plug phone)\n    (has_switch phone)\n    (movable phone)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "976_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "I hear the phone ringing in the office, I go in the office and pick up the phone on the desk.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 1000
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.1000)",
        "action_trajectory": [
          "[WALK] <home_office> (319)",
          "[WALK] <desk> (357)",
          "[FIND] <phone> (1000)",
          "[GRAB] <phone> (1000)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office phone desk mouse keyboard cpuscreen bedroom mousepad - object\n)\n    (:init\n    (obj_next_to cpuscreen mousepad)\n    (grabbable phone)\n    (obj_inside mouse home_office)\n    (movable mousepad)\n    (obj_next_to mousepad mouse)\n    (obj_next_to mousepad desk)\n    (has_switch phone)\n    (grabbable mouse)\n    (surfaces mousepad)\n    (obj_next_to desk keyboard)\n    (obj_next_to phone desk)\n    (surfaces desk)\n    (has_plug keyboard)\n    (obj_next_to desk mouse)\n    (movable phone)\n    (inside_room mousepad bedroom)\n    (obj_inside phone home_office)\n    (obj_next_to mouse desk)\n    (obj_next_to mouse mousepad)\n    (obj_ontop phone desk)\n    (obj_ontop keyboard desk)\n    (obj_next_to keyboard mouse)\n    (obj_next_to cpuscreen mouse)\n    (grabbable keyboard)\n    (inside_room cpuscreen bedroom)\n    (obj_next_to desk cpuscreen)\n    (obj_inside keyboard home_office)\n    (obj_ontop mousepad desk)\n    (obj_next_to mousepad keyboard)\n    (obj_inside mousepad home_office)\n    (obj_next_to mouse keyboard)\n    (obj_next_to cpuscreen desk)\n    (has_plug mouse)\n    (obj_inside cpuscreen home_office)\n    (inside_room mouse bedroom)\n    (obj_next_to mousepad cpuscreen)\n    (obj_next_to mouse cpuscreen)\n    (obj_ontop mouse desk)\n    (obj_inside desk home_office)\n    (obj_next_to desk phone)\n    (inside character bedroom)\n    (has_plug phone)\n    (movable mouse)\n    (movable desk)\n    (inside_room keyboard bedroom)\n    (obj_next_to cpuscreen keyboard)\n    (obj_ontop cpuscreen desk)\n    (obj_next_to keyboard mousepad)\n    (movable keyboard)\n    (obj_next_to desk mousepad)\n    (obj_next_to keyboard desk)\n    (obj_ontop mouse mousepad)\n    (inside_room desk bedroom)\n    (obj_next_to keyboard cpuscreen)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "99_2": {
        "task_name": "Pick up phone",
        "natural_language_description": "Pick up phone",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "HOLDS_RH",
              "to_id": 247
            }
          ]
        },
        "tl_goal": "HOLDS_RH(character.65, phone.247)",
        "action_trajectory": [
          "[WALK] <table> (226)",
          "[FIND] <phone> (247)",
          "[TURNTO] <phone> (247)",
          "[LOOKAT] <phone> (247)",
          "[GRAB] <phone> (247)"
        ],
        "transition_model": "(define (problem Pick_up_phone)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    mat phone door trashcan light powersocket doorjamb table drawing wall_clock wall ceiling floor - object\n)\n    (:init\n    (obj_next_to mat wall)\n    (obj_next_to phone doorjamb)\n    (facing wall drawing)\n    (obj_next_to wall powersocket)\n    (grabbable phone)\n    (has_plug light)\n    (obj_next_to drawing doorjamb)\n    (obj_next_to floor mat)\n    (lookable wall_clock)\n    (surfaces mat)\n    (obj_next_to floor trashcan)\n    (facing light wall_clock)\n    (obj_next_to doorjamb mat)\n    (obj_next_to door light)\n    (obj_next_to floor light)\n    (facing drawing drawing)\n    (obj_next_to mat light)\n    (obj_next_to light wall)\n    (obj_next_to wall door)\n    (obj_next_to wall_clock trashcan)\n    (obj_next_to door wall_clock)\n    (obj_next_to light mat)\n    (obj_next_to ceiling phone)\n    (obj_next_to light drawing)\n    (obj_next_to wall trashcan)\n    (obj_next_to door powersocket)\n    (grabbable wall_clock)\n    (facing trashcan drawing)\n    (obj_next_to floor drawing)\n    (obj_next_to wall light)\n    (obj_next_to floor door)\n    (obj_next_to light wall_clock)\n    (obj_next_to doorjamb light)\n    (obj_next_to floor powersocket)\n    (cuttable drawing)\n    (facing door drawing)\n    (obj_next_to light floor)\n    (obj_ontop table mat)\n    (obj_next_to trashcan light)\n    (obj_next_to phone light)\n    (obj_ontop ceiling wall)\n    (obj_next_to mat drawing)\n    (obj_next_to drawing wall_clock)\n    (obj_next_to trashcan wall)\n    (obj_next_to light doorjamb)\n    (obj_next_to door phone)\n    (obj_next_to phone door)\n    (obj_next_to wall mat)\n    (obj_next_to drawing table)\n    (obj_next_to trashcan powersocket)\n    (obj_next_to table drawing)\n    (facing ceiling wall_clock)\n    (obj_next_to phone powersocket)\n    (obj_next_to door drawing)\n    (surfaces floor)\n    (obj_next_to drawing drawing)\n    (obj_next_to doorjamb phone)\n    (obj_next_to wall_clock wall)\n    (obj_next_to wall ceiling)\n    (obj_next_to floor phone)\n    (obj_next_to wall_clock light)\n    (obj_next_to table wall)\n    (obj_ontop doorjamb floor)\n    (obj_next_to trashcan phone)\n    (containers trashcan)\n    (obj_next_to phone wall)\n    (obj_next_to light light)\n    (facing powersocket wall_clock)\n    (sittable mat)\n    (obj_next_to doorjamb wall)\n    (has_switch wall_clock)\n    (obj_next_to wall doorjamb)\n    (obj_ontop phone table)\n    (obj_next_to doorjamb trashcan)\n    (obj_next_to doorjamb drawing)\n    (lookable drawing)\n    (movable table)\n    (facing door wall_clock)\n    (obj_next_to trashcan door)\n    (obj_ontop drawing wall)\n    (grabbable mat)\n    (can_open trashcan)\n    (obj_ontop mat table)\n    (facing table drawing)\n    (obj_next_to doorjamb ceiling)\n    (obj_ontop table floor)\n    (obj_next_to doorjamb door)\n    (facing floor wall_clock)\n    (obj_next_to mat floor)\n    (obj_next_to drawing phone)\n    (obj_next_to drawing door)\n    (obj_next_to wall_clock doorjamb)\n    (facing powersocket drawing)\n    (obj_next_to drawing wall)\n    (obj_next_to wall phone)\n    (obj_next_to mat mat)\n    (obj_next_to table mat)\n    (facing phone drawing)\n    (facing wall wall_clock)\n    (obj_next_to powersocket trashcan)\n    (obj_next_to powersocket door)\n    (obj_next_to powersocket phone)\n    (surfaces table)\n    (obj_next_to powersocket drawing)\n    (obj_ontop door floor)\n    (obj_next_to light door)\n    (movable wall_clock)\n    (obj_next_to drawing floor)\n    (movable mat)\n    (obj_next_to phone table)\n    (movable phone)\n    (obj_next_to phone drawing)\n    (movable trashcan)\n    (obj_next_to drawing ceiling)\n    (obj_next_to powersocket light)\n    (obj_next_to door floor)\n    (facing wall_clock drawing)\n    (facing doorjamb wall_clock)\n    (lieable mat)\n    (facing light drawing)\n    (obj_next_to phone wall_clock)\n    (obj_next_to light ceiling)\n    (obj_next_to table phone)\n    (obj_next_to powersocket wall)\n    (obj_next_to ceiling wall_clock)\n    (obj_next_to floor floor)\n    (facing mat drawing)\n    (obj_next_to drawing powersocket)\n    (obj_next_to wall drawing)\n    (obj_next_to drawing mat)\n    (obj_next_to door wall)\n    (obj_next_to wall wall_clock)\n    (obj_next_to drawing light)\n    (obj_next_to wall floor)\n    (obj_next_to floor table)\n    (obj_next_to trashcan doorjamb)\n    (obj_next_to wall_clock door)\n    (obj_next_to light powersocket)\n    (movable drawing)\n    (obj_next_to ceiling ceiling)\n    (facing ceiling drawing)\n    (obj_next_to phone floor)\n    (obj_next_to door trashcan)\n    (has_paper drawing)\n    (obj_next_to powersocket doorjamb)\n    (has_switch light)\n    (obj_next_to floor wall)\n    (obj_next_to doorjamb wall_clock)\n    (obj_next_to ceiling wall)\n    (has_switch phone)\n    (can_open door)\n    (obj_next_to wall table)\n    (obj_next_to powersocket floor)\n    (facing floor drawing)\n    (obj_next_to ceiling doorjamb)\n    (facing mat wall_clock)\n    (obj_next_to wall wall)\n    (obj_next_to light phone)\n    (obj_next_to phone trashcan)\n    (obj_next_to door doorjamb)\n    (obj_next_to mat table)\n    (obj_next_to trashcan floor)\n    (obj_next_to doorjamb powersocket)\n    (obj_next_to ceiling drawing)\n    (obj_next_to mat door)\n    (grabbable drawing)\n    (obj_next_to doorjamb floor)\n    (obj_next_to floor doorjamb)\n    (obj_next_to trashcan drawing)\n    (has_plug wall_clock)\n    (obj_next_to table floor)\n    (obj_next_to phone ceiling)\n    (obj_next_to light trashcan)\n    (obj_next_to wall_clock phone)\n    (obj_next_to trashcan wall_clock)\n    (facing phone wall_clock)\n    (obj_next_to mat doorjamb)\n    (obj_next_to wall_clock drawing)\n    (facing doorjamb drawing)\n    (has_plug phone)\n    (obj_next_to door mat)\n    (obj_next_to wall_clock ceiling)\n    (obj_next_to drawing trashcan)\n    (obj_next_to ceiling light)\n)\n    (:goal\n    (and\n        (holds_rh character phone)\n    )\n)\n    )\n    "
      },
      "183_2": {
        "task_name": "Make coffee",
        "natural_language_description": "Walk to Kitchen and find coffee maker, find coffee filter and place it in coffee maker. Find ground coffee and water. put both in coffee maker. Close the coffee maker and switch it on.",
        "vh_goal": {
          "actions": [
            "POUR"
          ],
          "goal": [
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "CLOSED"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "ON"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 290
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 290
            }
          ]
        },
        "tl_goal": "(exists x0. (exists x1. (POUR(x0,x1))) then (CLOSED(coffe_maker.290) and ON(coffe_maker.290) and PLUGGED_IN(coffe_maker.290) and ONTOP(coffee_filter.1000, coffe_maker.290) and ONTOP(ground_coffee.1001, coffe_maker.290)))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <coffe_maker> (290)",
          "[FIND] <coffe_maker> (290)",
          "[OPEN] <coffe_maker> (290)",
          "[FIND] <coffee_filter> (1000)",
          "[GRAB] <coffee_filter> (1000)",
          "[PUTBACK] <coffee_filter> (1000) <coffe_maker> (290)",
          "[FIND] <ground_coffee> (1001)",
          "[GRAB] <ground_coffee> (1001)",
          "[PUTBACK] <ground_coffee> (1001) <coffe_maker> (290)",
          "[WALK] <water> (1002)",
          "[FIND] <water> (1002)",
          "[GRAB] <water> (1002)",
          "[POUR] <water> (1002) <coffe_maker> (290)",
          "[CLOSE] <coffe_maker> (290)",
          "[SWITCHON] <coffe_maker> (290)"
        ],
        "transition_model": "(define (problem Make_coffee)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom ground_coffee water coffe_maker coffee_filter dining_room - object\n)\n    (:init\n    (inside_room water dining_room)\n    (obj_next_to coffe_maker coffee_filter)\n    (has_paper coffee_filter)\n    (inside_room ground_coffee dining_room)\n    (recipient coffe_maker)\n    (has_plug coffe_maker)\n    (pourable water)\n    (closed coffe_maker)\n    (has_switch coffe_maker)\n    (movable ground_coffee)\n    (clean coffe_maker)\n    (off coffe_maker)\n    (containers coffe_maker)\n    (obj_inside coffee_filter coffe_maker)\n    (obj_next_to coffe_maker ground_coffee)\n    (movable coffee_filter)\n    (inside_room coffee_filter dining_room)\n    (obj_next_to coffe_maker water)\n    (inside_room coffe_maker dining_room)\n    (drinkable water)\n    (can_open coffe_maker)\n    (obj_inside water coffe_maker)\n    (inside character bathroom)\n    (grabbable ground_coffee)\n    (obj_inside ground_coffee coffe_maker)\n    (obj_next_to coffee_filter coffe_maker)\n    (can_open ground_coffee)\n    (grabbable coffee_filter)\n    (plugged_in coffe_maker)\n    (obj_next_to water coffe_maker)\n    (movable coffe_maker)\n    (obj_next_to ground_coffee coffe_maker)\n)\n    (:goal\n    (and\n        (closed coffe_maker)\n        (on coffe_maker)\n        (plugged_in coffe_maker)\n        (obj_ontop ground_coffee coffe_maker)\n        (obj_ontop coffee_filter coffe_maker)\n    )\n)\n    )\n    "
      },
      "229_1": {
        "task_name": "Make coffee",
        "natural_language_description": "Open coffee maker. Put filter in main basket, put ground coffee in filter, fill reservoir with water, turn on coffee maker.",
        "vh_goal": {
          "actions": [
            "POUR"
          ],
          "goal": [
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "CLOSED"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "ON"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 290
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 290
            }
          ]
        },
        "tl_goal": "(exists x0. (exists x1. (POUR(x0,x1))) then (CLOSED(coffe_maker.290) and ON(coffe_maker.290) and PLUGGED_IN(coffe_maker.290) and ONTOP(coffee_filter.1000, coffe_maker.290) and ONTOP(ground_coffee.1001, coffe_maker.290)))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <coffe_maker> (290)",
          "[FIND] <coffe_maker> (290)",
          "[OPEN] <coffe_maker> (290)",
          "[FIND] <coffee_filter> (1000)",
          "[GRAB] <coffee_filter> (1000)",
          "[PUTBACK] <coffee_filter> (1000) <coffe_maker> (290)",
          "[FIND] <ground_coffee> (1001)",
          "[GRAB] <ground_coffee> (1001)",
          "[FIND] <ground_coffee> (1001)",
          "[PUTBACK] <ground_coffee> (1001) <coffe_maker> (290)",
          "[WALK] <water> (1002)",
          "[FIND] <water> (1002)",
          "[GRAB] <water> (1002)",
          "[POUR] <water> (1002) <coffe_maker> (290)",
          "[CLOSE] <coffe_maker> (290)",
          "[SWITCHON] <coffe_maker> (290)"
        ],
        "transition_model": "(define (problem Make_coffee)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    ground_coffee water coffe_maker coffee_filter bedroom dining_room - object\n)\n    (:init\n    (inside_room water dining_room)\n    (obj_next_to coffe_maker coffee_filter)\n    (has_paper coffee_filter)\n    (inside_room ground_coffee dining_room)\n    (recipient coffe_maker)\n    (has_plug coffe_maker)\n    (pourable water)\n    (closed coffe_maker)\n    (has_switch coffe_maker)\n    (movable ground_coffee)\n    (clean coffe_maker)\n    (off coffe_maker)\n    (containers coffe_maker)\n    (obj_inside coffee_filter coffe_maker)\n    (obj_next_to coffe_maker ground_coffee)\n    (movable coffee_filter)\n    (inside_room coffee_filter dining_room)\n    (obj_next_to coffe_maker water)\n    (inside_room coffe_maker dining_room)\n    (drinkable water)\n    (can_open coffe_maker)\n    (obj_inside water coffe_maker)\n    (inside character bedroom)\n    (grabbable ground_coffee)\n    (obj_inside ground_coffee coffe_maker)\n    (obj_next_to coffee_filter coffe_maker)\n    (can_open ground_coffee)\n    (grabbable coffee_filter)\n    (plugged_in coffe_maker)\n    (obj_next_to water coffe_maker)\n    (movable coffe_maker)\n    (obj_next_to ground_coffee coffe_maker)\n)\n    (:goal\n    (and\n        (closed coffe_maker)\n        (on coffe_maker)\n        (plugged_in coffe_maker)\n        (obj_ontop ground_coffee coffe_maker)\n        (obj_ontop coffee_filter coffe_maker)\n    )\n)\n    )\n    "
      },
      "310_2": {
        "task_name": "Make coffee",
        "natural_language_description": "I walk into the kitchen and find the coffee machine. I open and the coffee maker and add the coffee fitler. I grab the ground coffee and put it in the coffee maker. Then I add water to the coffee make,close it and turn it on.",
        "vh_goal": {
          "actions": [
            "POUR"
          ],
          "goal": [
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "CLOSED"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "ON"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 290
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 290
            }
          ]
        },
        "tl_goal": "(exists x0. (exists x1. (POUR(x0,x1))) then (CLOSED(coffe_maker.290) and ON(coffe_maker.290) and PLUGGED_IN(coffe_maker.290) and ONTOP(coffee_filter.1000, coffe_maker.290) and ONTOP(ground_coffee.1001, coffe_maker.290)))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <coffee_filter> (1000)",
          "[FIND] <coffee_filter> (1000)",
          "[GRAB] <coffee_filter> (1000)",
          "[FIND] <coffe_maker> (290)",
          "[OPEN] <coffe_maker> (290)",
          "[PUTBACK] <coffee_filter> (1000) <coffe_maker> (290)",
          "[FIND] <ground_coffee> (1001)",
          "[GRAB] <ground_coffee> (1001)",
          "[PUTBACK] <ground_coffee> (1001) <coffe_maker> (290)",
          "[WALK] <water> (1002)",
          "[FIND] <water> (1002)",
          "[GRAB] <water> (1002)",
          "[POUR] <water> (1002) <coffe_maker> (290)",
          "[CLOSE] <coffe_maker> (290)",
          "[SWITCHON] <coffe_maker> (290)"
        ],
        "transition_model": "(define (problem Make_coffee)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom ground_coffee water coffe_maker coffee_filter dining_room - object\n)\n    (:init\n    (inside_room water dining_room)\n    (obj_next_to coffe_maker coffee_filter)\n    (has_paper coffee_filter)\n    (inside_room ground_coffee dining_room)\n    (recipient coffe_maker)\n    (has_plug coffe_maker)\n    (pourable water)\n    (closed coffe_maker)\n    (has_switch coffe_maker)\n    (obj_next_to ground_coffee coffee_filter)\n    (obj_next_to coffee_filter ground_coffee)\n    (movable ground_coffee)\n    (clean coffe_maker)\n    (off coffe_maker)\n    (containers coffe_maker)\n    (movable coffee_filter)\n    (inside_room coffee_filter dining_room)\n    (obj_next_to coffe_maker water)\n    (inside_room coffe_maker dining_room)\n    (drinkable water)\n    (can_open coffe_maker)\n    (obj_inside water coffe_maker)\n    (inside character bathroom)\n    (grabbable ground_coffee)\n    (obj_inside ground_coffee coffe_maker)\n    (obj_next_to coffee_filter coffe_maker)\n    (can_open ground_coffee)\n    (grabbable coffee_filter)\n    (plugged_in coffe_maker)\n    (obj_next_to water coffe_maker)\n    (movable coffe_maker)\n)\n    (:goal\n    (and\n        (closed coffe_maker)\n        (on coffe_maker)\n        (plugged_in coffe_maker)\n        (obj_ontop ground_coffee coffe_maker)\n        (obj_ontop coffee_filter coffe_maker)\n    )\n)\n    )\n    "
      },
      "721_2": {
        "task_name": "Make coffee",
        "natural_language_description": "Find coffee maker, plug in coffee maker, open the coffee maker lid, pour water into coffee maker, put coffee filter, put Ground Coffee coffee maker, close the coffee maker, switch on the coffee maker",
        "vh_goal": {
          "actions": [
            "POUR"
          ],
          "goal": [
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "CLOSED"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "ON"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 290
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 290
            }
          ]
        },
        "tl_goal": "(exists x0. (exists x1. (POUR(x0,x1))) then (CLOSED(coffe_maker.290) and ON(coffe_maker.290) and PLUGGED_IN(coffe_maker.290) and ONTOP(ground_coffee.1002, coffe_maker.290) and ONTOP(coffee_filter.1001, coffe_maker.290)))",
        "action_trajectory": [
          "[FIND] <coffe_maker> (290)",
          "[PLUGIN] <coffe_maker> (290)",
          "[OPEN] <coffe_maker> (290)",
          "[WALK] <water> (1000)",
          "[FIND] <water> (1000)",
          "[GRAB] <water> (1000)",
          "[POUR] <water> (1000) <coffe_maker> (290)",
          "[FIND] <coffee_filter> (1001)",
          "[GRAB] <coffee_filter> (1001)",
          "[PUTBACK] <coffee_filter> (1001) <coffe_maker> (290)",
          "[FIND] <ground_coffee> (1002)",
          "[GRAB] <ground_coffee> (1002)",
          "[PUTBACK] <ground_coffee> (1002) <coffe_maker> (290)",
          "[CLOSE] <coffe_maker> (290)",
          "[SWITCHON] <coffe_maker> (290)"
        ],
        "transition_model": "(define (problem Make_coffee)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    coffe_maker coffee_filter water ground_coffee - object\n)\n    (:init\n    (obj_next_to water ground_coffee)\n    (has_paper coffee_filter)\n    (plugged_out coffe_maker)\n    (recipient coffe_maker)\n    (has_plug coffe_maker)\n    (pourable water)\n    (closed coffe_maker)\n    (has_switch coffe_maker)\n    (movable ground_coffee)\n    (clean coffe_maker)\n    (off coffe_maker)\n    (containers coffe_maker)\n    (obj_inside coffee_filter coffe_maker)\n    (movable coffee_filter)\n    (obj_next_to coffe_maker water)\n    (drinkable water)\n    (obj_next_to water coffee_filter)\n    (can_open coffe_maker)\n    (obj_inside water coffe_maker)\n    (obj_next_to ground_coffee water)\n    (obj_next_to coffee_filter water)\n    (grabbable ground_coffee)\n    (obj_inside ground_coffee coffe_maker)\n    (can_open ground_coffee)\n    (grabbable coffee_filter)\n    (obj_next_to water coffe_maker)\n    (movable coffe_maker)\n)\n    (:goal\n    (and\n        (closed coffe_maker)\n        (on coffe_maker)\n        (plugged_in coffe_maker)\n        (obj_ontop ground_coffee coffe_maker)\n        (obj_ontop coffee_filter coffe_maker)\n    )\n)\n    )\n    "
      },
      "764_2": {
        "task_name": "Make coffee",
        "natural_language_description": "Open coffee maker. Put filter in main basket, put ground coffee in filter, fill reservoir with water, turn on coffee maker.",
        "vh_goal": {
          "actions": [
            "POUR"
          ],
          "goal": [
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "CLOSED"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "ON"
            },
            {
              "id": 290,
              "class_name": "coffe_maker",
              "state": "PLUGGED_IN"
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 290
            },
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 290
            }
          ]
        },
        "tl_goal": "(exists x0. (exists x1. (POUR(x0,x1))) then (CLOSED(coffe_maker.290) and ON(coffe_maker.290) and PLUGGED_IN(coffe_maker.290) and ONTOP(coffee_filter.1000, coffe_maker.290) and ONTOP(ground_coffee.1001, coffe_maker.290)))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <coffe_maker> (290)",
          "[FIND] <coffe_maker> (290)",
          "[OPEN] <coffe_maker> (290)",
          "[FIND] <coffee_filter> (1000)",
          "[GRAB] <coffee_filter> (1000)",
          "[PUTBACK] <coffee_filter> (1000) <coffe_maker> (290)",
          "[FIND] <ground_coffee> (1001)",
          "[GRAB] <ground_coffee> (1001)",
          "[PUTBACK] <ground_coffee> (1001) <coffe_maker> (290)",
          "[WALK] <water> (1002)",
          "[FIND] <water> (1002)",
          "[GRAB] <water> (1002)",
          "[POUR] <water> (1002) <coffe_maker> (290)",
          "[CLOSE] <coffe_maker> (290)",
          "[SWITCHON] <coffe_maker> (290)"
        ],
        "transition_model": "(define (problem Make_coffee)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom ground_coffee water coffe_maker coffee_filter dining_room - object\n)\n    (:init\n    (inside_room water dining_room)\n    (obj_next_to coffe_maker coffee_filter)\n    (has_paper coffee_filter)\n    (inside_room ground_coffee dining_room)\n    (recipient coffe_maker)\n    (has_plug coffe_maker)\n    (pourable water)\n    (closed coffe_maker)\n    (has_switch coffe_maker)\n    (movable ground_coffee)\n    (clean coffe_maker)\n    (off coffe_maker)\n    (containers coffe_maker)\n    (obj_inside coffee_filter coffe_maker)\n    (obj_next_to coffe_maker ground_coffee)\n    (movable coffee_filter)\n    (inside_room coffee_filter dining_room)\n    (obj_next_to coffe_maker water)\n    (inside_room coffe_maker dining_room)\n    (drinkable water)\n    (can_open coffe_maker)\n    (obj_inside water coffe_maker)\n    (inside character bathroom)\n    (grabbable ground_coffee)\n    (obj_inside ground_coffee coffe_maker)\n    (obj_next_to coffee_filter coffe_maker)\n    (can_open ground_coffee)\n    (grabbable coffee_filter)\n    (plugged_in coffe_maker)\n    (obj_next_to water coffe_maker)\n    (movable coffe_maker)\n    (obj_next_to ground_coffee coffe_maker)\n)\n    (:goal\n    (and\n        (closed coffe_maker)\n        (on coffe_maker)\n        (plugged_in coffe_maker)\n        (obj_ontop ground_coffee coffe_maker)\n        (obj_ontop coffee_filter coffe_maker)\n    )\n)\n    )\n    "
      },
      "419_2": {
        "task_name": "Set up table",
        "natural_language_description": "Walk to dining room, walk to dining table, arrange chairs, set napkin, set plate, set knife, set fork and glass on table.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 226
            },
            {
              "from_id": 1002,
              "relation_type": "ON",
              "to_id": 226
            },
            {
              "from_id": 1004,
              "relation_type": "ON",
              "to_id": 226
            },
            {
              "from_id": 1005,
              "relation_type": "ON",
              "to_id": 226
            },
            {
              "from_id": 1003,
              "relation_type": "ON",
              "to_id": 226
            }
          ]
        },
        "tl_goal": "(ONTOP(cloth_napkin.1001, table.226) and ONTOP(plate.1002, table.226) and ONTOP(fork.1004, table.226) and ONTOP(cup.1005, table.226) and ONTOP(knife.1003, table.226))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <table> (226)",
          "[FIND] <chair> (1000)",
          "[PULL] <chair> (1000)",
          "[FIND] <cloth_napkin> (1001)",
          "[GRAB] <cloth_napkin> (1001)",
          "[PUTBACK] <cloth_napkin> (1001) <table> (226)",
          "[FIND] <plate> (1002)",
          "[GRAB] <plate> (1002)",
          "[PUTBACK] <plate> (1002) <table> (226)",
          "[FIND] <knife> (1003)",
          "[GRAB] <knife> (1003)",
          "[PUTBACK] <knife> (1003) <table> (226)",
          "[FIND] <fork> (1004)",
          "[GRAB] <fork> (1004)",
          "[PUTBACK] <fork> (1004) <table> (226)",
          "[FIND] <cup> (1005)",
          "[GRAB] <cup> (1005)",
          "[PUTBACK] <cup> (1005) <table> (226)"
        ],
        "transition_model": "(define (problem Set_up_table)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    mat knife fork cup table bedroom chair cloth_napkin plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (obj_next_to fork table)\n    (recipient plate)\n    (surfaces chair)\n    (surfaces table)\n    (recipient cup)\n    (cuttable cloth_napkin)\n    (inside_room cloth_napkin dining_room)\n    (movable cup)\n    (inside_room cup dining_room)\n    (inside_room chair dining_room)\n    (surfaces mat)\n    (obj_next_to table cloth_napkin)\n    (movable mat)\n    (obj_next_to table plate)\n    (movable chair)\n    (grabbable cup)\n    (obj_next_to table cup)\n    (inside_room knife dining_room)\n    (grabbable plate)\n    (sittable chair)\n    (obj_next_to table fork)\n    (grabbable fork)\n    (obj_next_to table knife)\n    (inside_room mat dining_room)\n    (movable fork)\n    (sittable mat)\n    (obj_next_to mat table)\n    (inside_room fork dining_room)\n    (has_paper cloth_napkin)\n    (movable table)\n    (surfaces plate)\n    (grabbable mat)\n    (lieable mat)\n    (obj_ontop mat table)\n    (obj_next_to plate table)\n    (movable cloth_napkin)\n    (obj_next_to cloth_napkin table)\n    (grabbable cloth_napkin)\n    (inside_room table bedroom)\n    (inside_room chair bedroom)\n    (obj_next_to chair table)\n    (grabbable chair)\n    (movable knife)\n    (inside_room table dining_room)\n    (obj_next_to table chair)\n    (obj_ontop table mat)\n    (obj_next_to chair mat)\n    (grabbable knife)\n    (obj_next_to mat chair)\n    (movable plate)\n    (inside character bedroom)\n    (inside_room mat bedroom)\n    (cover_object cloth_napkin)\n    (obj_next_to mat mat)\n    (obj_next_to table mat)\n    (obj_next_to knife table)\n    (pourable cup)\n    (obj_next_to cup table)\n)\n    (:goal\n    (and\n        (obj_ontop plate table)\n        (obj_ontop cloth_napkin table)\n        (obj_ontop fork table)\n        (obj_ontop knife table)\n        (obj_ontop cup table)\n    )\n)\n    )\n    "
      },
      "446_2": {
        "task_name": "Set up table",
        "natural_language_description": "Go to kitchen, go to cupboard with dishes, grab dishes, walk to dining room, find table, put dishes on table.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 226
            },
            {
              "from_id": 1000,
              "relation_type": "ON",
              "to_id": 226
            }
          ]
        },
        "tl_goal": "(ONTOP(plate.1001, table.226) and ONTOP(plate.1000, table.226))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <cupboard> (229)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[FIND] <plate> (1000)",
          "[GRAB] <plate> (1000)",
          "[FIND] <plate> (2.1001)",
          "[GRAB] <plate> (2.1001)",
          "[WALK] <dining_room> (201)",
          "[WALK] <table> (226)",
          "[FIND] <table> (226)",
          "[PUTBACK] <plate> (1000) <table> (226)",
          "[PUTBACK] <plate> (2.1001) <table> (226)"
        ],
        "transition_model": "(define (problem Set_up_table)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    mat home_office table cupboard plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (surfaces table)\n    (surfaces mat)\n    (movable mat)\n    (obj_next_to plate cupboard)\n    (grabbable plate)\n    (obj_inside mat home_office)\n    (closed cupboard)\n    (inside_room mat dining_room)\n    (sittable mat)\n    (obj_next_to mat table)\n    (movable table)\n    (clean cupboard)\n    (inside_room cupboard dining_room)\n    (surfaces plate)\n    (grabbable mat)\n    (lieable mat)\n    (obj_ontop mat table)\n    (containers cupboard)\n    (can_open cupboard)\n    (inside_room table dining_room)\n    (obj_ontop table mat)\n    (obj_inside plate cupboard)\n    (movable plate)\n    (obj_inside table home_office)\n    (obj_next_to mat mat)\n    (obj_next_to table mat)\n    (obj_next_to cupboard plate)\n    (inside character home_office)\n)\n    (:goal\n    (and\n        (obj_ontop plate table)\n    )\n)\n    )\n    "
      },
      "710_2": {
        "task_name": "Set up table",
        "natural_language_description": "Walk to the kitchen. Open the kitchen cabinet. Grab the plate and put it on the table.",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 1001,
              "relation_type": "ON",
              "to_id": 226
            }
          ]
        },
        "tl_goal": "ONTOP(plate.1001, table.226)",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <kitchen_cabinet> (1000)",
          "[FIND] <kitchen_cabinet> (1000)",
          "[OPEN] <kitchen_cabinet> (1000)",
          "[FIND] <plate> (1001)",
          "[GRAB] <plate> (1001)",
          "[FIND] <table> (226)",
          "[PUTBACK] <plate> (1001) <table> (226)"
        ],
        "transition_model": "(define (problem Set_up_table)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    bathroom kitchen_cabinet table plate dining_room - object\n)\n    (:init\n    (inside_room plate dining_room)\n    (recipient plate)\n    (obj_next_to kitchen_cabinet plate)\n    (surfaces table)\n    (obj_next_to plate kitchen_cabinet)\n    (grabbable plate)\n    (obj_next_to table kitchen_cabinet)\n    (closed kitchen_cabinet)\n    (surfaces kitchen_cabinet)\n    (movable table)\n    (clean kitchen_cabinet)\n    (surfaces plate)\n    (obj_inside plate kitchen_cabinet)\n    (obj_next_to kitchen_cabinet table)\n    (inside_room table dining_room)\n    (containers kitchen_cabinet)\n    (movable plate)\n    (inside_room kitchen_cabinet dining_room)\n    (inside character bathroom)\n    (can_open kitchen_cabinet)\n)\n    (:goal\n    (and\n        (obj_ontop plate table)\n    )\n)\n    )\n    "
      },
      "368_1": {
        "task_name": "Get some water",
        "natural_language_description": "I pour water, take a cloth, go to the dining room, clean, take the cloth to the kitchen",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "INSIDE",
              "to_id": 201
            }
          ]
        },
        "tl_goal": "INSIDE(character.65, dining_room.201)",
        "action_trajectory": [
          "[FIND] <cloth_napkin> (1000)",
          "[GRAB] <cloth_napkin> (1000)",
          "[WALK] <dining_room> (201)",
          "[WALK] <chair> (1001)",
          "[FIND] <chair> (1001)",
          "[TURNTO] <chair> (1001)",
          "[WIPE] <chair> (1001)",
          "[PUSH] <chair> (1001)",
          "[WALK] <dining_room> (201)",
          "[DROP] <cloth_napkin> (1000)"
        ],
        "transition_model": "(define (problem Get_some_water)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    home_office dining_room cloth_napkin - object\n)\n    (:init\n    (movable cloth_napkin)\n    (grabbable cloth_napkin)\n    (cuttable cloth_napkin)\n    (cover_object cloth_napkin)\n    (has_paper cloth_napkin)\n    (inside character home_office)\n    (inside_room cloth_napkin dining_room)\n)\n    (:goal\n    (and\n        (inside character dining_room)\n    )\n)\n    )\n    "
      },
      "729_2": {
        "task_name": "Take shower",
        "natural_language_description": "walk to bathroom , find shower , take a shower",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 36
            }
          ]
        },
        "tl_goal": "NEXT_TO(character.65, shower.36)",
        "action_trajectory": [
          "[WALK] <bathroom> (1)",
          "[WALK] <shower> (2.36)",
          "[FIND] <shower> (2.36)"
        ],
        "transition_model": "(define (problem Take_shower)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    shower bathroom dining_room - object\n)\n    (:init\n    (inside character dining_room)\n    (inside_room shower bathroom)\n)\n    (:goal\n    (and\n        (next_to character shower)\n    )\n)\n    )\n    "
      },
      "975_2": {
        "task_name": "Take shower",
        "natural_language_description": "find the dresses, find the towel, walk to bathroom, find the shower, open the shower and take a shower",
        "vh_goal": {
          "actions": [],
          "goal": [
            {
              "from_id": 65,
              "relation_type": "CLOSE",
              "to_id": 36
            }
          ]
        },
        "tl_goal": "NEXT_TO(character.65, shower.36)",
        "action_trajectory": [
          "[FIND] <clothes_dress> (1000)",
          "[FIND] <towel> (1001)",
          "[WALK] <bathroom> (1)",
          "[WALK] <shower> (36)",
          "[FIND] <shower> (36)"
        ],
        "transition_model": "(define (problem Take_shower)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    shower bathroom bedroom - object\n)\n    (:init\n    (inside character bedroom)\n    (inside_room shower bathroom)\n)\n    (:goal\n    (and\n        (next_to character shower)\n    )\n)\n    )\n    "
      },
      "231_2": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "walk to kitchen, fins soap, arrange dishes, wash dishes",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <plate> (1000)",
          "[FIND] <plate> (1000)",
          "[FIND] <dish_soap> (1001)",
          "[FIND] <water> (1002)",
          "[GRAB] <plate> (1000)",
          "[GRAB] <dish_soap> (1001)",
          "[WASH] <plate> (1000)",
          "[RINSE] <plate> (1000)",
          "[DROP] <plate> (1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dish_soap plate dining_room home_office water - object\n)\n    (:init\n    (grabbable plate)\n    (movable plate)\n    (recipient plate)\n    (surfaces plate)\n    (cream dish_soap)\n    (grabbable dish_soap)\n    (movable dish_soap)\n    (pourable dish_soap)\n    (drinkable water)\n    (pourable water)\n    (next_to water plate)\n    (next_to dish_soap plate)\n    (next_to plate water)\n    (inside character home_office)\n    (next_to plate dish_soap)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "31_1": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "I go to the kitchen and turn on the faucet. I get dish soap and put it into the sink. I grab a sponge and a bowl and start cleaning it. I put the bowl into the dishrack. I find a plate and clean it as well. I put it into the dishrack, turn off the faucet and put the sponge back.",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <sink> (231)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <dish_soap> (1000)",
          "[GRAB] <dish_soap> (1000)",
          "[FIND] <bowl> (1001)",
          "[GRAB] <bowl> (1001)",
          "[POUR] <dish_soap> (1000) <sink> (231)",
          "[PUTOBJBACK] <dish_soap> (1000)",
          "[FIND] <sponge> (1002)",
          "[GRAB] <sponge> (1002)",
          "[FIND] <bowl> (1001)",
          "[SCRUB] <bowl> (1001)",
          "[RINSE] <bowl> (1001)",
          "[FIND] <dishrack> (1003)",
          "[PUTBACK] <bowl> (1001) <dishrack> (1003)",
          "[FIND] <plate> (1004)",
          "[GRAB] <plate> (1004)",
          "[SCRUB] <plate> (1004)",
          "[RINSE] <plate> (1004)",
          "[PUTBACK] <plate> (1004) <dishrack> (1003)",
          "[SWITCHOFF] <faucet> (232)",
          "[PUTOBJBACK] <sponge> (1002)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dish_soap plate bowl dining_room bedroom sponge dishrack sink kitchen_counter - object\n)\n    (:init\n    (surfaces kitchen_counter)\n    (containers sink)\n    (recipient sink)\n    (has_switch faucet)\n    (cream dish_soap)\n    (grabbable dish_soap)\n    (movable dish_soap)\n    (pourable dish_soap)\n    (grabbable bowl)\n    (movable bowl)\n    (recipient bowl)\n    (grabbable sponge)\n    (movable sponge)\n    (grabbable dishrack)\n    (movable dishrack)\n    (surfaces dishrack)\n    (grabbable plate)\n    (movable plate)\n    (recipient plate)\n    (surfaces plate)\n    (next_to plate sink)\n    (next_to sponge sink)\n    (next_to dish_soap sink)\n    (next_to sink sponge)\n    (next_to sink bowl)\n    (next_to sink dish_soap)\n    (next_to bowl sink)\n    (inside character bedroom)\n    (next_to sink plate)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "349_1": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "i go to the kitchen, i find the faucet. I turn the faucet on, i grab the plate to wash , i then get the soap. I wash the dishes by hand",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <faucet> (232)",
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <dish_soap> (1000)",
          "[GRAB] <dish_soap> (1000)",
          "[FIND] <plate> (1001)",
          "[GRAB] <plate> (1001)",
          "[WASH] <plate> (1001)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet dish_soap plate dining_room bathroom - object\n)\n    (:init\n    (clean faucet)\n    (off faucet)\n    (has_switch faucet)\n    (cream dish_soap)\n    (grabbable dish_soap)\n    (movable dish_soap)\n    (pourable dish_soap)\n    (grabbable plate)\n    (movable plate)\n    (recipient plate)\n    (surfaces plate)\n    (next_to plate faucet)\n    (next_to dish_soap faucet)\n    (inside character bathroom)\n    (next_to faucet dish_soap)\n    (next_to faucet plate)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "397_1": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "Pick up dish.  Put in soapy water.  Wash dish.",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dish_soap> (1000)",
          "[FIND] <dish_soap> (1000)",
          "[GRAB] <dish_soap> (1000)",
          "[FIND] <plate> (1001)",
          "[GRAB] <plate> (1001)",
          "[PUTBACK] <dish_soap> (1000) <plate> (1001)",
          "[SCRUB] <plate> (1001)",
          "[RINSE] <plate> (1001)",
          "[WIPE] <plate> (1001)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dish_soap bathroom dining_room plate - object\n)\n    (:init\n    (cream dish_soap)\n    (grabbable dish_soap)\n    (movable dish_soap)\n    (pourable dish_soap)\n    (grabbable plate)\n    (movable plate)\n    (recipient plate)\n    (surfaces plate)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "429_2": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "I walk into the kitchen and see dishes in the sink. I go to the sink, fill the sink with soap and water, and wash the dishes. Then I rinse the dishes with clean water and put them in the drying rack.",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <plate> (3.1000)",
          "[FIND] <plate> (3.1000)",
          "[TURNTO] <plate> (3.1000)",
          "[LOOKAT] <plate> (3.1000)",
          "[WALK] <sink> (231)",
          "[FIND] <dish_soap> (1001)",
          "[GRAB] <dish_soap> (1001)",
          "[PUTBACK] <dish_soap> (1001) <sink> (231)",
          "[WASH] <plate> (3.1000)",
          "[RINSE] <plate> (3.1000)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dish_soap dining_room bathroom sink kitchen_counter - object\n)\n    (:init\n    (surfaces kitchen_counter)\n    (containers sink)\n    (recipient sink)\n    (cream dish_soap)\n    (grabbable dish_soap)\n    (movable dish_soap)\n    (pourable dish_soap)\n    (inside character bathroom)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "553_2": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "Walk into Kitchen, walk to sink, grab a plate,put soap on sponge,wash plate with sponge, rinse with water, put away plate in cupboard.",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <sink> (231)",
          "[FIND] <plate> (1000)",
          "[GRAB] <plate> (1000)",
          "[FIND] <soap> (1001)",
          "[GRAB] <soap> (1001)",
          "[PUTBACK] <soap> (1001) <plate> (1000)",
          "[FIND] <water> (1002)",
          "[RINSE] <water> (1002)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[PUTBACK] <plate> (1000) <cupboard> (229)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    plate food_food dining_room home_office cupboard water sink kitchen_counter food_kiwi soap - object\n)\n    (:init\n    (clean cupboard)\n    (closed cupboard)\n    (can_open cupboard)\n    (containers cupboard)\n    (surfaces kitchen_counter)\n    (containers sink)\n    (recipient sink)\n    (grabbable plate)\n    (movable plate)\n    (recipient plate)\n    (surfaces plate)\n    (cream soap)\n    (grabbable soap)\n    (movable soap)\n    (drinkable water)\n    (pourable water)\n    (cuttable food_kiwi)\n    (eatable food_kiwi)\n    (grabbable food_kiwi)\n    (movable food_kiwi)\n    (cuttable food_food)\n    (eatable food_food)\n    (grabbable food_food)\n    (movable food_food)\n    (next_to food_kiwi plate)\n    (ontop plate sink)\n    (next_to food_food plate)\n    (next_to plate sink)\n    (next_to sink soap)\n    (next_to sink plate)\n    (ontop food_kiwi plate)\n    (ontop food_food plate)\n    (inside character home_office)\n    (next_to soap sink)\n    (next_to plate food_kiwi)\n    (next_to plate food_food)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "594_2": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "Make some dish water, grab a dish rag, put dishes in dish water and wash.",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[RUN] <sink> (42)",
          "[FIND] <dish_soap> (1000)",
          "[GRAB] <dish_soap> (1000)",
          "[FIND] <plate> (1001)",
          "[PUTBACK] <dish_soap> (1000) <plate> (1001)",
          "[RINSE] <dish_soap> (1000)",
          "[FIND] <plate> (1001)",
          "[WASH] <plate> (1001)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dish_soap bathroom_counter plate sink - object\n)\n    (:init\n    (surfaces bathroom_counter)\n    (containers sink)\n    (recipient sink)\n    (cream dish_soap)\n    (grabbable dish_soap)\n    (movable dish_soap)\n    (pourable dish_soap)\n    (grabbable plate)\n    (movable plate)\n    (recipient plate)\n    (surfaces plate)\n    (ontop dish_soap sink)\n    (next_to sink dish_soap)\n    (next_to dish_soap sink)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "746_1": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "Wash the drinking glasses by hand",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <dish_soap> (1000)",
          "[FIND] <dish_soap> (1000)",
          "[GRAB] <dish_soap> (1000)",
          "[RUN] <water> (1001)",
          "[FIND] <sink> (231)",
          "[PUTBACK] <dish_soap> (1000) <sink> (231)",
          "[FIND] <sponge> (1002)",
          "[GRAB] <sponge> (1002)",
          "[FIND] <drinking_glass> (1003)",
          "[WASH] <drinking_glass> (1003)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dish_soap dining_room home_office drinking_glass water sponge sink - object\n)\n    (:init\n    (containers sink)\n    (recipient sink)\n    (cream dish_soap)\n    (grabbable dish_soap)\n    (movable dish_soap)\n    (pourable dish_soap)\n    (drinkable water)\n    (pourable water)\n    (grabbable sponge)\n    (movable sponge)\n    (grabbable drinking_glass)\n    (movable drinking_glass)\n    (pourable drinking_glass)\n    (recipient drinking_glass)\n    (inside character home_office)\n    (next_to water sponge)\n    (next_to sponge water)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "961_1": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "Walk to the kitchen and turn to the sink. Put the plate into the sink. Grab and squeeze the dish soap. Scrub the plate then rinse it. Put the plate into the dish rack.",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[WALK] <dining_room> (201)",
          "[WALK] <sink> (231)",
          "[FIND] <sink> (231)",
          "[TURNTO] <sink> (231)",
          "[FIND] <plate> (1000)",
          "[GRAB] <plate> (1000)",
          "[PUTBACK] <plate> (1000) <sink> (231)",
          "[FIND] <dish_soap> (1001)",
          "[GRAB] <dish_soap> (1001)",
          "[SQUEEZE] <dish_soap> (1001)",
          "[SCRUB] <plate> (1000)",
          "[RINSE] <plate> (1000)",
          "[GRAB] <plate> (1000)",
          "[FIND] <dishrack> (1002)",
          "[PUTBACK] <plate> (1000) <dishrack> (1002)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    dish_soap plate dining_room bathroom dishrack sink kitchen_counter food_kiwi - object\n)\n    (:init\n    (surfaces kitchen_counter)\n    (containers sink)\n    (recipient sink)\n    (grabbable plate)\n    (movable plate)\n    (recipient plate)\n    (surfaces plate)\n    (cream dish_soap)\n    (grabbable dish_soap)\n    (movable dish_soap)\n    (pourable dish_soap)\n    (grabbable dishrack)\n    (movable dishrack)\n    (surfaces dishrack)\n    (cuttable food_kiwi)\n    (eatable food_kiwi)\n    (grabbable food_kiwi)\n    (movable food_kiwi)\n    (next_to plate food_kiwi)\n    (ontop food_kiwi plate)\n    (next_to plate sink)\n    (next_to sink dish_soap)\n    (next_to sink plate)\n    (next_to food_kiwi plate)\n    (inside character bathroom)\n    (next_to dish_soap sink)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      },
      "988_1": {
        "task_name": "Wash dishes by hand",
        "natural_language_description": "wash dish in sink, dry, put in cupboard",
        "vh_goal": {
          "actions": [
            "GRAB",
            "WASH|RINSE|SCRUB|WIPE"
          ],
          "goal": []
        },
        "tl_goal": "(exists x0. (GRAB(x0)) then exists x0. ((WASH(x0) or RINSE(x0) or SCRUB(x0) or WIPE(x0))))",
        "action_trajectory": [
          "[FIND] <faucet> (232)",
          "[SWITCHON] <faucet> (232)",
          "[FIND] <dish_soap> (1000)",
          "[GRAB] <dish_soap> (1000)",
          "[SQUEEZE] <dish_soap> (1000)",
          "[PUTOBJBACK] <dish_soap> (1000)",
          "[FIND] <bowl> (1001)",
          "[GRAB] <bowl> (1001)",
          "[WASH] <bowl> (1001)",
          "[RINSE] <bowl> (1001)",
          "[FIND] <towel> (1002)",
          "[GRAB] <towel> (1002)",
          "[WIPE] <bowl> (1001)",
          "[PUTOBJBACK] <towel> (1002)",
          "[FIND] <cupboard> (229)",
          "[OPEN] <cupboard> (229)",
          "[PUTBACK] <bowl> (1001) <cupboard> (229)",
          "[CLOSE] <cupboard> (229)"
        ],
        "transition_model": "(define (problem Wash_dishes_by_hand)\n    (:domain virtualhome)\n    (:objects\n    character - character\n    faucet cupboard bowl - object\n)\n    (:init\n    (clean faucet)\n    (off faucet)\n    (can_open cupboard)\n    (containers cupboard)\n    (has_switch faucet)\n    (grabbable bowl)\n    (movable bowl)\n    (recipient bowl)\n)\n    (:goal\n    (and\n    )\n)\n    )\n    "
      }
    }
  },
  "domain_pddl": "(define (domain virtualhome)\n    (:requirements :typing)\n    (:types \n        object character  ; Define 'object' and 'character' as types\n    )\n\n    (:predicates\n        (closed ?obj - object)  ; obj is closed\n        (open ?obj - object)  ; obj is open\n        (on ?obj - object)  ; obj is turned on, or it is activated\n        (off ?obj - object)  ; obj is turned off, or it is deactivated\n        (plugged_in ?obj - object)  ; obj is plugged in\n        (plugged_out ?obj - object)  ; obj is unplugged\n        (sitting ?char - character)  ; char is sitting, and this represents a state of a character\n        (lying ?char - character)  ; char is lying\n        (clean ?obj - object)  ; obj is clean\n        (dirty ?obj - object)  ; obj is dirty\n        (obj_ontop ?obj1 ?obj2 - object)  ; obj1 is on top of obj2\n        (ontop ?char - character ?obj - object)  ; char is on obj\n        (on_char ?obj - object ?char - character) ; obj is on char\n        (inside_room ?obj ?room - object) ; obj is inside room\n        (obj_inside ?obj1 ?obj2 - object)  ; obj1 is inside obj2\n        (inside ?char - character ?obj - object)  ; char is inside obj\n        (obj_next_to ?obj1 ?obj2 - object)  ; obj1 is close to or next to obj2\n        (next_to ?char - character ?obj - object) ; char is close to or next to obj\n        (between ?obj1 ?obj2 ?obj3 - object)  ; obj1 is between obj2 and obj3\n        (facing ?char - character ?obj - object)  ; char is facing obj\n        (holds_rh ?char - character ?obj - object)  ; char is holding obj with right hand\n        (holds_lh ?char - character ?obj - object)  ; char is holding obj with left hand\n        (grabbable ?obj - object)  ; obj can be grabbed\n        (cuttable ?obj - object)  ; obj can be cut\n        (can_open ?obj - object)  ; obj can be opened\n        (readable ?obj - object)  ; obj can be read\n        (has_paper ?obj - object)  ; obj has paper\n        (movable ?obj - object)  ; obj is movable\n        (pourable ?obj - object)  ; obj can be poured from\n        (cream ?obj - object)  ; obj is cream\n        (has_switch ?obj - object)  ; obj has a switch\n        (lookable ?obj - object)  ; obj can be looked at\n        (has_plug ?obj - object)  ; obj has a plug\n        (drinkable ?obj - object)  ; obj is drinkable\n        (body_part ?obj - object)  ; obj is a body part\n        (recipient ?obj - object)  ; obj is a recipient\n        (containers ?obj - object)  ; obj is a container\n        (cover_object ?obj - object)  ; obj is a cover object\n        (surfaces ?obj - object)  ; obj has surfaces\n        (sittable ?obj - object)  ; obj can be sat on\n        (lieable ?obj - object)  ; obj can be lied on\n        (person ?obj - object)  ; obj is a person\n        (hangable ?obj - object)  ; obj can be hanged\n        (clothes ?obj - object)  ; obj is clothes\n        (eatable ?obj - object)  ; obj is eatable\n        )\n\n    (:action walk_towards\n        :parameters (?char - character ?obj - object)\n        :precondition (and\n                      (not (sitting ?char))\n                      (not (lying ?char))\n        )\n        :effect (and\n                (next_to ?char ?obj)\n                (forall (?far_obj - object) \n                    (when (not (obj_next_to ?far_obj ?obj)) (not (next_to ?char ?far_obj)))\n                )\n                (forall (?close_obj - object)\n                    (when (obj_next_to ?close_obj ?obj) (next_to ?char ?close_obj))\n                )\n                )\n    )\n    (:action walk_into\n        :parameters (?char - character ?room - object)\n        :precondition (and\n                      (not (sitting ?char))\n                      (not (lying ?char))\n        )\n        :effect (and\n                (inside ?char ?room)\n                (forall (?far_obj - object) \n                    (when (not (inside_room ?far_obj ?room)) (not (next_to ?char ?far_obj)))\n                )\n        )\n    )\n    (:action find\n        :parameters (?char - character ?obj - object)\n        :precondition (next_to ?char ?obj)\n        :effect ()\n    )\n    (:action sit\n        :parameters (?char - character ?obj - object)\n        :precondition (and\n                      (next_to ?char ?obj)\n                      (sittable ?obj)\n                      (not (sitting ?char))\n        )\n        :effect (and\n                (sitting ?char)\n                (ontop ?char ?obj)\n        ) \n    )\n    (:action standup\n        :parameters (?char - character)\n        :precondition (or \n                      (sitting ?char)\n                      (lying ?char)\n        )\n        :effect (and \n                (not (sitting ?char))\n                (not (lying ?char))\n        )\n    )\n    (:action grab\n        :parameters (?char - character ?obj - object)\n        :precondition (and\n                      (grabbable ?obj)\n                      (next_to ?char ?obj)\n                      (not (exists (?obj2 - object) (and (obj_inside ?obj ?obj2) (closed ?obj2))))\n                      (not (and (exists (?obj3 - object) (holds_lh ?char ?obj3)) (exists (?obj4 - object) (holds_rh ?char ?obj4))))\n                      )\n        :effect (and\n                (when (exists (?obj3 - object) (holds_lh ?char ?obj3)) (holds_rh ?char ?obj))\n                (when (exists (?obj4 - object) (holds_rh ?char ?obj4)) (holds_lh ?char ?obj))\n                (when \n                    (not (and (exists (?obj3 - object) (holds_lh ?char ?obj3)) (exists (?obj4 - object) (holds_rh ?char ?obj4))))\n                    (holds_rh ?char ?obj)\n                )\n        ) \n    )\n    (:action open\n        :parameters (?char - character ?obj - object)\n        :precondition (and\n                      (can_open ?obj)\n                      (closed ?obj)\n                      (next_to ?char ?obj)\n                      (not (on ?obj))\n        )  \n        :effect (and\n                (open ?obj)\n                (not (closed ?obj))\n        ) \n    )\n    (:action close\n        :parameters (?char - character ?obj - object)\n        :precondition (and\n                      (can_open ?obj)\n                      (open ?obj)\n                      (next_to ?char ?obj)\n        )\n        :effect (and\n                (closed ?obj)\n                (not (on ?obj))\n        ) \n    )\n    (:action put_on\n        :parameters (?char - character ?obj1 - object ?obj2 - object)\n        :precondition (or\n                        (and\n                        (next_to ?char ?obj2)\n                        (holds_lh ?char ?obj1)\n                        )\n                        (and\n                        (next_to ?char ?obj2)\n                        (holds_rh ?char ?obj1)\n                        )\n        )\n        :effect (and\n                (obj_next_to ?obj1 ?obj2)\n                (obj_ontop ?obj1 ?obj2)\n                (not (holds_lh ?char ?obj1))\n                (not (holds_rh ?char ?obj1))\n        )\n    )\n    (:action put_on_character\n        :parameters (?char - character ?obj - object)\n        :precondition (or\n                        (holds_lh ?char ?obj)\n                        (holds_rh ?char ?obj)\n                    )\n        :effect (and\n                (on_char ?obj ?char)\n                (not (holds_lh ?char ?obj))\n                (not (holds_rh ?char ?obj))\n        )\n    )\n    (:action put_inside\n        :parameters (?char - character ?obj1 - object ?obj2 - object)\n        :precondition (or\n                        (and\n                        (next_to ?char ?obj2)\n                        (holds_lh ?char ?obj1)\n                        (not (can_open ?obj2))\n                        )\n                        (and\n                        (next_to ?char ?obj2)\n                        (holds_lh ?char ?obj1)\n                        (open ?obj2)\n                        )\n                        (and\n                        (next_to ?char ?obj2)\n                        (holds_rh ?char ?obj1)\n                        (not (can_open ?obj2))\n                        )\n                        (and\n                        (next_to ?char ?obj2)\n                        (holds_rh ?char ?obj1)\n                        (open ?obj2)\n                        )\n        )\n        :effect (and\n                (obj_inside ?obj1 ?obj2)\n                (not (holds_lh ?char ?obj1))\n                (not (holds_rh ?char ?obj1))\n        ) \n    )\n    (:action switch_on\n        :parameters (?char - character ?obj - object)\n        :precondition (and\n                      (has_switch ?obj)\n                      (off ?obj)\n                      (plugged_in ?obj)\n                      (next_to ?char ?obj)\n                      \n        )  \n        :effect (and\n                (on ?obj)\n                (not (off ?obj))\n        ) \n    )\n    (:action switch_off\n        :parameters (?char - character ?obj - object)\n        :precondition (and\n                      (has_switch ?obj)\n                      (on ?obj)\n                      (next_to ?char ?obj)                  \n        )  \n        :effect (and\n                (off ?obj)\n                (not (on ?obj))\n        ) \n    )\n    (:action drink\n        :parameters (?char - character ?obj - object)\n        :precondition (or\n                      (and\n                      (drinkable ?obj)\n                      (holds_lh ?char ?obj)\n                      )\n                      (and\n                      (drinkable ?obj)\n                      (holds_rh ?char ?obj)\n                      )\n                      (and\n                      (recipient ?obj)\n                      (holds_lh ?char ?obj)\n                      )\n                      (and\n                      (recipient ?obj)\n                      (holds_rh ?char ?obj)\n                      )\n        )  \n        :effect () \n    )\n    (:action turn_to\n        :parameters (?char - character ?obj - object)\n        :precondition ()                  \n        :effect (facing ?char ?obj)\n    )\n    (:action look_at\n        :parameters (?char - character ?obj - object)\n        :precondition (facing ?char ?obj)                  \n        :effect () \n    )\n    (:action wipe\n        :parameters (?char - character ?obj1 - object ?obj2 - object)\n        :precondition (or\n                      (and \n                      (next_to ?char ?obj1) \n                      (holds_lh ?char ?obj2)\n                      )\n                      (and \n                      (next_to ?char ?obj1) \n                      (holds_rh ?char ?obj2)\n                      )\n        )\n        :effect (and \n                (clean ?obj1)\n                (not (dirty ?obj1))\n        )\n    )\n    (:action drop\n        :parameters (?char - character ?obj - object ?room - object)\n        :precondition (or\n                      (and \n                      (holds_lh ?char ?obj)\n                      (obj_inside ?obj ?room)\n                      )\n                      (and \n                      (holds_rh ?char ?obj)\n                      (obj_inside ?obj ?room)\n                      )\n        )               \n        :effect (and\n                (not (holds_lh ?char ?obj))\n                (not (holds_rh ?char ?obj))\n        ) \n    )\n    (:action read \n        :parameters (?char - character ?obj - object)\n        :precondition (or\n                      (and \n                      (readable ?obj) \n                      (holds_lh ?char ?obj)\n                      )\n                      (and \n                      (readable ?obj) \n                      (holds_rh ?char ?obj)\n                      )\n        )\n        :effect ()\n    )\n    (:action touch \n        :parameters (?char - character ?obj - object)\n        :precondition (or\n                      (and \n                      (readable ?obj) \n                      (holds_lh ?char ?obj)\n                      (not (exists (?obj2 - object) (and (obj_inside ?obj ?obj2) (closed ?obj2))))\n                      )\n                      (and \n                      (readable ?obj) \n                      (holds_rh ?char ?obj)\n                      (not (exists (?obj2 - object) (and (obj_inside ?obj ?obj2) (closed ?obj2))))\n                      )\n        )\n        :effect ()\n    )\n    (:action lie \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (lieable ?obj) \n                      (next_to ?char ?obj)\n                      (not (lying ?char))\n        )\n        :effect (and\n                (lying ?char)\n                (ontop ?char ?obj)\n                (not (sitting ?char))\n        )\n    )\n    (:action pour \n        :parameters (?char - character ?obj1 - object ?obj2 - object)\n        :precondition (or\n                      (and \n                      (pourable ?obj1) \n                      (holds_lh ?char ?obj1)\n                      (recipient ?obj2)\n                      (next_to ?char ?obj2)\n                      )\n                      (and \n                      (pourable ?obj1) \n                      (holds_rh ?char ?obj1)\n                      (recipient ?obj2)\n                      (next_to ?char ?obj2)\n                      )\n                      (and \n                      (drinkable ?obj1) \n                      (holds_lh ?char ?obj1)\n                      (recipient ?obj2)\n                      (next_to ?char ?obj2)\n                      )\n                      (and \n                      (drinkable ?obj1) \n                      (holds_rh ?char ?obj1)\n                      (recipient ?obj2)\n                      (next_to ?char ?obj2)\n                      )     \n        )\n        :effect (obj_inside ?obj1 ?obj2)\n    )\n    (:action type \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (has_switch ?obj) \n                      (next_to ?char ?obj)\n        )\n        :effect ()\n    )\n    (:action watch \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (lookable ?obj) \n                      (facing ?char ?obj)\n                      (not (exists (?obj2 - object) (and (obj_inside ?obj ?obj2) (closed ?obj2))))\n        )\n        :effect ()\n    )\n    (:action move \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (movable ?obj) \n                      (next_to ?char ?obj)\n                      (not (exists (?obj2 - object) (and (obj_inside ?obj ?obj2) (closed ?obj2))))\n        )\n        :effect ()\n    )\n    (:action wash \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (next_to ?char ?obj)\n        )\n        :effect (and\n                (clean ?obj)\n                (not (dirty ?obj))\n        )\n    )\n    (:action squeeze \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (next_to ?char ?obj)\n                      (clothes ?obj)\n        )\n        :effect ()\n    )\n    (:action plug_in \n        :parameters (?char - character ?obj - object)\n        :precondition (or\n                        (and \n                        (next_to ?char ?obj)\n                        (has_plug ?obj)\n                        (plugged_out ?obj)\n                        )\n                        (and \n                        (next_to ?char ?obj)\n                        (has_switch ?obj)\n                        (plugged_out ?obj)\n                        )\n                      )\n        :effect (and\n                (plugged_in ?obj)\n                (not (plugged_out ?obj))\n        )\n    )\n    (:action plug_out \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (next_to ?char ?obj)\n                      (has_plug ?obj)\n                      (plugged_in ?obj)\n                      (not (on ?obj))\n        )\n        :effect (and\n                (plugged_out ?obj)\n                (not (plugged_in ?obj))\n        )\n    )\n    (:action cut \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (next_to ?char ?obj)\n                      (eatable ?obj)\n                      (cuttable ?obj)\n        )\n        :effect ()\n    )\n    (:action eat \n        :parameters (?char - character ?obj - object)\n        :precondition (and \n                      (next_to ?char ?obj)\n                      (eatable ?obj)\n        )\n        :effect ()\n    )\n    (:action sleep \n        :parameters (?char - character ?obj - object)\n        :precondition (or \n                      (lying ?char)\n                      (sitting ?char)\n        )\n        :effect ()\n    )\n    (:action wake_up \n        :parameters (?char - character ?obj - object)\n        :precondition (or \n                      (lying ?char)\n                      (sitting ?char)\n        )\n        :effect ()\n    )\n)"
}