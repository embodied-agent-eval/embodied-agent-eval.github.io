{
  "data": {
    "assembling_gift_baskets_0_Beechwood_0_int_0_2021-10-26_12-46-37": {
      "task_name": "assembling_gift_baskets",
      "natural_description": "Put one candle, one cheese, one cookie, and one bow into each basket.",
      "raw_bddl_goal": "(define (problem assembling_gift_baskets_0)\n    (:domain igibson)\n\n    (:objects\n     \tbasket.n.01_1 basket.n.01_2 basket.n.01_3 basket.n.01_4 - basket.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tcandle.n.01_1 candle.n.01_2 candle.n.01_3 candle.n.01_4 - candle.n.01\n    \tcookie.n.01_1 cookie.n.01_2 cookie.n.01_3 cookie.n.01_4 - cookie.n.01\n    \tcheese.n.01_1 cheese.n.01_2 cheese.n.01_3 cheese.n.01_4 - cheese.n.01\n    \tbow.n.08_1 bow.n.08_2 bow.n.08_3 bow.n.08_4 - bow.n.08\n        table.n.02_1 table.n.02_2 - table.n.02\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor basket.n.01_1 floor.n.01_1) \n        (onfloor basket.n.01_2 floor.n.01_1) \n        (onfloor basket.n.01_3 floor.n.01_1) \n        (onfloor basket.n.01_4 floor.n.01_1) \n        (ontop candle.n.01_1 table.n.02_1) \n        (ontop candle.n.01_2 table.n.02_1) \n        (ontop candle.n.01_3 table.n.02_1) \n        (ontop candle.n.01_4 table.n.02_1) \n        (ontop cookie.n.01_1 table.n.02_1) \n        (ontop cookie.n.01_2 table.n.02_1) \n        (ontop cookie.n.01_3 table.n.02_1) \n        (ontop cookie.n.01_4 table.n.02_1) \n        (ontop cheese.n.01_1 table.n.02_2) \n        (ontop cheese.n.01_2 table.n.02_2) \n        (ontop cheese.n.01_3 table.n.02_2) \n        (ontop cheese.n.01_4 table.n.02_2) \n        (ontop bow.n.08_1 table.n.02_2) \n        (ontop bow.n.08_2 table.n.02_2) \n        (ontop bow.n.08_3 table.n.02_2) \n        (ontop bow.n.08_4 table.n.02_2) \n        (inroom floor.n.01_1 living_room) \n        (inroom table.n.02_1 living_room) \n        (inroom table.n.02_2 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forpairs \n                (?basket.n.01 - basket.n.01) \n                (?candle.n.01 - candle.n.01) \n                (inside ?candle.n.01 ?basket.n.01)\n            ) \n            (forpairs \n                (?basket.n.01 - basket.n.01) \n                (?cheese.n.01 - cheese.n.01) \n                (inside ?cheese.n.01 ?basket.n.01)\n            ) \n            (forpairs \n                (?basket.n.01 - basket.n.01) \n                (?cookie.n.01 - cookie.n.01) \n                (inside ?cookie.n.01 ?basket.n.01)\n            ) \n            (forpairs \n                (?basket.n.01 - basket.n.01) \n                (?bow.n.08 - bow.n.08) \n                (inside ?bow.n.08 ?basket.n.01)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not basket_n_01(x0) or forn 1. x1. (not candle_n_01(x1) or inside(x1, x0))) and forall x1. (not candle_n_01(x1) or forn 1. x0. (not basket_n_01(x0) or inside(x1, x0))) and forall x0. (not basket_n_01(x0) or forn 1. x1. (not cheese_n_01(x1) or inside(x1, x0))) and forall x1. (not cheese_n_01(x1) or forn 1. x0. (not basket_n_01(x0) or inside(x1, x0))) and forall x0. (not basket_n_01(x0) or forn 1. x1. (not cookie_n_01(x1) or inside(x1, x0))) and forall x1. (not cookie_n_01(x1) or forn 1. x0. (not basket_n_01(x0) or inside(x1, x0))) and forall x0. (not basket_n_01(x0) or forn 1. x1. (not bow_n_08(x1) or inside(x1, x0))) and forall x1. (not bow_n_08(x1) or forn 1. x0. (not basket_n_01(x0) or inside(x1, x0)))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "bow_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bow_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bow_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bow_3"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_3"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cheese_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cheese_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cheese_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cheese_3"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_3"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cookie_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cookie_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cookie_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cookie_3"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_3"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "candle_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candle_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "candle_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candle_3"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_3"
        }
      ],
      "transition_model": "(define (problem assembling_gift_baskets)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent basket_n_01_1 basket_n_01_2 - basket_n_01 bow_n_08_2 - bow_n_08 candle_n_01_1 - candle_n_01 cheese_n_01_1 - cheese_n_01 cookie_n_01_1 - cookie_n_01 floor_n_01_1 - floor_n_01 table_n_02_1 table_n_02_2 - table_n_02)\n    (:init (onfloor basket_n_01_1 floor_n_01_1) (onfloor basket_n_01_2 floor_n_01_1) (ontop bow_n_08_2 table_n_02_2) (ontop candle_n_01_1 table_n_02_1) (ontop cheese_n_01_1 table_n_02_2) (ontop cookie_n_01_1 table_n_02_1) (same_obj basket_n_01_1 basket_n_01_1) (same_obj basket_n_01_2 basket_n_01_2) (same_obj bow_n_08_2 bow_n_08_2) (same_obj candle_n_01_1 candle_n_01_1) (same_obj cheese_n_01_1 cheese_n_01_1) (same_obj cookie_n_01_1 cookie_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj table_n_02_1 table_n_02_1) (same_obj table_n_02_2 table_n_02_2))\n    (:goal (and (inside bow_n_08_2 basket_n_01_2) (inside candle_n_01_1 basket_n_01_2) (inside cheese_n_01_1 basket_n_01_1) (inside cookie_n_01_1 basket_n_01_1)))\n)",
      "demo": null
    },
    "brushing_lint_off_clothing_0_Pomaria_2_int_0_2021-06-04_17-41-56": {
      "task_name": "brushing_lint_off_clothing",
      "natural_description": "Check every sweater for lint, make sure none of them are dusty, and put them on the bed.",
      "raw_bddl_goal": "(define (problem brushing_lint_off_clothing_0)\n    (:domain igibson)\n\n    (:objects\n     \tsweater.n.01_1 sweater.n.01_2 sweater.n.01_3 sweater.n.01_4 - sweater.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tbed.n.01_1 - bed.n.01\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor sweater.n.01_1 floor.n.01_1) \n        (onfloor sweater.n.01_2 floor.n.01_1) \n        (ontop sweater.n.01_3 bed.n.01_1) \n        (ontop sweater.n.01_4 bed.n.01_1) \n        (dusty sweater.n.01_1) \n        (dusty sweater.n.01_2) \n        (dusty sweater.n.01_3) \n        (dusty sweater.n.01_4) \n        (onfloor scrub_brush.n.01_1 floor.n.01_1) \n        (not \n            (dusty scrub_brush.n.01_1)\n        ) \n        (inroom floor.n.01_1 bedroom) \n        (inroom bed.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?sweater.n.01 - sweater.n.01) \n                (not \n                    (dusty ?sweater.n.01)\n                )\n            ) \n            (forall \n                (?sweater.n.01 - sweater.n.01) \n                (ontop ?sweater.n.01 ?bed.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not sweater_n_01(x0) or (not dusty(x0))) and forall x0. (not sweater_n_01(x0) or ontop(x0, bed.11))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_40"
        },
        {
          "action": "CLEAN",
          "object": "sweater_36"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sweater_36"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "bed_11"
        },
        {
          "action": "CLEAN",
          "object": "sweater_37"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sweater_37"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "bed_11"
        },
        {
          "action": "CLEAN",
          "object": "sweater_38"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sweater_38"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "bed_11"
        },
        {
          "action": "CLEAN",
          "object": "sweater_39"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sweater_39"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "bed_11"
        }
      ],
      "transition_model": "(define (problem brushing_lint_off_clothing)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bed_n_01_1 - bed_n_01 floor_n_01_1 - floor_n_01 scrub_brush_n_01_1 - scrub_brush_n_01 sweater_n_01_1 sweater_n_01_2 sweater_n_01_3 sweater_n_01_4 - sweater_n_01)\n    (:init (dusty sweater_n_01_1) (dusty sweater_n_01_2) (dusty sweater_n_01_3) (not (dusty scrub_brush_n_01_1)) (onfloor scrub_brush_n_01_1 floor_n_01_1) (onfloor sweater_n_01_1 floor_n_01_1) (onfloor sweater_n_01_2 floor_n_01_1) (ontop sweater_n_01_3 bed_n_01_1) (ontop sweater_n_01_4 bed_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj sweater_n_01_1 sweater_n_01_1) (same_obj sweater_n_01_2 sweater_n_01_2) (same_obj sweater_n_01_3 sweater_n_01_3) (same_obj sweater_n_01_4 sweater_n_01_4))\n    (:goal (and (ontop sweater_n_01_1 bed_n_01_1) (not (dusty sweater_n_01_1)) (ontop sweater_n_01_2 bed_n_01_1) (ontop sweater_n_01_3 bed_n_01_1)))\n)",
      "demo": null
    },
    "boxing_books_up_for_storage_0_Benevolence_1_int_0_2021-09-10_15-35-47": {
      "task_name": "boxing_books_up_for_storage",
      "natural_description": "Place the books into the carton for storage.",
      "raw_bddl_goal": "(define (problem boxing_books_up_for_storage_0)\n    (:domain igibson)\n\n    (:objects\n     \tbook.n.02_1 book.n.02_2 book.n.02_3 book.n.02_4 book.n.02_5 book.n.02_6 book.n.02_7 - book.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tshelf.n.01_1 - shelf.n.01\n    \tcarton.n.02_1 - carton.n.02\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor book.n.02_1 floor.n.01_1) \n        (onfloor book.n.02_2 floor.n.01_1) \n        (onfloor book.n.02_3 floor.n.01_1) \n        (onfloor book.n.02_4 floor.n.01_1) \n        (onfloor book.n.02_5 floor.n.01_1) \n        (ontop book.n.02_6 shelf.n.01_1) \n        (ontop book.n.02_7 shelf.n.01_1) \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom shelf.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?book.n.02 - book.n.02) \n                (inside ?book.n.02 ?carton.n.02_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not book_n_02(x0) or inside(x0, carton.66))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "notebook_60"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hardback_65"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_66"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_66"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hardback_64"
        },
        {
          "action": "LEFT_GRASP",
          "object": "notebook_59"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_66"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_66"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "notebook_62"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hardback_65"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_66"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_66"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "notebook_63"
        },
        {
          "action": "LEFT_GRASP",
          "object": "notebook_61"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_66"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_66"
        }
      ],
      "transition_model": "(define (problem boxing_books_up_for_storage)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent book_n_02_2 book_n_02_5 book_n_02_6 book_n_02_7 - book_n_02 carton_n_02_1 - carton_n_02 floor_n_01_1 - floor_n_01 shelf_n_01_1 - shelf_n_01)\n    (:init (onfloor book_n_02_2 floor_n_01_1) (onfloor book_n_02_5 floor_n_01_1) (onfloor carton_n_02_1 floor_n_01_1) (ontop book_n_02_6 shelf_n_01_1) (ontop book_n_02_7 shelf_n_01_1) (same_obj book_n_02_2 book_n_02_2) (same_obj book_n_02_5 book_n_02_5) (same_obj book_n_02_6 book_n_02_6) (same_obj book_n_02_7 book_n_02_7) (same_obj carton_n_02_1 carton_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj shelf_n_01_1 shelf_n_01_1))\n    (:goal (and (inside book_n_02_5 carton_n_02_1) (inside book_n_02_2 carton_n_02_1) (inside book_n_02_7 carton_n_02_1) (inside book_n_02_6 carton_n_02_1)))\n)",
      "demo": null
    },
    "collecting_aluminum_cans_0_Ihlen_1_int_0_2021-06-06_20-13-28": {
      "task_name": "collecting_aluminum_cans",
      "natural_description": "Collect all aluminum cans and place them into the bucket.",
      "raw_bddl_goal": "(define (problem collecting_aluminum_cans_0)\n    (:domain igibson)\n\n    (:objects\n     \tpop.n.02_1 pop.n.02_2 pop.n.02_3 pop.n.02_4 pop.n.02_5 pop.n.02_6 - pop.n.02\n    \tbed.n.01_1 - bed.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tbucket.n.01_1 - bucket.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop pop.n.02_1 bed.n.01_1) \n        (ontop pop.n.02_2 bed.n.01_1) \n        (ontop pop.n.02_3 bed.n.01_1) \n        (onfloor pop.n.02_4 floor.n.01_1) \n        (onfloor pop.n.02_5 floor.n.01_1) \n        (onfloor pop.n.02_6 floor.n.01_1) \n        (ontop bucket.n.01_1 bed.n.01_1) \n        (inroom bed.n.01_1 bedroom) \n        (inroom floor.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?pop.n.02 - pop.n.02) \n                (inside ?pop.n.02 ?bucket.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not pop_n_02(x0) or inside(x0, bucket.118))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "pop_113"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pop_117"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_118"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_118"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pop_115"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pop_114"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_118"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_118"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pop_112"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pop_116"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_118"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_118"
        }
      ],
      "transition_model": "(define (problem collecting_aluminum_cans)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bed_n_01_1 - bed_n_01 bucket_n_01_1 - bucket_n_01 floor_n_01_1 - floor_n_01 pop_n_02_1 pop_n_02_4 pop_n_02_5 pop_n_02_6 - pop_n_02)\n    (:init (onfloor pop_n_02_4 floor_n_01_1) (onfloor pop_n_02_5 floor_n_01_1) (onfloor pop_n_02_6 floor_n_01_1) (ontop bucket_n_01_1 bed_n_01_1) (ontop pop_n_02_1 bed_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj bucket_n_01_1 bucket_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj pop_n_02_1 pop_n_02_1) (same_obj pop_n_02_4 pop_n_02_4) (same_obj pop_n_02_5 pop_n_02_5) (same_obj pop_n_02_6 pop_n_02_6))\n    (:goal (and (inside pop_n_02_1 bucket_n_01_1) (inside pop_n_02_5 bucket_n_01_1) (inside pop_n_02_4 bucket_n_01_1) (inside pop_n_02_6 bucket_n_01_1)))\n)",
      "demo": null
    },
    "mopping_floors_0_Benevolence_2_int_0_2021-10-25_21-01-58": {
      "task_name": "mopping_floors",
      "natural_description": "Use the bucket, soap and broom to clean the stained floor, when you are done, leave the soap in the bucket and place the bucket and broom next to the sink.",
      "raw_bddl_goal": "(define (problem mopping_floors_0)\n    (:domain igibson)\n\n    (:objects\n     \tbroom.n.01_1 - broom.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \tbucket.n.01_1 - bucket.n.01\n    \tpiece_of_cloth.n.01_1 - piece_of_cloth.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor broom.n.01_1 floor.n.01_2) \n        (onfloor soap.n.01_1 floor.n.01_1) \n        (onfloor bucket.n.01_1 floor.n.01_1) \n        (onfloor piece_of_cloth.n.01_1 floor.n.01_1) \n        (stained floor.n.01_1) \n        (inroom floor.n.01_1 bathroom) \n        (inroom floor.n.01_2 corridor) \n        (inroom sink.n.01_1 bathroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?floor.n.01_1)\n            ) \n            (nextto ?bucket.n.01_1 ?sink.n.01_1) \n            (inside ?soap.n.01_1 ?bucket.n.01_1) \n            (nextto ?broom.n.01_1 ?sink.n.01_1)\n        )\n    )\n)",
      "tl_goal": "not stained(room_floor_bathroom.0) and nextto(bucket.0, sink.28) and inside(soap.0, bucket.0) and nextto(broom.0, sink.28)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "bucket_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_28"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "broom_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_28"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "soap_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "dishtowel_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_28"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "dishtowel_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_28"
        },
        {
          "action": "SOAK",
          "object": "dishtowel_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_28"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "dishtowel_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_corridor_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_bathroom_0"
        }
      ],
      "transition_model": "(define (problem mopping_floors)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent broom_n_01_1 - broom_n_01 bucket_n_01_1 - bucket_n_01 floor_n_01_1 floor_n_01_2 - floor_n_01 piece_of_cloth_n_01_1 - piece_of_cloth_n_01 sink_n_01_1 - sink_n_01 soap_n_01_1 - soap_n_01)\n    (:init (onfloor agent_n_01_1 floor_n_01_1) (onfloor broom_n_01_1 floor_n_01_2) (onfloor bucket_n_01_1 floor_n_01_1) (onfloor piece_of_cloth_n_01_1 floor_n_01_1) (onfloor soap_n_01_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj broom_n_01_1 broom_n_01_1) (same_obj bucket_n_01_1 bucket_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj piece_of_cloth_n_01_1 piece_of_cloth_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj soap_n_01_1 soap_n_01_1) (stained floor_n_01_1))\n    (:goal (and (nextto broom_n_01_1 sink_n_01_1) (inside soap_n_01_1 bucket_n_01_1) (nextto bucket_n_01_1 sink_n_01_1) (not (stained floor_n_01_1))))\n)",
      "demo": null
    },
    "preserving_food_0_Rs_int_0_2021-08-25_15-53-33": {
      "task_name": "preserving_food",
      "natural_description": "Slice and cook all the strawberries, then seal them inside the jar, remember to freeze the beef.",
      "raw_bddl_goal": "(define (problem preserving_food_0)\n    (:domain igibson)\n\n    (:objects \n        strawberry.n.01_1 strawberry.n.01_2 - strawberry.n.01\n        beef.n.02_1 - beef.n.02\n        jar.n.01_1 - jar.n.01\n        pan.n.01_1 - pan.n.01\n        electric_refrigerator.n.01_1 - electric_refrigerator.n.01\n        cabinet.n.01_1 - cabinet.n.01\n        countertop.n.01_1 - countertop.n.01\n        carving_knife.n.01_1 - carving_knife.n.01\n        floor.n.01_1 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop strawberry.n.01_1 countertop.n.01_1) \n        (ontop strawberry.n.01_2 countertop.n.01_1) \n        (ontop beef.n.02_1 countertop.n.01_1) \n        (ontop jar.n.01_1 countertop.n.01_1) \n        (open jar.n.01_1) \n        (ontop pan.n.01_1 countertop.n.01_1) \n        (ontop carving_knife.n.01_1 countertop.n.01_1) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?strawberry.n.01 - strawberry.n.01) \n                (sliced ?strawberry.n.01)\n            ) \n            (forall \n                (?strawberry.n.01 - strawberry.n.01) \n                (cooked ?strawberry.n.01)\n            ) \n            (forall \n                (?strawberry.n.01 - strawberry.n.01) \n                (inside ?strawberry.n.01 ?jar.n.01_1)\n            ) \n            (not \n                (open ?jar.n.01_1)\n            ) \n            (inside ?beef.n.02_1 ?electric_refrigerator.n.01_1) \n            (frozen ?beef.n.02_1)\n        )\n    )\n)",
      "tl_goal": "forall x0. (not strawberry_n_01(x0) or sliced(x0)) and forall x0. (not strawberry_n_01(x0) or cooked(x0)) and forall x0. (not strawberry_n_01(x0) or inside(x0, jar.64)) and not open(jar.64) and inside(beef.63, fridge.40) and frozen(beef.63)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "strawberry_62"
        },
        {
          "action": "LEFT_GRASP",
          "object": "strawberry_61"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "saucepan_65"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "saucepan_65"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "carving_knife_66"
        },
        {
          "action": "SLICE",
          "object": "strawberry_62"
        },
        {
          "action": "SLICE",
          "object": "strawberry_61"
        },
        {
          "action": "COOK",
          "object": "strawberry_62_part_0"
        },
        {
          "action": "COOK",
          "object": "strawberry_62_part_1"
        },
        {
          "action": "COOK",
          "object": "strawberry_61_part_0"
        },
        {
          "action": "COOK",
          "object": "strawberry_61_part_1"
        },
        {
          "action": "RIGHT_REALEASE",
          "object": "carving_knife_66"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "saucepan_65"
        },
        {
          "action": "RIGHT_TRANSFER_CONTENTS_INSIDE",
          "object": "jar_64"
        },
        {
          "action": "CLOSE",
          "object": "jar_64"
        },
        {
          "action": "OPEN",
          "object": "fridge_40"
        },
        {
          "action": "LEFT_GRASP",
          "object": "beef_63"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_40"
        },
        {
          "action": "FREEZE",
          "object": "beef_63"
        },
        {
          "action": "CLOSE",
          "object": "fridge_40"
        }
      ],
      "transition_model": "(define (problem preserving_food)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent beef_n_02_1 - beef_n_02 carving_knife_n_01_1 - carving_knife_n_01 countertop_n_01_1 - countertop_n_01 jar_n_01_1 - jar_n_01 pan_n_01_1 - pan_n_01 strawberry_n_01_1 strawberry_n_01_2 - strawberry_n_01)\n    (:init (ontop beef_n_02_1 countertop_n_01_1) (ontop carving_knife_n_01_1 countertop_n_01_1) (ontop jar_n_01_1 countertop_n_01_1) (ontop pan_n_01_1 countertop_n_01_1) (ontop strawberry_n_01_1 countertop_n_01_1) (ontop strawberry_n_01_2 countertop_n_01_1) (open jar_n_01_1) (same_obj beef_n_02_1 beef_n_02_1) (same_obj carving_knife_n_01_1 carving_knife_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj jar_n_01_1 jar_n_01_1) (same_obj pan_n_01_1 pan_n_01_1) (same_obj strawberry_n_01_1 strawberry_n_01_1) (same_obj strawberry_n_01_2 strawberry_n_01_2))\n    (:goal (and (inside strawberry_n_01_2 jar_n_01_1) (inside strawberry_n_01_1 jar_n_01_1) (cooked strawberry_n_01_2) (sliced strawberry_n_01_1)))\n)",
      "demo": null
    },
    "re-shelving_library_books_0_Rs_int_0_2021-10-25_21-22-26": {
      "task_name": "re-shelving_library_books",
      "natural_description": "Place books 1 through 4 on the shelf, and place books 5 through 8 on the table.",
      "raw_bddl_goal": "(define (problem re-shelving_library_books_0)\n    (:domain igibson)\n\n    (:objects\n     \tbook.n.02_1 book.n.02_2 book.n.02_3 book.n.02_4 book.n.02_5 book.n.02_6 book.n.02_7 book.n.02_8 - book.n.02\n    \ttable.n.02_1 - table.n.02\n    \tshelf.n.01_1 - shelf.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop book.n.02_1 table.n.02_1) \n        (ontop book.n.02_2 table.n.02_1) \n        (ontop book.n.02_3 table.n.02_1) \n        (ontop book.n.02_4 table.n.02_1) \n        (ontop book.n.02_5 table.n.02_1) \n        (ontop book.n.02_6 table.n.02_1) \n        (ontop book.n.02_7 table.n.02_1) \n        (ontop book.n.02_8 table.n.02_1) \n        (inroom table.n.02_1 living_room) \n        (inroom shelf.n.01_1 living_room) \n        (inroom floor.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (ontop ?book.n.02_1 ?shelf.n.01_1) \n            (ontop ?book.n.02_2 ?shelf.n.01_1) \n            (ontop ?book.n.02_3 ?shelf.n.01_1) \n            (ontop ?book.n.02_4 ?shelf.n.01_1) \n            (ontop ?book.n.02_5 ?table.n.02_1) \n            (ontop ?book.n.02_6 ?table.n.02_1) \n            (ontop ?book.n.02_7 ?table.n.02_1) \n            (ontop ?book.n.02_8 ?table.n.02_1)\n        )\n    )\n)",
      "tl_goal": "ontop(hardback.0, shelf.19) and ontop(hardback.1, shelf.19) and ontop(hardback.2, shelf.19) and ontop(notebook.0, shelf.19) and ontop(hardback.3, breakfast_table.9) and ontop(notebook.1, breakfast_table.9) and ontop(notebook.2, breakfast_table.9) and ontop(notebook.3, breakfast_table.9)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "hardback_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hardback_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "shelf_19"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "shelf_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hardback_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "notebook_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "shelf_19"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "shelf_19"
        }
      ],
      "transition_model": "(define (problem re-shelving_library_books)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent book_n_02_1 book_n_02_2 book_n_02_3 book_n_02_4 book_n_02_5 book_n_02_6 book_n_02_7 book_n_02_8 - book_n_02 shelf_n_01_1 - shelf_n_01 table_n_02_1 - table_n_02)\n    (:init (ontop book_n_02_1 table_n_02_1) (ontop book_n_02_2 table_n_02_1) (ontop book_n_02_3 table_n_02_1) (ontop book_n_02_4 table_n_02_1) (ontop book_n_02_5 table_n_02_1) (ontop book_n_02_6 table_n_02_1) (ontop book_n_02_7 table_n_02_1) (ontop book_n_02_8 table_n_02_1) (same_obj book_n_02_1 book_n_02_1) (same_obj book_n_02_2 book_n_02_2) (same_obj book_n_02_3 book_n_02_3) (same_obj book_n_02_4 book_n_02_4) (same_obj book_n_02_5 book_n_02_5) (same_obj book_n_02_6 book_n_02_6) (same_obj book_n_02_7 book_n_02_7) (same_obj book_n_02_8 book_n_02_8) (same_obj shelf_n_01_1 shelf_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (ontop book_n_02_8 table_n_02_1) (ontop book_n_02_4 shelf_n_01_1) (ontop book_n_02_5 table_n_02_1) (ontop book_n_02_2 shelf_n_01_1)))\n)",
      "demo": null
    },
    "polishing_silver_0_Merom_1_int_0_2021-10-26_11-43-15": {
      "task_name": "polishing_silver",
      "natural_description": "Polish all spoons and put them inside the cabinet.",
      "raw_bddl_goal": "(define (problem polishing_silver_0)\n    (:domain igibson)\n\n    (:objects\n     \tspoon.n.01_1 spoon.n.01_2 spoon.n.01_3 spoon.n.01_4 - spoon.n.01\n    \trag.n.01_1 - rag.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty spoon.n.01_1) \n        (dusty spoon.n.01_2) \n        (dusty spoon.n.01_3) \n        (dusty spoon.n.01_4) \n        (inside rag.n.01_1 cabinet.n.01_1) \n        (inside spoon.n.01_1 cabinet.n.01_1) \n        (inside spoon.n.01_2 cabinet.n.01_1) \n        (inside spoon.n.01_3 cabinet.n.01_1) \n        (inside spoon.n.01_4 cabinet.n.01_1) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?spoon.n.01_1)\n            ) \n            (not \n                (dusty ?spoon.n.01_2)\n            ) \n            (not \n                (dusty ?spoon.n.01_3)\n            ) \n            (not \n                (dusty ?spoon.n.01_4)\n            ) \n            (not \n                (inside ?rag.n.01_1 ?cabinet.n.01_1)\n            ) \n            (inside ?spoon.n.01_1 ?cabinet.n.01_1) \n            (inside ?spoon.n.01_2 ?cabinet.n.01_1) \n            (inside ?spoon.n.01_3 ?cabinet.n.01_1) \n            (inside ?spoon.n.01_4 ?cabinet.n.01_1)\n        )\n    )\n)",
      "tl_goal": "not dusty(spoon.97) and not dusty(spoon.98) and not dusty(spoon.99) and not dusty(spoon.100) and not inside(rag.101, bottom_cabinet.49) and inside(spoon.97, bottom_cabinet.49) and inside(spoon.98, bottom_cabinet.49) and inside(spoon.99, bottom_cabinet.49) and inside(spoon.100, bottom_cabinet.49)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_49"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_101"
        },
        {
          "action": "CLEAN",
          "object": "spoon_97"
        },
        {
          "action": "CLEAN",
          "object": "spoon_99"
        },
        {
          "action": "CLEAN",
          "object": "spoon_98"
        },
        {
          "action": "CLEAN",
          "object": "spoon_100"
        }
      ],
      "transition_model": "(define (problem polishing_silver)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 rag_n_01_1 - rag_n_01 spoon_n_01_1 spoon_n_01_2 spoon_n_01_3 spoon_n_01_4 - spoon_n_01)\n    (:init (dusty spoon_n_01_1) (dusty spoon_n_01_3) (dusty spoon_n_01_4) (inside rag_n_01_1 cabinet_n_01_1) (inside spoon_n_01_1 cabinet_n_01_1) (inside spoon_n_01_2 cabinet_n_01_1) (inside spoon_n_01_3 cabinet_n_01_1) (inside spoon_n_01_4 cabinet_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj spoon_n_01_1 spoon_n_01_1) (same_obj spoon_n_01_2 spoon_n_01_2) (same_obj spoon_n_01_3 spoon_n_01_3) (same_obj spoon_n_01_4 spoon_n_01_4))\n    (:goal (and (inside spoon_n_01_4 cabinet_n_01_1) (not (dusty spoon_n_01_3)) (inside spoon_n_01_3 cabinet_n_01_1) (not (dusty spoon_n_01_1))))\n)",
      "demo": null
    },
    "packing_boxes_for_household_move_or_trip_0_Ihlen_1_int_0_2021-06-08_19-16-19": {
      "task_name": "packing_boxes_for_household_move_or_trip",
      "natural_description": "Pack all plates, the dishtowel, books, shirts, and the sweater inside separate cartons.",
      "raw_bddl_goal": "(define (problem packing_boxes_for_household_move_or_trip_0)\n    (:domain igibson)\n\n    (:objects\n     \tcarton.n.02_1 carton.n.02_2 - carton.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tbook.n.02_1 book.n.02_2 - book.n.02\n    \ttable.n.02_1 - table.n.02\n    \tsweater.n.01_1 - sweater.n.01\n    \tshirt.n.01_1 shirt.n.01_2 - shirt.n.01\n    \tplate.n.04_1 plate.n.04_2 plate.n.04_3 plate.n.04_4 - plate.n.04\n    \tdishtowel.n.01_1 - dishtowel.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (onfloor carton.n.02_2 floor.n.01_1) \n        (ontop book.n.02_2 table.n.02_1) \n        (ontop book.n.02_1 table.n.02_1) \n        (onfloor sweater.n.01_1 floor.n.01_1) \n        (onfloor shirt.n.01_1 floor.n.01_1) \n        (onfloor shirt.n.01_2 floor.n.01_1) \n        (ontop plate.n.04_1 table.n.02_1) \n        (onfloor plate.n.04_2 floor.n.01_1) \n        (onfloor plate.n.04_3 floor.n.01_1) \n        (onfloor plate.n.04_4 floor.n.01_1) \n        (onfloor dishtowel.n.01_1 floor.n.01_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom table.n.02_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (exists \n                (?carton.n.02 - carton.n.02) \n                (and \n                    (forall \n                        (?plate.n.04 - plate.n.04) \n                        (inside ?plate.n.04 ?carton.n.02)\n                    ) \n                    (inside ?dishtowel.n.01_1 ?carton.n.02)\n                )\n            ) \n            (exists \n                (?carton.n.02 - carton.n.02) \n                (and \n                    (forall \n                        (?book.n.02 - book.n.02) \n                        (inside ?book.n.02 ?carton.n.02)\n                    ) \n                    (forall \n                        (?shirt.n.01 - shirt.n.01) \n                        (inside ?shirt.n.01 ?carton.n.02)\n                    ) \n                    (inside ?sweater.n.01_1 ?carton.n.02)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "exists x0. (not carton_n_02(x0) or ((forall x1. (not plate_n_04(x1) or inside(x1, x0))) and inside(dishtowel.0, x0))) and exists x0. (not carton_n_02(x0) or ((forall x1. (not book_n_02(x1) or inside(x1, x0))) and (forall x1. (not shirt_n_01(x1) or inside(x1, x0))) and inside(sweater.0, x0)))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "t-shirt_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "t-shirt_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "notebook_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hardback_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "sweater_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_3"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "dishtowel_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        }
      ],
      "transition_model": "(define (problem packing_boxes_for_household_move_or_trip)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent carton_n_02_1 carton_n_02_2 - carton_n_02 dishtowel_n_01_1 - dishtowel_n_01 floor_n_01_1 - floor_n_01 plate_n_04_2 - plate_n_04 shirt_n_01_1 shirt_n_01_2 - shirt_n_01)\n    (:init (onfloor carton_n_02_1 floor_n_01_1) (onfloor carton_n_02_2 floor_n_01_1) (onfloor dishtowel_n_01_1 floor_n_01_1) (onfloor plate_n_04_2 floor_n_01_1) (onfloor shirt_n_01_1 floor_n_01_1) (onfloor shirt_n_01_2 floor_n_01_1) (same_obj carton_n_02_1 carton_n_02_1) (same_obj carton_n_02_2 carton_n_02_2) (same_obj dishtowel_n_01_1 dishtowel_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj plate_n_04_2 plate_n_04_2) (same_obj shirt_n_01_1 shirt_n_01_1) (same_obj shirt_n_01_2 shirt_n_01_2))\n    (:goal (and (inside shirt_n_01_1 carton_n_02_1) (inside plate_n_04_2 carton_n_02_2) (inside dishtowel_n_01_1 carton_n_02_2) (inside shirt_n_01_2 carton_n_02_1)))\n)",
      "demo": null
    },
    "cleaning_freezer_0_Pomaria_1_int_0_2021-10-26_12-59-25": {
      "task_name": "cleaning_freezer",
      "natural_description": "Clean the stained freezer and remove all food items from the freezer.",
      "raw_bddl_goal": "(define (problem cleaning_freezer_0)\n    (:domain igibson)\n\n    (:objects\n     \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tfood.n.01_1 food.n.01_2 food.n.01_3 - food.n.01\n    \tcleansing_agent.n.01_1 - cleansing_agent.n.01\n    \ttable.n.02_1 - table.n.02\n    \ttowel.n.01_1 - towel.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \tstove.n.01_1 - stove.n.01\n    \tdoor.n.01_1 - door.n.01\n    \tchair.n.01_1 - chair.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (stained electric_refrigerator.n.01_1) \n        (inside food.n.01_1 electric_refrigerator.n.01_1) \n        (inside food.n.01_2 electric_refrigerator.n.01_1) \n        (inside food.n.01_3 electric_refrigerator.n.01_1) \n        (ontop cleansing_agent.n.01_1 table.n.02_1) \n        (ontop towel.n.01_1 table.n.02_1) \n        (inroom floor.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom stove.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom door.n.01_1 kitchen) \n        (inroom table.n.02_1 kitchen) \n        (inroom chair.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?electric_refrigerator.n.01_1)\n            ) \n            (forall \n                (?food.n.01 - food.n.01) \n                (not \n                    (inside ?food.n.01 ?electric_refrigerator.n.01_1)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "not stained(fridge.20) and forall x0. (not food_n_01(x0) or (not inside(x0, fridge.20)))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "fridge_20"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pop_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pop_2"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "countertop_31"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "countertop_31"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pop_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "countertop_31"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hand_towel_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_37"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_37"
        },
        {
          "action": "SOAK",
          "object": "hand_towel_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_37"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hand_towel_0"
        },
        {
          "action": "CLEAN",
          "object": "fridge_20"
        },
        {
          "action": "CLOSE",
          "object": "fridge_20"
        }
      ],
      "transition_model": "(define (problem cleaning_freezer)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent electric_refrigerator_n_01_1 - electric_refrigerator_n_01 food_n_01_1 food_n_01_2 food_n_01_3 - food_n_01 sink_n_01_1 - sink_n_01 table_n_02_1 - table_n_02 towel_n_01_1 - towel_n_01)\n    (:init (inside food_n_01_1 electric_refrigerator_n_01_1) (inside food_n_01_2 electric_refrigerator_n_01_1) (inside food_n_01_3 electric_refrigerator_n_01_1) (ontop towel_n_01_1 table_n_02_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj food_n_01_1 food_n_01_1) (same_obj food_n_01_2 food_n_01_2) (same_obj food_n_01_3 food_n_01_3) (same_obj sink_n_01_1 sink_n_01_1) (same_obj table_n_02_1 table_n_02_1) (same_obj towel_n_01_1 towel_n_01_1) (stained electric_refrigerator_n_01_1))\n    (:goal (and (not (inside food_n_01_2 electric_refrigerator_n_01_1)) (not (inside food_n_01_1 electric_refrigerator_n_01_1)) (not (stained electric_refrigerator_n_01_1)) (not (inside food_n_01_3 electric_refrigerator_n_01_1))))\n)",
      "demo": null
    },
    "installing_a_modem_0_Beechwood_0_int_0_2021-10-25_20-28-55": {
      "task_name": "installing_a_modem",
      "natural_description": "Place the modem under the table and make sure it is turned on.",
      "raw_bddl_goal": "(define (problem installing_a_modem_0)\n    (:domain igibson)\n\n    (:objects\n     \tmodem.n.01_1 - modem.n.01\n    \ttable.n.02_1 - table.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (not \n            (toggled_on modem.n.01_1)\n        ) \n        (ontop modem.n.01_1 table.n.02_1) \n        (inroom table.n.02_1 home_office) \n        (inroom floor.n.01_1 home_office) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (toggled_on ?modem.n.01_1) \n            (under ?modem.n.01_1 ?table.n.02_1)\n        )\n    )\n)",
      "tl_goal": "toggledon(modem.0) and under(modem.0, breakfast_table.37)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "modem_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "modem_0"
        },
        {
          "action": "RIGHT_PLACE_UNDER",
          "object": "breakfast_table_37"
        }
      ],
      "transition_model": "(define (problem installing_a_modem)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent modem_n_01_1 - modem_n_01 table_n_02_1 - table_n_02)\n    (:init (not (toggled_on modem_n_01_1)) (ontop modem_n_01_1 table_n_02_1) (same_obj modem_n_01_1 modem_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (under modem_n_01_1 table_n_02_1) (toggled_on modem_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_up_after_a_meal_0_Wainscott_0_int_0_2021-10-20_05-33-24": {
      "task_name": "cleaning_up_after_a_meal",
      "natural_description": "Clean all the stained tableware, put all hamburgers into sack1 which is on the floor, and clean the stained floor, chair, and table.",
      "raw_bddl_goal": "(define (problem cleaning_up_after_a_meal_0)\n    (:domain igibson)\n\n    (:objects\n     \tbowl.n.01_1 bowl.n.01_2 - bowl.n.01\n    \ttable.n.02_1 - table.n.02\n    \tsack.n.01_1 - sack.n.01\n    \tchair.n.01_1 chair.n.01_2 - chair.n.01\n    \tplate.n.04_1 plate.n.04_2 plate.n.04_3 plate.n.04_4 - plate.n.04\n    \tcup.n.01_1 cup.n.01_2 - cup.n.01\n    \thamburger.n.01_1 hamburger.n.01_2 - hamburger.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \tdetergent.n.02_1 - detergent.n.02\n    \tdishwasher.n.01_1 - dishwasher.n.01\n        sink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop bowl.n.01_1 table.n.02_1) \n        (ontop bowl.n.01_2 table.n.02_1) \n        (stained bowl.n.01_1) \n        (stained bowl.n.01_2) \n        (ontop sack.n.01_1 table.n.02_1) \n        (ontop plate.n.04_1 table.n.02_1) \n        (ontop plate.n.04_2 table.n.02_1) \n        (ontop plate.n.04_3 table.n.02_1) \n        (ontop plate.n.04_4 table.n.02_1) \n        (stained plate.n.04_1) \n        (stained plate.n.04_2) \n        (stained plate.n.04_3) \n        (stained plate.n.04_4) \n        (ontop cup.n.01_1 table.n.02_1) \n        (ontop cup.n.01_2 table.n.02_1) \n        (stained cup.n.01_1) \n        (stained cup.n.01_2) \n        (ontop hamburger.n.01_1 chair.n.01_2) \n        (onfloor hamburger.n.01_2 floor.n.01_1) \n        (onfloor detergent.n.02_1 floor.n.01_1) \n        (stained chair.n.01_1) \n        (stained chair.n.01_2) \n        (stained table.n.02_1) \n        (inroom dishwasher.n.01_1 kitchen) \n        (inroom floor.n.01_1 dining_room) \n        (inroom floor.n.01_2 kitchen) \n        (inroom table.n.02_1 dining_room) \n        (inroom chair.n.01_1 dining_room) \n        (inroom chair.n.01_2 dining_room) \n        (inroom sink.n.01_1 kitchen)\n        (onfloor agent.n.01_1 floor.n.01_2)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?bowl.n.01 - bowl.n.01) \n                (not \n                    (stained ?bowl.n.01)\n                )\n            ) \n            (forall \n                (?plate.n.04 - plate.n.04) \n                (not \n                    (stained ?plate.n.04)\n                )\n            ) \n            (forall \n                (?cup.n.01 - cup.n.01) \n                (not \n                    (stained ?cup.n.01)\n                )\n            ) \n            (forall \n                (?hamburger.n.01 - hamburger.n.01) \n                (inside ?hamburger.n.01 ?sack.n.01_1)\n            ) \n            (onfloor ?sack.n.01_1 ?floor.n.01_1) \n            (not \n                (stained ?floor.n.01_1)\n            ) \n            (not \n                (stained ?chair.n.01_2)\n            ) \n            (not \n                (stained ?floor.n.01_1)\n            ) \n            (not \n                (stained ?table.n.02_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not bowl_n_01(x0) or (not stained(x0))) and forall x0. (not plate_n_04(x0) or (not stained(x0))) and forall x0. (not cup_n_01(x0) or (not stained(x0))) and forall x0. (not hamburger_n_01(x0) or inside(x0, paper_bag.145)) and onfloor(paper_bag.145, room_floor_dining_room.0) and not stained(room_floor_dining_room.0) and not stained(straight_chair.3) and not stained(room_floor_dining_room.0) and not stained(breakfast_table.1)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_147"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cup_151"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_149"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bowl_144"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bowl_143"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_148"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cup_150"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_146"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_83"
        },
        {
          "action": "CLOSE",
          "object": "dishwasher_83"
        },
        {
          "action": "TOGGLE_ON",
          "object": "dishwasher_83"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "dishwasher_83"
        },
        {
          "action": "OPEN",
          "object": "dishwasher_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "detergent_154"
        },
        {
          "action": "CLEAN",
          "object": "straight_chair_3"
        },
        {
          "action": "CLEAN",
          "object": "breakfast_table_1"
        },
        {
          "action": "LEFT_RELEASE",
          "object": "detergent_154"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hamburger_152"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hamburger_153"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "paper_bag_145"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "paper_bag_145"
        },
        {
          "action": "LEFT_GRASP",
          "object": "paper_bag_145"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_dining_room_0"
        }
      ],
      "transition_model": "(define (problem cleaning_up_after_a_meal)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bowl_n_01_1 bowl_n_01_2 - bowl_n_01 cup_n_01_1 cup_n_01_2 - cup_n_01 dishwasher_n_01_1 - dishwasher_n_01 plate_n_04_1 plate_n_04_2 plate_n_04_3 plate_n_04_4 - plate_n_04 sack_n_01_1 - sack_n_01 sink_n_01_1 - sink_n_01 table_n_02_1 - table_n_02)\n    (:init (ontop bowl_n_01_1 table_n_02_1) (ontop bowl_n_01_2 table_n_02_1) (ontop cup_n_01_1 table_n_02_1) (ontop cup_n_01_2 table_n_02_1) (ontop plate_n_04_1 table_n_02_1) (ontop plate_n_04_2 table_n_02_1) (ontop plate_n_04_3 table_n_02_1) (ontop plate_n_04_4 table_n_02_1) (ontop sack_n_01_1 table_n_02_1) (same_obj bowl_n_01_1 bowl_n_01_1) (same_obj bowl_n_01_2 bowl_n_01_2) (same_obj cup_n_01_1 cup_n_01_1) (same_obj cup_n_01_2 cup_n_01_2) (same_obj dishwasher_n_01_1 dishwasher_n_01_1) (same_obj plate_n_04_1 plate_n_04_1) (same_obj plate_n_04_2 plate_n_04_2) (same_obj plate_n_04_3 plate_n_04_3) (same_obj plate_n_04_4 plate_n_04_4) (same_obj sack_n_01_1 sack_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj table_n_02_1 table_n_02_1) (stained bowl_n_01_1) (stained bowl_n_01_2) (stained plate_n_04_4) (stained table_n_02_1))\n    (:goal (and (not (stained bowl_n_01_2)) (not (stained plate_n_04_4)) (not (stained table_n_02_1)) (not (stained bowl_n_01_1))))\n)",
      "demo": null
    },
    "putting_away_Christmas_decorations_0_Wainscott_0_int_0_2021-06-06_17-03-25": {
      "task_name": "putting_away_Christmas_decorations",
      "natural_description": "Place all wreaths and bows next to the cabinet, and put all ribbons inside the cabinet.",
      "raw_bddl_goal": "(define (problem putting_away_Christmas_decorations_0)\n    (:domain igibson)\n\n    (:objects\n     \twreath.n.01_1 wreath.n.01_2 - wreath.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tbow.n.08_1 bow.n.08_2 bow.n.08_3 - bow.n.08\n    \tribbon.n.01_1 ribbon.n.01_2 ribbon.n.01_3 - ribbon.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor wreath.n.01_1 floor.n.01_1) \n        (onfloor wreath.n.01_2 floor.n.01_1) \n        (onfloor bow.n.08_1 floor.n.01_1) \n        (onfloor bow.n.08_2 floor.n.01_1) \n        (onfloor bow.n.08_3 floor.n.01_1) \n        (onfloor ribbon.n.01_1 floor.n.01_1) \n        (onfloor ribbon.n.01_2 floor.n.01_1) \n        (onfloor ribbon.n.01_3 floor.n.01_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom cabinet.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?wreath.n.01 - wreath.n.01) \n                (nextto ?wreath.n.01 ?cabinet.n.01_1)\n            ) \n            (forall \n                (?bow.n.08 - bow.n.08) \n                (nextto ?bow.n.08 ?cabinet.n.01_1)\n            ) \n            (forall \n                (?ribbon.n.01 - ribbon.n.01) \n                (inside ?ribbon.n.01 ?cabinet.n.01_1)\n            )\n        )\n    )\n)\n",
      "tl_goal": "forall x0. (not wreath_n_01(x0) or nextto(x0, bottom_cabinet.79)) and forall x0. (not bow_n_08(x0) or nextto(x0, bottom_cabinet.79)) and forall x0. (not ribbon_n_01(x0) or inside(x0, bottom_cabinet.79))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "ribbon_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "LEFT_GRASP",
          "object": "ribbon_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "ribbon_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "wreath_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "wreath_1"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bow_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bow_1"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bow_2"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "bottom_cabinet_79"
        }
      ],
      "transition_model": "(define (problem putting_away_Christmas_decorations)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bow_n_08_1 bow_n_08_2 - bow_n_08 cabinet_n_01_1 - cabinet_n_01 floor_n_01_1 - floor_n_01 ribbon_n_01_1 ribbon_n_01_3 - ribbon_n_01)\n    (:init (onfloor bow_n_08_1 floor_n_01_1) (onfloor bow_n_08_2 floor_n_01_1) (onfloor ribbon_n_01_1 floor_n_01_1) (onfloor ribbon_n_01_3 floor_n_01_1) (same_obj bow_n_08_1 bow_n_08_1) (same_obj bow_n_08_2 bow_n_08_2) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj ribbon_n_01_1 ribbon_n_01_1) (same_obj ribbon_n_01_3 ribbon_n_01_3))\n    (:goal (and (inside ribbon_n_01_3 cabinet_n_01_1) (nextto bow_n_08_2 cabinet_n_01_1) (nextto bow_n_08_1 cabinet_n_01_1) (inside ribbon_n_01_1 cabinet_n_01_1)))\n)",
      "demo": null
    },
    "setting_up_candles_0_Wainscott_0_int_0_2021-10-26_13-40-51": {
      "task_name": "setting_up_candles",
      "natural_description": "Place 3 candles on each table.",
      "raw_bddl_goal": "(define (problem setting_up_candles_0)\n    (:domain igibson)\n\n    (:objects\n        candle.n.01_1 candle.n.01_2 candle.n.01_3 candle.n.01_4 candle.n.01_5 candle.n.01_6 - candle.n.01\n        table.n.02_1 table.n.02_2 - table.n.02\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        carton.n.02_1 carton.n.02_2 - carton.n.02\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (onfloor carton.n.02_2 floor.n.01_1) \n        (inside candle.n.01_1 carton.n.02_1) \n        (inside candle.n.01_2 carton.n.02_1) \n        (inside candle.n.01_3 carton.n.02_1) \n        (inside candle.n.01_4 carton.n.02_2) \n        (inside candle.n.01_5 carton.n.02_2) \n        (inside candle.n.01_6 carton.n.02_2) \n        (inroom floor.n.01_1 living_room) \n        (inroom floor.n.01_2 dining_room) \n        (inroom table.n.02_1 living_room) \n        (inroom table.n.02_2 dining_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forn \n                (3) \n                (?candle.n.01 - candle.n.01) \n                (ontop ?candle.n.01 ?table.n.02_1)\n            ) \n            (forn \n                (3) \n                (?candle.n.01 - candle.n.01) \n                (ontop ?candle.n.01 ?table.n.02_2)\n            )\n        )\n    )\n)",
      "tl_goal": "forn 3. x0. (not candle_n_01(x0) or ontop(x0, coffee_table.33)) and forn 3. x0. (not candle_n_01(x0) or ontop(x0, breakfast_table.1))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "candle_3"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candle_5"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "coffee_table_33"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "coffee_table_33"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "candle_4"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "coffee_table_33"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "candle_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "candle_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candle_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        }
      ],
      "transition_model": "(define (problem setting_up_candles)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent candle_n_01_1 candle_n_01_3 candle_n_01_5 candle_n_01_6 - candle_n_01 carton_n_02_1 carton_n_02_2 - carton_n_02 table_n_02_1 table_n_02_2 - table_n_02)\n    (:init (inside candle_n_01_1 carton_n_02_1) (inside candle_n_01_3 carton_n_02_1) (inside candle_n_01_5 carton_n_02_2) (inside candle_n_01_6 carton_n_02_2) (same_obj candle_n_01_1 candle_n_01_1) (same_obj candle_n_01_3 candle_n_01_3) (same_obj candle_n_01_5 candle_n_01_5) (same_obj candle_n_01_6 candle_n_01_6) (same_obj carton_n_02_1 carton_n_02_1) (same_obj carton_n_02_2 carton_n_02_2) (same_obj table_n_02_1 table_n_02_1) (same_obj table_n_02_2 table_n_02_2))\n    (:goal (and (ontop candle_n_01_3 table_n_02_1) (ontop candle_n_01_1 table_n_02_1) (ontop candle_n_01_5 table_n_02_2) (ontop candle_n_01_6 table_n_02_1)))\n)",
      "demo": null
    },
    "cleaning_shoes_0_Pomaria_2_int_0_2021-09-11_13-59-22": {
      "task_name": "cleaning_shoes",
      "natural_description": "Clean all the shoes, and leave the towel on the floor.",
      "raw_bddl_goal": "(define (problem cleaning_shoes_0)\n    (:domain igibson)\n\n    (:objects\n     \tsoap.n.01_1 - soap.n.01\n    \tbed.n.01_1 - bed.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \trag.n.01_1 - rag.n.01\n    \ttowel.n.01_1 - towel.n.01\n    \tshoe.n.01_1 shoe.n.01_2 shoe.n.01_3 shoe.n.01_4 - shoe.n.01\n        sink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop soap.n.01_1 bed.n.01_1) \n        (ontop rag.n.01_1 bed.n.01_1) \n        (onfloor towel.n.01_1 floor.n.01_1) \n        (ontop shoe.n.01_1 bed.n.01_1) \n        (ontop shoe.n.01_2 bed.n.01_1) \n        (ontop shoe.n.01_3 bed.n.01_1) \n        (ontop shoe.n.01_4 bed.n.01_1) \n        (stained shoe.n.01_1) \n        (stained shoe.n.01_2) \n        (dusty shoe.n.01_3) \n        (dusty shoe.n.01_4) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (inroom floor.n.01_1 bedroom) \n        (inroom bed.n.01_1 bedroom) \n        (inroom sink.n.01_1 bathroom)\n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?shoe.n.01 - shoe.n.01) \n                (not \n                    (stained ?shoe.n.01)\n                )\n            ) \n            (forall \n                (?shoe.n.01 - shoe.n.01) \n                (not \n                    (dusty ?shoe.n.01)\n                )\n            ) \n            (onfloor ?towel.n.01_1 ?floor.n.01_1)\n        )\n    )\n)",
      "tl_goal": "forall x0. (not shoe_n_01(x0) or (not stained(x0))) and forall x0. (not shoe_n_01(x0) or (not dusty(x0))) and onfloor(paper_towel.38, room_floor_bedroom.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_37"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_18"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_18"
        },
        {
          "action": "SOAK",
          "object": "rag_37"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_18"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_37"
        },
        {
          "action": "CLEAN",
          "object": "sandal_41"
        },
        {
          "action": "CLEAN",
          "object": "sandal_40"
        },
        {
          "action": "CLEAN",
          "object": "walker_42"
        },
        {
          "action": "CLEAN",
          "object": "sandal_39"
        }
      ],
      "transition_model": "(define (problem cleaning_shoes)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bed_n_01_1 - bed_n_01 floor_n_01_1 - floor_n_01 rag_n_01_1 - rag_n_01 shoe_n_01_1 shoe_n_01_2 shoe_n_01_3 shoe_n_01_4 - shoe_n_01 sink_n_01_1 - sink_n_01 towel_n_01_1 - towel_n_01)\n    (:init (dusty shoe_n_01_3) (dusty shoe_n_01_4) (not (soaked rag_n_01_1)) (onfloor towel_n_01_1 floor_n_01_1) (ontop rag_n_01_1 bed_n_01_1) (ontop shoe_n_01_1 bed_n_01_1) (ontop shoe_n_01_2 bed_n_01_1) (ontop shoe_n_01_3 bed_n_01_1) (ontop shoe_n_01_4 bed_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj shoe_n_01_1 shoe_n_01_1) (same_obj shoe_n_01_2 shoe_n_01_2) (same_obj shoe_n_01_3 shoe_n_01_3) (same_obj shoe_n_01_4 shoe_n_01_4) (same_obj sink_n_01_1 sink_n_01_1) (same_obj towel_n_01_1 towel_n_01_1) (stained shoe_n_01_1) (stained shoe_n_01_2))\n    (:goal (and (not (dusty shoe_n_01_4)) (not (dusty shoe_n_01_2)) (not (stained shoe_n_01_1)) (not (stained shoe_n_01_3))))\n)",
      "demo": null
    },
    "cleaning_sneakers_0_Pomaria_1_int_0_2021-10-26_13-36-08": {
      "task_name": "cleaning_sneakers",
      "natural_description": "Place the towel on the countertop, the brush next to the towel, and the soap into the sink. Clean the dusty and stained sneakers, place 2 sneakers next to the table and 2 other sneakers under the table.",
      "raw_bddl_goal": "(define (problem cleaning_sneakers_0)\n    (:domain igibson)\n\n    (:objects\n     \tgym_shoe.n.01_1 gym_shoe.n.01_2 gym_shoe.n.01_3 gym_shoe.n.01_4 - gym_shoe.n.01\n            countertop.n.01_1 - countertop.n.01\n            soap.n.01_1 - soap.n.01\n            cabinet.n.01_1 - cabinet.n.01\n            towel.n.01_1 - towel.n.01\n            brush.n.02_1 - brush.n.02\n            sink.n.01_1 - sink.n.01\n            floor.n.01_1 floor.n.01_2 - floor.n.01\n            table.n.02_1 - table.n.02\n            agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor gym_shoe.n.01_1 floor.n.01_2) \n        (stained gym_shoe.n.01_1) \n        (onfloor gym_shoe.n.01_2 floor.n.01_2) \n        (stained gym_shoe.n.01_2) \n        (onfloor gym_shoe.n.01_3 floor.n.01_2) \n        (dusty gym_shoe.n.01_3) \n        (onfloor gym_shoe.n.01_4 floor.n.01_2) \n        (dusty gym_shoe.n.01_4) \n        (inside soap.n.01_1 cabinet.n.01_1) \n        (ontop towel.n.01_1 countertop.n.01_1) \n        (not \n            (stained towel.n.01_1)\n        ) \n        (ontop brush.n.02_1 countertop.n.01_1) \n        (not \n            (stained brush.n.02_1)\n        ) \n        (inroom sink.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 living_room) \n        (inroom table.n.02_1 living_room) \n        (inroom floor.n.01_2 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_2)\n    )\n    \n    (:goal \n        (and \n            (ontop ?towel.n.01_1 ?countertop.n.01_1) \n            (nextto ?brush.n.02_1 ?towel.n.01_1) \n            (inside ?soap.n.01_1 ?sink.n.01_1) \n            (forall \n                (?gym_shoe.n.01 - gym_shoe.n.01) \n                (not \n                    (dusty ?gym_shoe.n.01)\n                )\n            ) \n            (forall \n                (?gym_shoe.n.01 - gym_shoe.n.01) \n                (not \n                    (stained ?gym_shoe.n.01)\n                )\n            ) \n            (forn \n                (2) \n                (?gym_shoe.n.01 - gym_shoe.n.01) \n                (nextto ?gym_shoe.n.01 ?table.n.02_1)\n            ) \n            (forn \n                (2) \n                (?gym_shoe.n.01 - gym_shoe.n.01) \n                (under ?gym_shoe.n.01 ?table.n.02_1)\n            ) \n            (forall \n                (?gym_shoe.n.01 - gym_shoe.n.01) \n                (onfloor ?gym_shoe.n.01 ?floor.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "ontop(hand_towel.83, countertop.31) and nextto(scrub_brush.84, hand_towel.83) and inside(soap.82, sink.37) and forall x0. (not gym_shoe_n_01(x0) or (not dusty(x0))) and forall x0. (not gym_shoe_n_01(x0) or (not stained(x0))) and forn 2. x0. (not gym_shoe_n_01(x0) or nextto(x0, coffee_table.4)) and forn 2. x0. (not gym_shoe_n_01(x0) or under(x0, coffee_table.4)) and forall x0. (not gym_shoe_n_01(x0) or onfloor(x0, room_floor_living_room.0))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "top_cabinet_24"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_84"
        },
        {
          "action": "LEFT_GRASP",
          "object": "soap_82"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_37"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_37"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_37"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_84"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_37"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_84"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_78"
        },
        {
          "action": "CLEAN",
          "object": "gym_shoe_78"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_80"
        },
        {
          "action": "CLEAN",
          "object": "gym_shoe_80"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_79"
        },
        {
          "action": "CLEAN",
          "object": "gym_shoe_79"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_81"
        },
        {
          "action": "CLEAN",
          "object": "gym_shoe_81"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_78"
        },
        {
          "action": "LEFT_PLACE_UNDER",
          "object": "coffee_table_4"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_79"
        },
        {
          "action": "LEFT_PLACE_UNDER",
          "object": "coffee_table_4"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_80"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "coffee_table_4"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_81"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "coffee_table_4"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "hand_towel_83"
        }
      ],
      "transition_model": "(define (problem cleaning_sneakers)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent countertop_n_01_1 - countertop_n_01 floor_n_01_1 floor_n_01_2 - floor_n_01 gym_shoe_n_01_1 gym_shoe_n_01_4 - gym_shoe_n_01 sink_n_01_1 - sink_n_01 towel_n_01_1 - towel_n_01)\n    (:init (dusty gym_shoe_n_01_4) (not (stained towel_n_01_1)) (onfloor gym_shoe_n_01_1 floor_n_01_2) (onfloor gym_shoe_n_01_4 floor_n_01_2) (ontop towel_n_01_1 countertop_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj gym_shoe_n_01_1 gym_shoe_n_01_1) (same_obj gym_shoe_n_01_4 gym_shoe_n_01_4) (same_obj sink_n_01_1 sink_n_01_1) (same_obj towel_n_01_1 towel_n_01_1) (stained gym_shoe_n_01_1))\n    (:goal (and (onfloor gym_shoe_n_01_1 floor_n_01_1) (not (stained gym_shoe_n_01_4)) (not (dusty gym_shoe_n_01_4)) (not (stained gym_shoe_n_01_1))))\n)",
      "demo": null
    },
    "locking_every_window_0_Merom_1_int_0_2021-11-01_14-51-10": {
      "task_name": "locking_every_window",
      "natural_description": "Close and lock all the windows.",
      "raw_bddl_goal": "(define (problem locking_every_window_0)\n    (:domain igibson)\n\n    (:objects\n     \twindow.n.01_1 window.n.01_2 window.n.01_3 window.n.01_4 - window.n.01\n    \tbed.n.01_1 - bed.n.01\n    \tsofa.n.01_1 - sofa.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (open window.n.01_1) \n        (open window.n.01_2) \n        (open window.n.01_3) \n        (open window.n.01_4) \n        (inroom window.n.01_1 bedroom) \n        (inroom window.n.01_2 kitchen) \n        (inroom window.n.01_3 living_room) \n        (inroom window.n.01_4 living_room) \n        (inroom bed.n.01_1 bedroom) \n        (inroom sofa.n.01_1 living_room) \n        (inroom floor.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (open ?window.n.01_1)\n            ) \n            (not \n                (open ?window.n.01_2)\n            ) \n            (not \n                (open ?window.n.01_3)\n            ) \n            (not \n                (open ?window.n.01_4)\n            )\n        )\n    )\n)",
      "tl_goal": "not open(window.79) and not open(window.76) and not open(window.82) and not open(window.81)",
      "action_trajectory": [
        {
          "action": "CLOSE",
          "object": "window_82"
        },
        {
          "action": "CLOSE",
          "object": "window_81"
        },
        {
          "action": "CLOSE",
          "object": "window_79"
        },
        {
          "action": "CLOSE",
          "object": "window_76"
        }
      ],
      "transition_model": "(define (problem locking_every_window)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent window_n_01_1 window_n_01_2 window_n_01_3 window_n_01_4 - window_n_01)\n    (:init (open window_n_01_1) (open window_n_01_2) (open window_n_01_3) (open window_n_01_4) (same_obj window_n_01_1 window_n_01_1) (same_obj window_n_01_2 window_n_01_2) (same_obj window_n_01_3 window_n_01_3) (same_obj window_n_01_4 window_n_01_4))\n    (:goal (and (not (open window_n_01_4)) (not (open window_n_01_1)) (not (open window_n_01_2)) (not (open window_n_01_3))))\n)",
      "demo": null
    },
    "washing_cars_or_other_vehicles_0_Ihlen_0_int_0_2021-10-25_22-38-10": {
      "task_name": "washing_cars_or_other_vehicles",
      "natural_description": "Wash all dust and stains from the car or vehicle.",
      "raw_bddl_goal": "(define (problem washing_cars_or_other_vehicles_0)\n    (:domain igibson)\n\n    (:objects\n     \tsoap.n.01_1 - soap.n.01\n    \tcar.n.01_1 - car.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tbucket.n.01_1 - bucket.n.01\n    \trag.n.01_1 - rag.n.01\n    \tagent.n.01_1 - agent.n.01\n        sink.n.01_1 - sink.n.01\n    )\n    \n    (:init \n        (ontop soap.n.01_1 car.n.01_1) \n        (onfloor car.n.01_1 floor.n.01_1) \n        (ontop bucket.n.01_1 car.n.01_1) \n        (ontop rag.n.01_1 car.n.01_1) \n        (dusty car.n.01_1) \n        (stained car.n.01_1) \n        (inroom floor.n.01_1 garage) \n        (inroom sink.n.01_1 storage_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty car.n.01_1)\n            ) \n            (not \n                (stained car.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not dusty(car.0) and not stained(car.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_32"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_32"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "CLEAN",
          "object": "car_0"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "rag_0"
        }
      ],
      "transition_model": "(define (problem washing_cars_or_other_vehicles)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bucket_n_01_1 - bucket_n_01 car_n_01_1 - car_n_01 floor_n_01_1 - floor_n_01 rag_n_01_1 - rag_n_01 sink_n_01_1 - sink_n_01 soap_n_01_1 - soap_n_01)\n    (:init (dusty car_n_01_1) (onfloor car_n_01_1 floor_n_01_1) (ontop bucket_n_01_1 car_n_01_1) (ontop rag_n_01_1 car_n_01_1) (ontop soap_n_01_1 car_n_01_1) (same_obj bucket_n_01_1 bucket_n_01_1) (same_obj car_n_01_1 car_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj soap_n_01_1 soap_n_01_1) (stained car_n_01_1))\n    (:goal (and (not (dusty car_n_01_1)) (not (stained car_n_01_1))))\n)",
      "demo": null
    },
    "washing_dishes_0_Benevolence_1_int_0_2021-06-08_18-07-48": {
      "task_name": "washing_dishes",
      "natural_description": "Wash all the stained plates, cups, and bowls.",
      "raw_bddl_goal": "(define (problem washing_dishes_0)\n    (:domain igibson)\n\n    (:objects\n     \tplate.n.04_1 plate.n.04_2 - plate.n.04\n        cup.n.01_1 - cup.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tbowl.n.01_1 - bowl.n.01\n    \tfloor.n.01_1 - floor.n.01\n        countertop.n.01_1 - countertop.n.01\n        scrub_brush.n.01_1 - scrub_brush.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop plate.n.04_1 countertop.n.01_1) \n        (ontop plate.n.04_2 countertop.n.01_1) \n        (ontop bowl.n.01_1 countertop.n.01_1) \n        (ontop cup.n.01_1 countertop.n.01_1) \n        (inside scrub_brush.n.01_1 sink.n.01_1) \n        (stained plate.n.04_1) \n        (stained plate.n.04_2) \n        (stained cup.n.01_1) \n        (stained bowl.n.01_1) \n        (inroom sink.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?plate.n.04 - plate.n.04) \n                (not \n                    (stained ?plate.n.04)\n                )\n            ) \n            (not \n                (stained ?cup.n.01_1)\n            ) \n            (not \n                (stained ?bowl.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not plate_n_04(x0) or (not stained(x0))) and not stained(cup.61) and not stained(bowl.62)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_63"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_19"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_63"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_63"
        },
        {
          "action": "CLEAN",
          "object": "cup_61"
        },
        {
          "action": "CLEAN",
          "object": "bowl_62"
        },
        {
          "action": "CLEAN",
          "object": "plate_60"
        },
        {
          "action": "CLEAN",
          "object": "plate_59"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "scrub_brush_63"
        }
      ],
      "transition_model": "(define (problem washing_dishes)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bowl_n_01_1 - bowl_n_01 countertop_n_01_1 - countertop_n_01 cup_n_01_1 - cup_n_01 plate_n_04_1 plate_n_04_2 - plate_n_04 scrub_brush_n_01_1 - scrub_brush_n_01 sink_n_01_1 - sink_n_01)\n    (:init (inside scrub_brush_n_01_1 sink_n_01_1) (ontop bowl_n_01_1 countertop_n_01_1) (ontop cup_n_01_1 countertop_n_01_1) (ontop plate_n_04_1 countertop_n_01_1) (ontop plate_n_04_2 countertop_n_01_1) (same_obj bowl_n_01_1 bowl_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj cup_n_01_1 cup_n_01_1) (same_obj plate_n_04_1 plate_n_04_1) (same_obj plate_n_04_2 plate_n_04_2) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (stained bowl_n_01_1) (stained cup_n_01_1) (stained plate_n_04_1) (stained plate_n_04_2))\n    (:goal (and (not (stained plate_n_04_1)) (not (stained plate_n_04_2)) (not (stained cup_n_01_1)) (not (stained bowl_n_01_1))))\n)",
      "demo": null
    },
    "putting_away_Halloween_decorations_0_Rs_int_0_2021-10-25_22-42-17": {
      "task_name": "putting_away_Halloween_decorations",
      "natural_description": "Place all pumpkins and candles into the cabinet, arrange the sheet either next to or on the table, and position the caldron next to the table.",
      "raw_bddl_goal": "(define (problem putting_away_Halloween_decorations_0)\n    (:domain igibson)\n\n    (:objects\n     \tpumpkin.n.02_1 pumpkin.n.02_2 - pumpkin.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tcaldron.n.01_1 - caldron.n.01\n    \tsheet.n.03_1 - sheet.n.03\n    \ttable.n.02_1 - table.n.02\n    \tcandle.n.01_1 candle.n.01_2 candle.n.01_3 - candle.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tsofa.n.01_1 - sofa.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor pumpkin.n.02_1 floor.n.01_1) \n        (onfloor pumpkin.n.02_2 floor.n.01_1) \n        (onfloor caldron.n.01_1 floor.n.01_1) \n        (ontop sheet.n.03_1 table.n.02_1) \n        (onfloor candle.n.01_1 floor.n.01_1) \n        (onfloor candle.n.01_2 floor.n.01_1) \n        (onfloor candle.n.01_3 floor.n.01_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom cabinet.n.01_1 living_room) \n        (inroom table.n.02_1 living_room) \n        (inroom sofa.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?pumpkin.n.02 - pumpkin.n.02) \n                (inside ?pumpkin.n.02 ?cabinet.n.01_1)\n            ) \n            (forall \n                (?candle.n.01 - candle.n.01) \n                (inside ?candle.n.01 ?cabinet.n.01_1)\n            ) \n            (or \n                (nextto ?sheet.n.03_1 ?table.n.02_1) \n                (ontop ?sheet.n.03_1 ?table.n.02_1)\n            ) \n            (nextto ?caldron.n.01_1 ?table.n.02_1)\n        )\n    )\n)",
      "tl_goal": "forall x0. (not pumpkin_n_02(x0) or inside(x0, bottom_cabinet.13)) and forall x0. (not candle_n_01(x0) or inside(x0, bottom_cabinet.13)) and nextto(sheet.0, coffee_table.5) or ontop(sheet.0, coffee_table.5) and nextto(cauldron.0, coffee_table.5)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_13"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pumpkin_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_13"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candle_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_13"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pumpkin_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_13"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "candle_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_13"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candle_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_13"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cauldron_0"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "coffee_table_5"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sheet_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "coffee_table_5"
        }
      ],
      "transition_model": "(define (problem putting_away_Halloween_decorations)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 caldron_n_01_1 - caldron_n_01 candle_n_01_2 candle_n_01_3 - candle_n_01 floor_n_01_1 - floor_n_01 pumpkin_n_02_1 - pumpkin_n_02 sheet_n_03_1 - sheet_n_03 table_n_02_1 - table_n_02)\n    (:init (onfloor caldron_n_01_1 floor_n_01_1) (onfloor candle_n_01_2 floor_n_01_1) (onfloor candle_n_01_3 floor_n_01_1) (onfloor pumpkin_n_02_1 floor_n_01_1) (ontop sheet_n_03_1 table_n_02_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj caldron_n_01_1 caldron_n_01_1) (same_obj candle_n_01_2 candle_n_01_2) (same_obj candle_n_01_3 candle_n_01_3) (same_obj floor_n_01_1 floor_n_01_1) (same_obj pumpkin_n_02_1 pumpkin_n_02_1) (same_obj sheet_n_03_1 sheet_n_03_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (inside candle_n_01_2 cabinet_n_01_1) (inside pumpkin_n_02_1 cabinet_n_01_1) (nextto caldron_n_01_1 table_n_02_1) (inside candle_n_01_3 cabinet_n_01_1)))\n)",
      "demo": null
    },
    "collect_misplaced_items_0_Wainscott_0_int_1_2021-10-26_18-48-11": {
      "task_name": "collect_misplaced_items",
      "natural_description": "Collect all misplaced items including the gym shoe, necklace, notebook, and socks. Then place them on the table.",
      "raw_bddl_goal": "(define (problem collect_misplaced_items_0)\n    (:domain igibson)\n\n    (:objects\n        gym_shoe.n.01_1 - gym_shoe.n.01\n        necklace.n.01_1 - necklace.n.01\n        notebook.n.01_1 - notebook.n.01\n        sock.n.01_1 sock.n.01_2 - sock.n.01\n        table.n.02_1 table.n.02_2 - table.n.02\n        cabinet.n.01_1 - cabinet.n.01\n        sofa.n.01_1 - sofa.n.01\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (under gym_shoe.n.01_1 table.n.02_1) \n        (onfloor gym_shoe.n.01_1 floor.n.01_2) \n        (inside necklace.n.01_1 cabinet.n.01_1) \n        (under notebook.n.01_1 table.n.02_2) \n        (ontop sock.n.01_1 sofa.n.01_1) \n        (onfloor sock.n.01_2 floor.n.01_1) \n        (inroom table.n.02_1 living_room) \n        (inroom cabinet.n.01_1 living_room) \n        (inroom table.n.02_2 dining_room) \n        (inroom sofa.n.01_1 living_room) \n        (inroom floor.n.01_1 living_room) \n        (inroom floor.n.01_2 dining_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (ontop ?gym_shoe.n.01_1 ?table.n.02_2) \n            (ontop ?necklace.n.01_1 ?table.n.02_2) \n            (ontop ?notebook.n.01_1 ?table.n.02_2) \n            (forall \n                (?sock.n.01 - sock.n.01) \n                (ontop ?sock.n.01 ?table.n.02_2)\n            )\n        )\n    )\n)",
      "tl_goal": "ontop(gym_shoe.0, breakfast_table.1) and ontop(necklace.0, breakfast_table.1) and ontop(notebook.0, breakfast_table.1) and forall x0. (not sock_n_01(x0) or ontop(x0, breakfast_table.1))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_79"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "necklace_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sock_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "sock_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "gym_shoe_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "notebook_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        }
      ],
      "transition_model": "(define (problem collect_misplaced_items)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 floor_n_01_1 - floor_n_01 necklace_n_01_1 - necklace_n_01 notebook_n_01_1 - notebook_n_01 sock_n_01_1 sock_n_01_2 - sock_n_01 sofa_n_01_1 - sofa_n_01 table_n_02_2 - table_n_02)\n    (:init (inside necklace_n_01_1 cabinet_n_01_1) (onfloor sock_n_01_2 floor_n_01_1) (ontop sock_n_01_1 sofa_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj necklace_n_01_1 necklace_n_01_1) (same_obj notebook_n_01_1 notebook_n_01_1) (same_obj sock_n_01_1 sock_n_01_1) (same_obj sock_n_01_2 sock_n_01_2) (same_obj sofa_n_01_1 sofa_n_01_1) (same_obj table_n_02_2 table_n_02_2) (under notebook_n_01_1 table_n_02_2))\n    (:goal (and (ontop sock_n_01_1 table_n_02_2) (ontop necklace_n_01_1 table_n_02_2) (ontop sock_n_01_2 table_n_02_2) (ontop notebook_n_01_1 table_n_02_2)))\n)",
      "demo": null
    },
    "cleaning_high_chair_0_Wainscott_0_int_0_2021-06-05_18-03-15": {
      "task_name": "cleaning_high_chair",
      "natural_description": "Clean the high chair.",
      "raw_bddl_goal": "(define (problem cleaning_high_chair_0)\n    (:domain igibson)\n\n    (:objects\n        highchair.n.01_1 - highchair.n.01\n        piece_of_cloth.n.01_1 - piece_of_cloth.n.01\n        cabinet.n.01_1 - cabinet.n.01\n        sink.n.01_1 - sink.n.01\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty highchair.n.01_1) \n        (inside piece_of_cloth.n.01_1 cabinet.n.01_1) \n        (onfloor highchair.n.01_1 floor.n.01_2) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom floor.n.01_2 dining_room) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?highchair.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not dusty(highchair.0)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "paper_towel_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "highchair_0"
        },
        {
          "action": "CLEAN",
          "object": "highchair_0"
        }
      ],
      "transition_model": "(define (problem cleaning_high_chair)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 floor_n_01_2 - floor_n_01 highchair_n_01_1 - highchair_n_01 piece_of_cloth_n_01_1 - piece_of_cloth_n_01)\n    (:init (dusty highchair_n_01_1) (inside piece_of_cloth_n_01_1 cabinet_n_01_1) (onfloor highchair_n_01_1 floor_n_01_2) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj highchair_n_01_1 highchair_n_01_1) (same_obj piece_of_cloth_n_01_1 piece_of_cloth_n_01_1))\n    (:goal (not (dusty highchair_n_01_1)))\n)",
      "demo": null
    },
    "washing_floor_0_Ihlen_1_int_1_2021-10-26_14-53-28": {
      "task_name": "washing_floor",
      "natural_description": "Clean the dust and stain off the floor.",
      "raw_bddl_goal": "(define (problem washing_floor_0)\n    (:domain igibson)\n\n    (:objects\n     \tbucket.n.01_1 - bucket.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \ttowel.n.01_1 - towel.n.01\n    \tshower.n.01_1 - shower.n.01\n    \ttoilet.n.02_1 - toilet.n.02\n    \tbed.n.01_1 - bed.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor bucket.n.01_1 floor.n.01_1) \n        (ontop soap.n.01_1 towel.n.01_1) \n        (onfloor soap.n.01_1 floor.n.01_1) \n        (onfloor towel.n.01_1 floor.n.01_1) \n        (not \n            (stained towel.n.01_1)\n        ) \n        (dusty floor.n.01_1) \n        (stained floor.n.01_1) \n        (inroom floor.n.01_1 bathroom) \n        (inroom shower.n.01_1 bathroom) \n        (inroom toilet.n.02_1 bathroom) \n        (inroom bed.n.01_1 bedroom) \n        (inroom sink.n.01_1 bathroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (or \n                    (dusty ?floor.n.01_1) \n                    (stained ?floor.n.01_1)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "not (dusty(room_floor_bathroom.0) or stained(room_floor_bathroom.0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "bath_towel_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_49"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_49"
        },
        {
          "action": "SOAK",
          "object": "bath_towel_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_49"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bath_towel_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_bathroom_0"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "bath_towel_0"
        }
      ],
      "transition_model": "(define (problem washing_floor)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bucket_n_01_1 - bucket_n_01 floor_n_01_1 - floor_n_01 sink_n_01_1 - sink_n_01 soap_n_01_1 - soap_n_01 towel_n_01_1 - towel_n_01)\n    (:init (dusty floor_n_01_1) (not (stained towel_n_01_1)) (onfloor agent_n_01_1 floor_n_01_1) (onfloor bucket_n_01_1 floor_n_01_1) (onfloor soap_n_01_1 floor_n_01_1) (onfloor towel_n_01_1 floor_n_01_1) (ontop soap_n_01_1 towel_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj bucket_n_01_1 bucket_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj soap_n_01_1 soap_n_01_1) (same_obj towel_n_01_1 towel_n_01_1) (stained floor_n_01_1))\n    (:goal (and (not (stained floor_n_01_1)) (not (dusty floor_n_01_1))))\n)",
      "demo": null
    },
    "sorting_mail_0_Wainscott_0_int_1_2021-10-26_14-38-16": {
      "task_name": "sorting_mail",
      "natural_description": "Sort the envelopes and newspapers into two stacked piles.",
      "raw_bddl_goal": "(define (problem sorting_mail_0)\n    (:domain igibson)\n\n    (:objects\n        envelope.n.01_1 envelope.n.01_2 envelope.n.01_3 envelope.n.01_4 - envelope.n.01\n        floor.n.01_1 - floor.n.01\n        sofa.n.01_1 - sofa.n.01\n        newspaper.n.03_1 newspaper.n.03_2 newspaper.n.03_3 newspaper.n.03_4 - newspaper.n.03\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor envelope.n.01_1 floor.n.01_1) \n        (onfloor envelope.n.01_2 floor.n.01_1) \n        (onfloor envelope.n.01_3 floor.n.01_1) \n        (onfloor envelope.n.01_4 floor.n.01_1) \n        (onfloor newspaper.n.03_1 floor.n.01_1) \n        (onfloor newspaper.n.03_2 floor.n.01_1) \n        (onfloor newspaper.n.03_3 floor.n.01_1) \n        (onfloor newspaper.n.03_4 floor.n.01_1) \n        (inroom sofa.n.01_1 living_room) \n        (inroom floor.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?envelope.n.01 - envelope.n.01) \n                (or \n                    (touching ?envelope.n.01 ?envelope.n.01_1) \n                    (touching ?envelope.n.01 ?envelope.n.01_2) \n                    (touching ?envelope.n.01 ?envelope.n.01_3) \n                    (touching ?envelope.n.01 ?envelope.n.01_4)\n                )\n            ) \n            (forall \n                (?newspaper.n.03 - newspaper.n.03) \n                (or \n                    (touching ?newspaper.n.03 ?newspaper.n.03_1) \n                    (touching ?newspaper.n.03 ?newspaper.n.03_2) \n                    (touching ?newspaper.n.03 ?newspaper.n.03_3) \n                    (touching ?newspaper.n.03 ?newspaper.n.03_4)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not envelope_n_01(x0) or (touching(x0, envelope.143) or touching(x0, envelope.144) or touching(x0, envelope.145) or touching(x0, envelope.146))) and forall x0. (not newspaper_n_03(x0) or (touching(x0, newspaper.147) or touching(x0, newspaper.148) or touching(x0, newspaper.149) or touching(x0, newspaper.150)))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "envelope_143"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "envelope_146"
        },
        {
          "action": "LEFT_GRASP",
          "object": "envelope_144"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "envelope_146"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "envelope_145"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "envelope_146"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "newspaper_147"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "newspaper_148"
        },
        {
          "action": "LEFT_GRASP",
          "object": "newspaper_149"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "newspaper_148"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "newspaper_150"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "newspaper_148"
        }
      ],
      "transition_model": "(define (problem sorting_mail)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent envelope_n_01_1 envelope_n_01_2 envelope_n_01_3 envelope_n_01_4 - envelope_n_01 floor_n_01_1 - floor_n_01 newspaper_n_03_1 newspaper_n_03_2 - newspaper_n_03)\n    (:init (onfloor envelope_n_01_1 floor_n_01_1) (onfloor envelope_n_01_2 floor_n_01_1) (onfloor envelope_n_01_3 floor_n_01_1) (onfloor envelope_n_01_4 floor_n_01_1) (onfloor newspaper_n_03_1 floor_n_01_1) (onfloor newspaper_n_03_2 floor_n_01_1) (same_obj envelope_n_01_1 envelope_n_01_1) (same_obj envelope_n_01_2 envelope_n_01_2) (same_obj envelope_n_01_3 envelope_n_01_3) (same_obj envelope_n_01_4 envelope_n_01_4) (same_obj floor_n_01_1 floor_n_01_1) (same_obj newspaper_n_03_1 newspaper_n_03_1) (same_obj newspaper_n_03_2 newspaper_n_03_2))\n    (:goal (and (ontop envelope_n_01_3 envelope_n_01_2) (ontop newspaper_n_03_1 newspaper_n_03_1) (ontop envelope_n_01_4 envelope_n_01_1) (ontop newspaper_n_03_2 newspaper_n_03_2)))\n)",
      "demo": null
    },
    "cleaning_bathrooms_0_Benevolence_0_int_1_2021-06-12_19-33-28": {
      "task_name": "cleaning_bathrooms",
      "natural_description": "Use the rag and bucket to clean stains off the toilet, the bathtub, the sink, and the floor.",
      "raw_bddl_goal": "(define (problem cleaning_bathrooms_0)\n    (:domain igibson)\n\n    (:objects\n        sink.n.01_1 - sink.n.01\n        bathtub.n.01_1 - bathtub.n.01\n        toilet.n.02_1 - toilet.n.02\n        floor.n.01_1 - floor.n.01\n        bucket.n.01_1 - bucket.n.01\n        soap.n.01_1 - soap.n.01\n        brush.n.02_1 - brush.n.02\n        rag.n.01_1 - rag.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (stained sink.n.01_1) \n        (stained bathtub.n.01_1) \n        (stained toilet.n.02_1) \n        (stained floor.n.01_1) \n        (inside soap.n.01_1 sink.n.01_1) \n        (inside brush.n.02_1 bathtub.n.01_1) \n        (onfloor bucket.n.01_1 floor.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (onfloor rag.n.01_1 floor.n.01_1) \n        (onfloor agent.n.01_1 floor.n.01_1) \n        (inroom floor.n.01_1 bathroom) \n        (inroom toilet.n.02_1 bathroom) \n        (inroom sink.n.01_1 bathroom) \n        (inroom bathtub.n.01_1 bathroom)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?toilet.n.02_1)\n            ) \n            (not \n                (stained ?bathtub.n.01_1)\n            ) \n            (not \n                (stained ?sink.n.01_1)\n            ) \n            (not \n                (stained ?floor.n.01_1)\n            ) \n            (and \n                (soaked ?rag.n.01_1) \n                (inside ?rag.n.01_1 ?bucket.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not stained(toilet.6) and not stained(bathtub.4) and not stained(sink.7) and not stained(room_floor_bathroom.0) and soaked(rag.0) and inside(rag.0, bucket.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_7"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_7"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_7"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "CLEAN",
          "object": "sink_7"
        },
        {
          "action": "CLEAN",
          "object": "bathtub_4"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_bathroom_0"
        },
        {
          "action": "CLEAN",
          "object": "bathtub_4"
        },
        {
          "action": "CLEAN",
          "object": "toilet_6"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_0"
        }
      ],
      "transition_model": "(define (problem cleaning_bathrooms)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bucket_n_01_1 - bucket_n_01 floor_n_01_1 - floor_n_01 rag_n_01_1 - rag_n_01 sink_n_01_1 - sink_n_01 soap_n_01_1 - soap_n_01 toilet_n_02_1 - toilet_n_02)\n    (:init (inside soap_n_01_1 sink_n_01_1) (not (soaked rag_n_01_1)) (onfloor agent_n_01_1 floor_n_01_1) (onfloor bucket_n_01_1 floor_n_01_1) (onfloor rag_n_01_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj bucket_n_01_1 bucket_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj soap_n_01_1 soap_n_01_1) (same_obj toilet_n_02_1 toilet_n_02_1) (stained floor_n_01_1) (stained sink_n_01_1) (stained toilet_n_02_1))\n    (:goal (and (not (stained toilet_n_02_1)) (not (stained floor_n_01_1)) (inside rag_n_01_1 bucket_n_01_1) (not (stained sink_n_01_1))))\n)",
      "demo": null
    },
    "cleaning_kitchen_cupboard_0_Pomaria_1_int_0_2021-10-26_13-05-36": {
      "task_name": "cleaning_kitchen_cupboard",
      "natural_description": "Clean all dusty cabinets, put all bowls in one cabinet and all cups in another.",
      "raw_bddl_goal": "(define (problem cleaning_kitchen_cupboard_0)\n    (:domain igibson)\n\n    (:objects\n     \tcabinet.n.01_1 cabinet.n.01_2 - cabinet.n.01\n        countertop.n.01_1 - countertop.n.01\n    \tpiece_of_cloth.n.01_1 - piece_of_cloth.n.01\n    \tcleansing_agent.n.01_1 - cleansing_agent.n.01\n    \tbowl.n.01_1 bowl.n.01_2 - bowl.n.01\n    \tcup.n.01_1 cup.n.01_2 - cup.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty cabinet.n.01_1) \n        (dusty cabinet.n.01_2) \n        (ontop piece_of_cloth.n.01_1 countertop.n.01_1) \n        (ontop cleansing_agent.n.01_1 countertop.n.01_1) \n        (inside bowl.n.01_2 cabinet.n.01_2) \n        (inside cup.n.01_1 cabinet.n.01_2) \n        (inside cup.n.01_2 cabinet.n.01_1) \n        (ontop bowl.n.01_1 countertop.n.01_1) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom cabinet.n.01_2 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?cabinet.n.01 - cabinet.n.01) \n                (not \n                    (dusty ?cabinet.n.01)\n                )\n            ) \n            (exists \n                (?cabinet.n.01 - cabinet.n.01) \n                (forall \n                    (?bowl.n.01 - bowl.n.01) \n                    (and \n                        (inside ?bowl.n.01 ?cabinet.n.01) \n                        (not \n                            (inside ?cup.n.01_1 ?cabinet.n.01)\n                        )\n                    )\n                )\n            ) \n            (exists \n                (?cabinet.n.01 - cabinet.n.01) \n                (forall \n                    (?cup.n.01 - cup.n.01) \n                    (and \n                        (inside ?cup.n.01 ?cabinet.n.01) \n                        (not \n                            (inside ?bowl.n.01_1 ?cabinet.n.01)\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not cabinet_n_01(x0) or (not dusty(x0))) and exists x0. (not cabinet_n_01(x0) or (forall x1. (not bowl_n_01(x1) or (inside(x1, x0) and (not inside(cup.0, x0)))))) and exists x0. (not cabinet_n_01(x0) or (forall x1. (not cup_n_01(x1) or (inside(x1, x0) and (not inside(bowl.0, x0))))))",
      "action_trajectory": [
        {
          "action": "TOGGLE_ON",
          "object": "sink_37"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_37"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "paper_towel_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_37"
        },
        {
          "action": "SOAK",
          "object": "paper_towel_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "paper_towel_0"
        },
        {
          "action": "OPEN",
          "object": "top_cabinet_24"
        },
        {
          "action": "CLEAN",
          "object": "top_cabinet_24"
        },
        {
          "action": "OPEN",
          "object": "top_cabinet_25"
        },
        {
          "action": "CLEAN",
          "object": "top_cabinet_25"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "paper_towel_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_25"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_25"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cup_1"
        },
        {
          "action": "CLOSE",
          "object": "top_cabinet_25"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_24"
        }
      ],
      "transition_model": "(define (problem cleaning_kitchen_cupboard)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bowl_n_01_1 bowl_n_01_2 - bowl_n_01 cabinet_n_01_1 cabinet_n_01_2 - cabinet_n_01 countertop_n_01_1 - countertop_n_01 cup_n_01_1 cup_n_01_2 - cup_n_01 piece_of_cloth_n_01_1 - piece_of_cloth_n_01)\n    (:init (dusty cabinet_n_01_1) (dusty cabinet_n_01_2) (inside bowl_n_01_2 cabinet_n_01_2) (inside cup_n_01_1 cabinet_n_01_2) (inside cup_n_01_2 cabinet_n_01_1) (ontop bowl_n_01_1 countertop_n_01_1) (ontop piece_of_cloth_n_01_1 countertop_n_01_1) (same_obj bowl_n_01_1 bowl_n_01_1) (same_obj bowl_n_01_2 bowl_n_01_2) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj cabinet_n_01_2 cabinet_n_01_2) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj cup_n_01_1 cup_n_01_1) (same_obj cup_n_01_2 cup_n_01_2) (same_obj piece_of_cloth_n_01_1 piece_of_cloth_n_01_1))\n    (:goal (and (not (inside bowl_n_01_1 cabinet_n_01_2)) (inside bowl_n_01_2 cabinet_n_01_1) (not (dusty cabinet_n_01_1))))\n)",
      "demo": null
    },
    "preparing_salad_0_Pomaria_1_int_1_2021-10-26_14-17-24": {
      "task_name": "preparing_salad",
      "natural_description": "Place a whole lettuce, a sliced apple, a sliced tomato, and a whole radish on separate plates.",
      "raw_bddl_goal": "(define (problem preparing_salad_0)\n    (:domain igibson)\n\n    (:objects\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tlettuce.n.03_1 lettuce.n.03_2 - lettuce.n.03\n    \tcountertop.n.01_1 - countertop.n.01\n    \tapple.n.01_1 apple.n.01_2 - apple.n.01\n    \ttomato.n.01_1 tomato.n.01_2 - tomato.n.01\n    \tradish.n.01_1 radish.n.01_2 - radish.n.01\n       carving_knife.n.01_1 - carving_knife.n.01 \n    \tplate.n.04_1 plate.n.04_2 - plate.n.04\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop lettuce.n.03_1 countertop.n.01_1) \n        (ontop lettuce.n.03_2 countertop.n.01_1) \n        (ontop apple.n.01_1 countertop.n.01_1) \n        (ontop apple.n.01_2 countertop.n.01_1) \n        (inside tomato.n.01_1 electric_refrigerator.n.01_1) \n        (inside tomato.n.01_2 electric_refrigerator.n.01_1) \n        (ontop radish.n.01_1 countertop.n.01_1) \n        (ontop radish.n.01_2 countertop.n.01_1) \n        (inside plate.n.04_1 cabinet.n.01_1) \n        (not \n            (dusty plate.n.04_1)\n        ) \n        (inside plate.n.04_2 cabinet.n.01_1) \n        (not \n            (dusty plate.n.04_2)\n        ) \n        (inside carving_knife.n.01_1 cabinet.n.01_1) \n        (inroom sink.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forpairs \n                (?lettuce.n.03 - lettuce.n.03) \n                (?plate.n.04 - plate.n.04) \n                (ontop ?lettuce.n.03 ?plate.n.04)\n            ) \n            (forpairs \n                (?apple.n.01 - apple.n.01) \n                (?plate.n.04 - plate.n.04) \n                (and \n                    (sliced ?apple.n.01) \n                    (ontop ?apple.n.01 ?plate.n.04)\n                )\n            ) \n            (forpairs \n                (?tomato.n.01 - tomato.n.01) \n                (?plate.n.04 - plate.n.04) \n                (and \n                    (ontop ?tomato.n.01 ?plate.n.04) \n                    (sliced ?tomato.n.01)\n                )\n            ) \n            (forpairs \n                (?radish.n.01 - radish.n.01) \n                (?plate.n.04 - plate.n.04) \n                (ontop ?radish.n.01 ?plate.n.04)\n            )\n        )\n    )\n)\n",
      "tl_goal": "forall x0. (not lettuce_n_03(x0) or forn 1. x1. (not plate_n_04(x1) or ontop(x0, x1))) and forall x1. (not plate_n_04(x1) or forn 1. x0. (not lettuce_n_03(x0) or ontop(x0, x1))) and forall x0. (not apple_n_01(x0) or forn 1. x1. (not plate_n_04(x1) or (sliced(x0) and ontop(x0, x1)))) and forall x1. (not plate_n_04(x1) or forn 1. x0. (not apple_n_01(x0) or (sliced(x0) and ontop(x0, x1)))) and forall x0. (not tomato_n_01(x0) or forn 1. x1. (not plate_n_04(x1) or (ontop(x0, x1) and sliced(x0)))) and forall x1. (not plate_n_04(x1) or forn 1. x0. (not tomato_n_01(x0) or (ontop(x0, x1) and sliced(x0)))) and forall x0. (not radish_n_01(x0) or forn 1. x1. (not plate_n_04(x1) or ontop(x0, x1))) and forall x1. (not plate_n_04(x1) or forn 1. x0. (not radish_n_01(x0) or ontop(x0, x1)))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "top_cabinet_27"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_87"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_88"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "countertop_31"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "countertop_31"
        },
        {
          "action": "OPEN",
          "object": "fridge_20"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "tomato_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "tomato_82"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "countertop_31"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "countertop_31"
        },
        {
          "action": "CLOSE",
          "object": "fridge_20"
        },
        {
          "action": "UNFREEZE",
          "object": "tomato_83"
        },
        {
          "action": "UNFREEZE",
          "object": "tomato_82"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "carving_knife_86"
        },
        {
          "action": "LEFT_GRASP",
          "object": "radish_84"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_88"
        },
        {
          "action": "LEFT_GRASP",
          "object": "radish_85"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_87"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lettuce_78"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_88"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lettuce_79"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_87"
        },
        {
          "action": "LEFT_GRASP",
          "object": "apple_80"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_88"
        },
        {
          "action": "SLICE",
          "object": "apple_80"
        },
        {
          "action": "LEFT_GRASP",
          "object": "apple_81"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_87"
        },
        {
          "action": "SLICE",
          "object": "apple_81"
        },
        {
          "action": "LEFT_GRASP",
          "object": "tomato_83"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_88"
        },
        {
          "action": "SLICE",
          "object": "tomato_83"
        },
        {
          "action": "LEFT_GRASP",
          "object": "tomato_82"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_87"
        },
        {
          "action": "SLICE",
          "object": "tomato_82"
        }
      ],
      "transition_model": "(define (problem preparing_salad)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent apple_n_01_1 apple_n_01_2 - apple_n_01 cabinet_n_01_1 - cabinet_n_01 carving_knife_n_01_1 - carving_knife_n_01 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 lettuce_n_03_1 lettuce_n_03_2 - lettuce_n_03 plate_n_04_2 - plate_n_04 radish_n_01_1 radish_n_01_2 - radish_n_01 tomato_n_01_2 - tomato_n_01)\n    (:init (inside carving_knife_n_01_1 cabinet_n_01_1) (inside plate_n_04_2 cabinet_n_01_1) (inside tomato_n_01_2 electric_refrigerator_n_01_1) (not (dusty plate_n_04_2)) (ontop apple_n_01_1 countertop_n_01_1) (ontop apple_n_01_2 countertop_n_01_1) (ontop lettuce_n_03_1 countertop_n_01_1) (ontop lettuce_n_03_2 countertop_n_01_1) (ontop radish_n_01_1 countertop_n_01_1) (ontop radish_n_01_2 countertop_n_01_1) (same_obj apple_n_01_1 apple_n_01_1) (same_obj apple_n_01_2 apple_n_01_2) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj carving_knife_n_01_1 carving_knife_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj lettuce_n_03_1 lettuce_n_03_1) (same_obj lettuce_n_03_2 lettuce_n_03_2) (same_obj plate_n_04_2 plate_n_04_2) (same_obj radish_n_01_1 radish_n_01_1) (same_obj radish_n_01_2 radish_n_01_2) (same_obj tomato_n_01_2 tomato_n_01_2))\n    (:goal (and (sliced apple_n_01_1) (ontop tomato_n_01_2 plate_n_04_2) (ontop lettuce_n_03_1 plate_n_04_2) (sliced apple_n_01_2)))\n)",
      "demo": null
    },
    "putting_leftovers_away_0_Ihlen_1_int_0_2021-06-08_13-42-57": {
      "task_name": "putting_leftovers_away",
      "natural_description": "Put all pasta and sauce inside the fridge.",
      "raw_bddl_goal": "(define (problem putting_leftovers_away_0)\n    (:domain igibson)\n\n    (:objects\n     \tpasta.n.02_1 pasta.n.02_2 pasta.n.02_3 pasta.n.02_4 - pasta.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tsauce.n.01_1 sauce.n.01_2 sauce.n.01_3 sauce.n.01_4 - sauce.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop pasta.n.02_1 countertop.n.01_1) \n        (ontop pasta.n.02_2 countertop.n.01_1) \n        (ontop pasta.n.02_3 countertop.n.01_1) \n        (ontop pasta.n.02_4 countertop.n.01_1) \n        (ontop sauce.n.01_1 countertop.n.01_1) \n        (ontop sauce.n.01_2 countertop.n.01_1) \n        (ontop sauce.n.01_3 countertop.n.01_1) \n        (ontop sauce.n.01_4 countertop.n.01_1) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?pasta.n.02 - pasta.n.02) \n                (inside ?pasta.n.02 ?electric_refrigerator.n.01_1)\n            ) \n            (forall \n                (?sauce.n.01 - sauce.n.01) \n                (inside ?sauce.n.01 ?electric_refrigerator.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not pasta_n_02(x0) or inside(x0, fridge.61)) and forall x0. (not sauce_n_01(x0) or inside(x0, fridge.61))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "fridge_61"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "spaghetti_sauce_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_61"
        },
        {
          "action": "LEFT_GRASP",
          "object": "spaghetti_sauce_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_61"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "spaghetti_sauce_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_61"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pasta_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_61"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pasta_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_61"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pasta_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_61"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pasta_3"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_61"
        },
        {
          "action": "LEFT_GRASP",
          "object": "mayonnaise_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_61"
        },
        {
          "action": "CLOSE",
          "object": "fridge_61"
        }
      ],
      "transition_model": "(define (problem putting_leftovers_away)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 pasta_n_02_2 - pasta_n_02 sauce_n_01_2 sauce_n_01_3 sauce_n_01_4 - sauce_n_01)\n    (:init (ontop pasta_n_02_2 countertop_n_01_1) (ontop sauce_n_01_2 countertop_n_01_1) (ontop sauce_n_01_3 countertop_n_01_1) (ontop sauce_n_01_4 countertop_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj pasta_n_02_2 pasta_n_02_2) (same_obj sauce_n_01_2 sauce_n_01_2) (same_obj sauce_n_01_3 sauce_n_01_3) (same_obj sauce_n_01_4 sauce_n_01_4))\n    (:goal (and (inside pasta_n_02_2 electric_refrigerator_n_01_1) (inside sauce_n_01_4 electric_refrigerator_n_01_1) (inside sauce_n_01_2 electric_refrigerator_n_01_1) (inside sauce_n_01_3 electric_refrigerator_n_01_1)))\n)",
      "demo": null
    },
    "preparing_a_shower_for_child_0_Ihlen_0_int_0_2021-10-25_21-36-25": {
      "task_name": "preparing_a_shower_for_child",
      "natural_description": "Place the towel, shampoo, and soap on the floor near the sink for the child's shower.",
      "raw_bddl_goal": "(define (problem preparing_a_shower_for_child_0)\n    (:domain igibson)\n\n    (:objects\n     \tshampoo.n.01_1 - shampoo.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \ttowel.n.01_1 - towel.n.01\n    \tshower.n.01_1 - shower.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor shampoo.n.01_1 floor.n.01_1) \n        (onfloor soap.n.01_1 floor.n.01_1) \n        (onfloor towel.n.01_1 floor.n.01_1) \n        (inroom shower.n.01_1 bathroom) \n        (inroom floor.n.01_1 bathroom) \n        (inroom sink.n.01_1 bathroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (onfloor ?towel.n.01_1 ?floor.n.01_1) \n            (onfloor ?shampoo.n.01_1 ?floor.n.01_1) \n            (nextto ?soap.n.01_1 ?sink.n.01_1)\n        )\n    )\n)",
      "tl_goal": "onfloor(dishtowel.0, room_floor_bathroom.0) and onfloor(shampoo.0, room_floor_bathroom.0) and nextto(soap.0, sink.38)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "soap_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_38"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_38"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_38"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "dishtowel_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_bathroom_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "shampoo_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_bathroom_0"
        }
      ],
      "transition_model": "(define (problem preparing_a_shower_for_child)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 - floor_n_01 shampoo_n_01_1 - shampoo_n_01 sink_n_01_1 - sink_n_01 soap_n_01_1 - soap_n_01 towel_n_01_1 - towel_n_01)\n    (:init (onfloor agent_n_01_1 floor_n_01_1) (onfloor shampoo_n_01_1 floor_n_01_1) (onfloor soap_n_01_1 floor_n_01_1) (onfloor towel_n_01_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj shampoo_n_01_1 shampoo_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj soap_n_01_1 soap_n_01_1) (same_obj towel_n_01_1 towel_n_01_1))\n    (:goal (and (nextto soap_n_01_1 sink_n_01_1) (onfloor towel_n_01_1 floor_n_01_1) (onfloor shampoo_n_01_1 floor_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_stove_0_Wainscott_0_int_0_2021-09-11_12-51-07": {
      "task_name": "cleaning_stove",
      "natural_description": "Use the rag and dishtowel to clean the dusty and stained stove, then leave them next to the sink.",
      "raw_bddl_goal": "(define (problem cleaning_stove_0)\n    (:domain igibson)\n\n    (:objects\n     \tstove.n.01_1 - stove.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \trag.n.01_1 - rag.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tdishtowel.n.01_1 - dishtowel.n.01\n            floor.n.01_1 - floor.n.01\n            agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty stove.n.01_1) \n        (stained stove.n.01_1) \n        (inside soap.n.01_1 cabinet.n.01_1) \n        (inside rag.n.01_1 cabinet.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (not \n            (stained rag.n.01_1)\n        ) \n        (inside dishtowel.n.01_1 cabinet.n.01_1) \n        (not \n            (soaked dishtowel.n.01_1)\n        ) \n        (inroom sink.n.01_1 kitchen) \n        (inroom stove.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?stove.n.01_1)\n            ) \n            (not \n                (stained ?stove.n.01_1)\n            ) \n            (nextto ?rag.n.01_1 ?sink.n.01_1) \n            (nextto ?dishtowel.n.01_1 ?sink.n.01_1)\n        )\n    )\n)",
      "tl_goal": "not dusty(stove.88) and not stained(stove.88) and nextto(rag.0, sink.82) and nextto(dishtowel.0, sink.82)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_82"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "dishtowel_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_82"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_82"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "SOAK",
          "object": "dishtowel_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_82"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "OPEN",
          "object": "stove_88"
        },
        {
          "action": "CLEAN",
          "object": "stove_88"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_82"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "sink_82"
        }
      ],
      "transition_model": "(define (problem cleaning_stove)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 dishtowel_n_01_1 - dishtowel_n_01 rag_n_01_1 - rag_n_01 sink_n_01_1 - sink_n_01 stove_n_01_1 - stove_n_01)\n    (:init (dusty stove_n_01_1) (inside dishtowel_n_01_1 cabinet_n_01_1) (inside rag_n_01_1 cabinet_n_01_1) (not (soaked dishtowel_n_01_1)) (not (soaked rag_n_01_1)) (not (stained rag_n_01_1)) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj dishtowel_n_01_1 dishtowel_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj stove_n_01_1 stove_n_01_1) (stained stove_n_01_1))\n    (:goal (and (nextto rag_n_01_1 sink_n_01_1) (not (dusty stove_n_01_1)) (nextto dishtowel_n_01_1 sink_n_01_1) (not (stained stove_n_01_1))))\n)",
      "demo": null
    },
    "cleaning_carpets_0_Wainscott_1_int_0_2021-09-11_01-12-41": {
      "task_name": "cleaning_carpets",
      "natural_description": "Clean the stained carpets.",
      "raw_bddl_goal": "(define (problem cleaning_carpets_0)\n    (:domain igibson)\n\n    (:objects\n     \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n        hand_towel.n.01_1 - hand_towel.n.01\n    \tshampoo.n.01_1 - shampoo.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \twasher.n.03_1 - washer.n.03\n    \tdryer.n.01_1 - dryer.n.01\n    \tdoor.n.01_1 - door.n.01\n        sink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (stained floor.n.01_1) \n        (onfloor hand_towel.n.01_1 floor.n.01_2)\n        (inside shampoo.n.01_1 cabinet.n.01_1) \n        (inroom floor.n.01_1 corridor) \n        (inroom floor.n.01_2 utility_room) \n        (inroom washer.n.03_1 utility_room) \n        (inroom dryer.n.01_1 utility_room) \n        (inroom door.n.01_1 corridor) \n        (inroom cabinet.n.01_1 utility_room) \n        (inroom sink.n.01_1 utility_room)\n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?floor.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not stained(room_floor_corridor.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "hand_towel_102"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_51"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_51"
        },
        {
          "action": "SOAK",
          "object": "hand_towel_102"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hand_towel_102"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_utility_room_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_corridor_0"
        }
      ],
      "transition_model": "(define (problem cleaning_carpets)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 floor_n_01_2 - floor_n_01 hand_towel_n_01_1 - hand_towel_n_01 sink_n_01_1 - sink_n_01)\n    (:init (onfloor agent_n_01_1 floor_n_01_1) (onfloor hand_towel_n_01_1 floor_n_01_2) (same_obj agent_n_01_1 agent_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj hand_towel_n_01_1 hand_towel_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (stained floor_n_01_1))\n    (:goal (not (stained floor_n_01_1)))\n)",
      "demo": null
    },
    "serving_a_meal_0_Merom_1_int_0_2021-10-26_00-34-17": {
      "task_name": "serving_a_meal",
      "natural_description": "Serve the meal by placing all food and drinks on the table along with the appropriate utensils.",
      "raw_bddl_goal": "(define (problem serving_a_meal_0)\n    (:domain igibson)\n\n    (:objects\n     \tchicken.n.01_1 chicken.n.01_2 - chicken.n.01\n    \tknife.n.01_1 knife.n.01_2 - knife.n.01\n    \tfork.n.01_1 fork.n.01_2 - fork.n.01\n    \tspoon.n.01_1 spoon.n.01_2 - spoon.n.01\n    \tplate.n.04_1 plate.n.04_2 - plate.n.04\n    \tsoup.n.01_1 soup.n.01_2 - soup.n.01\n    \ttable.n.02_1 - table.n.02\n    \tbread.n.01_1 bread.n.01_2 - bread.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tsalad.n.01_1 salad.n.01_2 - salad.n.01\n    \twater.n.06_1 water.n.06_2 - water.n.06\n    \tcake.n.03_1 cake.n.03_2 - cake.n.03\n    \tstove.n.01_1 - stove.n.01\n            cabinet.n.01_1 cabinet.n.01_2 - cabinet.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (cooked chicken.n.01_1) \n        (cooked chicken.n.01_2) \n        (inside knife.n.01_1 cabinet.n.01_1) \n        (inside knife.n.01_2 cabinet.n.01_1) \n        (inside fork.n.01_1 cabinet.n.01_1) \n        (inside fork.n.01_2 cabinet.n.01_1) \n        (inside spoon.n.01_1 cabinet.n.01_1) \n        (inside spoon.n.01_2 cabinet.n.01_1) \n        (inside plate.n.04_1 cabinet.n.01_2) \n        (inside plate.n.04_2 cabinet.n.01_1) \n        (ontop soup.n.01_1 table.n.02_1) \n        (ontop soup.n.01_2 table.n.02_1) \n        (inside bread.n.01_2 electric_refrigerator.n.01_1) \n        (inside bread.n.01_1 electric_refrigerator.n.01_1) \n        (inside salad.n.01_1 electric_refrigerator.n.01_1) \n        (inside salad.n.01_2 electric_refrigerator.n.01_1) \n        (inside chicken.n.01_1 electric_refrigerator.n.01_1) \n        (inside chicken.n.01_2 electric_refrigerator.n.01_1) \n        (inside water.n.06_1 electric_refrigerator.n.01_1) \n        (inside water.n.06_2 electric_refrigerator.n.01_1) \n        (inside cake.n.03_1 electric_refrigerator.n.01_1) \n        (inside cake.n.03_2 electric_refrigerator.n.01_1) \n        (inroom table.n.02_1 dining_room) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom stove.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom cabinet.n.01_2 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?plate.n.04 - plate.n.04) \n                (ontop ?plate.n.04 ?table.n.02_1)\n            ) \n            (forall \n                (?knife.n.01 - knife.n.01) \n                (ontop ?knife.n.01 ?table.n.02_1)\n            ) \n            (forall \n                (?fork.n.01 - fork.n.01) \n                (ontop ?fork.n.01 ?table.n.02_1)\n            ) \n            (forpairs \n                (?spoon.n.01 - spoon.n.01) \n                (?soup.n.01 - soup.n.01) \n                (nextto ?spoon.n.01 ?soup.n.01)\n            ) \n            (forall \n                (?water.n.06 - water.n.06) \n                (ontop ?water.n.06 ?table.n.02_1)\n            ) \n            (forpairs \n                (?chicken.n.01 - chicken.n.01) \n                (?plate.n.04 - plate.n.04) \n                (ontop ?chicken.n.01 ?plate.n.04)\n            ) \n            (forpairs \n                (?salad.n.01 - salad.n.01) \n                (?plate.n.04 - plate.n.04) \n                (nextto ?salad.n.01 ?plate.n.04)\n            ) \n            (forpairs \n                (?bread.n.01 - bread.n.01) \n                (?plate.n.04 - plate.n.04) \n                (nextto ?bread.n.01 ?plate.n.04)\n            ) \n            (forpairs \n                (?cake.n.03 - cake.n.03) \n                (?plate.n.04 - plate.n.04) \n                (nextto ?cake.n.03 ?plate.n.04)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not plate_n_04(x0) or ontop(x0, breakfast_table.20)) and forall x0. (not knife_n_01(x0) or ontop(x0, breakfast_table.20)) and forall x0. (not fork_n_01(x0) or ontop(x0, breakfast_table.20)) and forall x0. (not spoon_n_01(x0) or forn 1. x1. (not soup_n_01(x1) or nextto(x0, x1))) and forall x1. (not soup_n_01(x1) or forn 1. x0. (not spoon_n_01(x0) or nextto(x0, x1))) and forall x0. (not water_n_06(x0) or ontop(x0, breakfast_table.20)) and forall x0. (not chicken_n_01(x0) or forn 1. x1. (not plate_n_04(x1) or ontop(x0, x1))) and forall x1. (not plate_n_04(x1) or forn 1. x0. (not chicken_n_01(x0) or ontop(x0, x1))) and forall x0. (not salad_n_01(x0) or forn 1. x1. (not plate_n_04(x1) or nextto(x0, x1))) and forall x1. (not plate_n_04(x1) or forn 1. x0. (not salad_n_01(x0) or nextto(x0, x1))) and forall x0. (not bread_n_01(x0) or forn 1. x1. (not plate_n_04(x1) or nextto(x0, x1))) and forall x1. (not plate_n_04(x1) or forn 1. x0. (not bread_n_01(x0) or nextto(x0, x1))) and forall x0. (not cake_n_03(x0) or forn 1. x1. (not plate_n_04(x1) or nextto(x0, x1))) and forall x1. (not plate_n_04(x1) or forn 1. x0. (not cake_n_03(x0) or nextto(x0, x1)))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "fridge_57"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_49"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_50"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "chicken_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "chicken_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "plate_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "plate_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "spoon_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "soup_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "soup_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "table_knife_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "LEFT_GRASP",
          "object": "tablefork_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "toasting_fork_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "LEFT_GRASP",
          "object": "carving_knife_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "water_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "LEFT_GRASP",
          "object": "water_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "salad_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "LEFT_GRASP",
          "object": "salad_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "soup_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        },
        {
          "action": "LEFT_GRASP",
          "object": "spoon_1"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "soup_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cupcake_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "muffin_0"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "plate_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "plate_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bagel_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cookie_0"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "plate_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "plate_1"
        },
        {
          "action": "CLOSE",
          "object": "fridge_57"
        }
      ],
      "transition_model": "(define (problem serving_a_meal)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 cake_n_03_2 - cake_n_03 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 fork_n_01_2 - fork_n_01 plate_n_04_2 - plate_n_04 salad_n_01_2 - salad_n_01 soup_n_01_1 soup_n_01_2 - soup_n_01 spoon_n_01_2 - spoon_n_01 table_n_02_1 - table_n_02)\n    (:init (inside cake_n_03_2 electric_refrigerator_n_01_1) (inside fork_n_01_2 cabinet_n_01_1) (inside plate_n_04_2 cabinet_n_01_1) (inside salad_n_01_2 electric_refrigerator_n_01_1) (inside spoon_n_01_2 cabinet_n_01_1) (ontop soup_n_01_1 table_n_02_1) (ontop soup_n_01_2 table_n_02_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj cake_n_03_2 cake_n_03_2) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj fork_n_01_2 fork_n_01_2) (same_obj plate_n_04_2 plate_n_04_2) (same_obj salad_n_01_2 salad_n_01_2) (same_obj soup_n_01_1 soup_n_01_1) (same_obj soup_n_01_2 soup_n_01_2) (same_obj spoon_n_01_2 spoon_n_01_2) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (ontop fork_n_01_2 table_n_02_1) (nextto salad_n_01_2 plate_n_04_2) (nextto spoon_n_01_2 soup_n_01_1) (nextto cake_n_03_2 plate_n_04_2)))\n)",
      "demo": null
    },
    "polishing_shoes_0_Wainscott_0_int_0_2021-06-10_21-28-31": {
      "task_name": "polishing_shoes",
      "natural_description": "Soak the rag, polish both shoes, and place the rag next to the sink.",
      "raw_bddl_goal": "(define (problem polishing_shoes_0)\n    (:domain igibson)\n\n    (:objects\n    \tshoe.n.01_1 shoe.n.01_2 - shoe.n.01\n    \trag.n.01_1 - rag.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (stained shoe.n.01_1) \n        (stained shoe.n.01_2) \n        (onfloor rag.n.01_1 floor.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (onfloor shoe.n.01_1 floor.n.01_1) \n        (onfloor shoe.n.01_2 floor.n.01_1) \n        (inroom sink.n.01_1 bathroom) \n        (inroom floor.n.01_1 bathroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (nextto ?rag.n.01_1 ?sink.n.01_1) \n            (soaked ?rag.n.01_1) \n            (and \n                (not \n                    (stained ?shoe.n.01_1)\n                ) \n                (not \n                    (stained ?shoe.n.01_2)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "nextto(rag.145, sink.67) and soaked(rag.145) and (not stained(sandal.143)) and (not stained(walker.144))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_145"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_67"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_67"
        },
        {
          "action": "SOAK",
          "object": "rag_145"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_67"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_145"
        },
        {
          "action": "CLEAN",
          "object": "walker_144"
        },
        {
          "action": "CLEAN",
          "object": "sandal_143"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_67"
        }
      ],
      "transition_model": "(define (problem polishing_shoes)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 - floor_n_01 rag_n_01_1 - rag_n_01 shoe_n_01_1 shoe_n_01_2 - shoe_n_01 sink_n_01_1 - sink_n_01)\n    (:init (not (soaked rag_n_01_1)) (onfloor rag_n_01_1 floor_n_01_1) (onfloor shoe_n_01_1 floor_n_01_1) (onfloor shoe_n_01_2 floor_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj shoe_n_01_1 shoe_n_01_1) (same_obj shoe_n_01_2 shoe_n_01_2) (same_obj sink_n_01_1 sink_n_01_1) (stained shoe_n_01_1) (stained shoe_n_01_2))\n    (:goal (and (soaked rag_n_01_1) (nextto rag_n_01_1 sink_n_01_1) (not (stained shoe_n_01_2)) (not (stained shoe_n_01_1))))\n)",
      "demo": null
    },
    "packing_picnics_0_Wainscott_0_int_0_2021-10-26_11-07-29": {
      "task_name": "packing_picnics",
      "natural_description": "Pack all chips and sandwiches inside one carton. Pack all fruits inside one carton. Pack all drinks inside one carton.",
      "raw_bddl_goal": "(define (problem packing_picnics_0)\n    (:domain igibson)\n\n    (:objects\n        carton.n.02_1 carton.n.02_2 carton.n.02_3 - carton.n.02\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        chip.n.04_1 chip.n.04_2 - chip.n.04\n        cabinet.n.01_1 - cabinet.n.01\n        sandwich.n.01_1 sandwich.n.01_2 sandwich.n.01_3 sandwich.n.01_4 - sandwich.n.01\n        countertop.n.01_1 - countertop.n.01\n        melon.n.01_1 - melon.n.01\n        strawberry.n.01_1 strawberry.n.01_2 strawberry.n.01_3 strawberry.n.01_4 - strawberry.n.01\n        electric_refrigerator.n.01_1 - electric_refrigerator.n.01\n        grape.n.01_1 grape.n.01_2 grape.n.01_3 grape.n.01_4 - grape.n.01\n        peach.n.03_1 peach.n.03_2 - peach.n.03\n        pop.n.02_1 pop.n.02_2 - pop.n.02\n        beer.n.01_1 beer.n.01_2 - beer.n.01\n        water.n.06_1 water.n.06_2 water.n.06_3 water.n.06_4 - water.n.06\n        sink.n.01_1 - sink.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (onfloor carton.n.02_2 floor.n.01_2) \n        (onfloor carton.n.02_3 floor.n.01_2) \n        (inside chip.n.04_1 cabinet.n.01_1) \n        (inside chip.n.04_2 cabinet.n.01_1) \n        (ontop sandwich.n.01_1 countertop.n.01_1) \n        (ontop sandwich.n.01_2 countertop.n.01_1) \n        (ontop sandwich.n.01_3 countertop.n.01_1) \n        (ontop sandwich.n.01_4 countertop.n.01_1) \n        (ontop melon.n.01_1 countertop.n.01_1) \n        (inside strawberry.n.01_1 electric_refrigerator.n.01_1) \n        (inside strawberry.n.01_2 electric_refrigerator.n.01_1) \n        (inside strawberry.n.01_3 electric_refrigerator.n.01_1) \n        (inside strawberry.n.01_4 electric_refrigerator.n.01_1) \n        (inside grape.n.01_1 electric_refrigerator.n.01_1) \n        (inside grape.n.01_2 electric_refrigerator.n.01_1) \n        (inside grape.n.01_3 electric_refrigerator.n.01_1) \n        (inside grape.n.01_4 electric_refrigerator.n.01_1) \n        (inside peach.n.03_1 electric_refrigerator.n.01_1) \n        (inside peach.n.03_2 electric_refrigerator.n.01_1) \n        (inside pop.n.02_1 electric_refrigerator.n.01_1) \n        (inside pop.n.02_2 electric_refrigerator.n.01_1) \n        (inside beer.n.01_1 electric_refrigerator.n.01_1) \n        (inside beer.n.01_2 electric_refrigerator.n.01_1) \n        (inside water.n.06_1 cabinet.n.01_1) \n        (inside water.n.06_2 cabinet.n.01_1) \n        (inside water.n.06_3 cabinet.n.01_1) \n        (inside water.n.06_4 cabinet.n.01_1) \n        (inroom floor.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom floor.n.01_2 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (exists \n                (?carton.n.02 - carton.n.02) \n                (and \n                    (forall \n                        (?chip.n.04 - chip.n.04) \n                        (inside ?chip.n.04 ?carton.n.02)\n                    ) \n                    (forall \n                        (?sandwich.n.01 - sandwich.n.01) \n                        (inside ?sandwich.n.01 ?carton.n.02)\n                    )\n                )\n            ) \n            (exists \n                (?carton.n.02 - carton.n.02) \n                (and \n                    (forall \n                        (?strawberry.n.01 - strawberry.n.01) \n                        (inside ?strawberry.n.01 ?carton.n.02)\n                    ) \n                    (forall \n                        (?grape.n.01 - grape.n.01) \n                        (inside ?grape.n.01 ?carton.n.02)\n                    ) \n                    (forall \n                        (?peach.n.03 - peach.n.03) \n                        (inside ?peach.n.03 ?carton.n.02)\n                    ) \n                    (nextto ?melon.n.01_1 ?carton.n.02)\n                )\n            ) \n            (exists \n                (?carton.n.02 - carton.n.02) \n                (and \n                    (forall \n                        (?pop.n.02 - pop.n.02) \n                        (inside ?pop.n.02 ?carton.n.02)\n                    ) \n                    (forall \n                        (?beer.n.01 - beer.n.01) \n                        (inside ?beer.n.01 ?carton.n.02)\n                    ) \n                    (forall \n                        (?water.n.06 - water.n.06) \n                        (inside ?water.n.06 ?carton.n.02)\n                    )\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "exists x0. (not carton_n_02(x0) or ((forall x1. (not chip_n_04(x1) or inside(x1, x0))) and (forall x1. (not sandwich_n_01(x1) or inside(x1, x0))))) and exists x0. (not carton_n_02(x0) or ((forall x1. (not strawberry_n_01(x1) or inside(x1, x0))) and (forall x1. (not grape_n_01(x1) or inside(x1, x0))) and (forall x1. (not peach_n_03(x1) or inside(x1, x0))) and nextto(cantaloup.0, x0))) and exists x0. (not carton_n_02(x0) or ((forall x1. (not pop_n_02(x1) or inside(x1, x0))) and (forall x1. (not beer_n_01(x1) or inside(x1, x0))) and (forall x1. (not water_n_06(x1) or inside(x1, x0)))))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "OPEN",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cantaloup_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hamburger_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hamburger_3"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hamburger_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hamburger_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "chip_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "chip_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "water_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "water_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "water_3"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "water_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "grape_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "grape_3"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "UNFREEZE",
          "object": "grape_1"
        },
        {
          "action": "UNFREEZE",
          "object": "grape_3"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "strawberry_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "strawberry_3"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "UNFREEZE",
          "object": "strawberry_0"
        },
        {
          "action": "UNFREEZE",
          "object": "strawberry_3"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "peach_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "strawberry_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "UNFREEZE",
          "object": "peach_0"
        },
        {
          "action": "UNFREEZE",
          "object": "strawberry_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "beer_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "peach_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "UNFREEZE",
          "object": "beer_0"
        },
        {
          "action": "UNFREEZE",
          "object": "peach_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "beer_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "grape_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "UNFREEZE",
          "object": "beer_1"
        },
        {
          "action": "UNFREEZE",
          "object": "grape_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pop_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pop_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "UNFREEZE",
          "object": "pop_1"
        },
        {
          "action": "UNFREEZE",
          "object": "pop_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "grape_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "strawberry_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "UNFREEZE",
          "object": "grape_2"
        },
        {
          "action": "UNFREEZE",
          "object": "strawberry_1"
        },
        {
          "action": "CLOSE",
          "object": "fridge_97"
        }
      ],
      "transition_model": "(define (problem packing_picnics)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent carton_n_02_2 carton_n_02_3 - carton_n_02 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 floor_n_01_2 - floor_n_01 grape_n_01_3 - grape_n_01 pop_n_02_2 - pop_n_02 strawberry_n_01_1 strawberry_n_01_4 - strawberry_n_01)\n    (:init (inside grape_n_01_3 electric_refrigerator_n_01_1) (inside pop_n_02_2 electric_refrigerator_n_01_1) (inside strawberry_n_01_1 electric_refrigerator_n_01_1) (inside strawberry_n_01_4 electric_refrigerator_n_01_1) (onfloor carton_n_02_2 floor_n_01_2) (onfloor carton_n_02_3 floor_n_01_2) (same_obj carton_n_02_2 carton_n_02_2) (same_obj carton_n_02_3 carton_n_02_3) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj grape_n_01_3 grape_n_01_3) (same_obj pop_n_02_2 pop_n_02_2) (same_obj strawberry_n_01_1 strawberry_n_01_1) (same_obj strawberry_n_01_4 strawberry_n_01_4))\n    (:goal (and (inside strawberry_n_01_1 carton_n_02_2) (inside grape_n_01_3 carton_n_02_2) (inside pop_n_02_2 carton_n_02_3) (inside strawberry_n_01_4 carton_n_02_2)))\n)",
      "demo": null
    },
    "moving_boxes_to_storage_0_Merom_0_int_0_2021-06-11_20-04-35": {
      "task_name": "moving_boxes_to_storage",
      "natural_description": "Move carton1 to floor2 and place carton2 on top of carton1.",
      "raw_bddl_goal": "(define (problem moving_boxes_to_storage_0)\n    (:domain igibson)\n\n    (:objects\n        carton.n.02_1 carton.n.02_2 - carton.n.02\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \tshelf.n.01_1 - shelf.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor carton.n.02_1 floor.n.01_1)\n        (onfloor carton.n.02_2 floor.n.01_1)\n        (inroom floor.n.01_1 living_room) \n        (inroom floor.n.01_2 storage_room) \n        (inroom shelf.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_2)\n    )\n    \n    (:goal \n        (and \n            (onfloor ?carton.n.02_1 ?floor.n.01_2)\n            (ontop ?carton.n.02_2 ?carton.n.02_1)\n        )\n    )\n)",
      "tl_goal": "onfloor(carton.70, room_floor_storage_room.0) and ontop(carton.71, carton.70)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "carton_70"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_storage_room_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "carton_71"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "carton_70"
        }
      ],
      "transition_model": "(define (problem moving_boxes_to_storage)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent carton_n_02_1 carton_n_02_2 - carton_n_02 floor_n_01_1 floor_n_01_2 - floor_n_01)\n    (:init (onfloor agent_n_01_1 floor_n_01_2) (onfloor carton_n_02_1 floor_n_01_1) (onfloor carton_n_02_2 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj carton_n_02_1 carton_n_02_1) (same_obj carton_n_02_2 carton_n_02_2) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2))\n    (:goal (and (ontop carton_n_02_2 carton_n_02_1) (onfloor carton_n_02_1 floor_n_01_2)))\n)",
      "demo": null
    },
    "filling_a_Christmas_stocking_0_Rs_int_0_2021-06-04_18-47-42": {
      "task_name": "filling_a_Christmas_stocking",
      "natural_description": "Fill each stocking with one cube, one candy, and one pen.",
      "raw_bddl_goal": "(define (problem filling_a_Christmas_stocking_0)\n    (:domain igibson)\n\n    (:objects\n     \tcube.n.05_1 cube.n.05_2 cube.n.05_3 cube.n.05_4 - cube.n.05\n    \tfloor.n.01_1 - floor.n.01\n    \tcandy.n.01_1 candy.n.01_2 candy.n.01_3 candy.n.01_4 - candy.n.01\n    \tcabinet.n.01_1 cabinet.n.01_2 - cabinet.n.01\n    \tpen.n.01_1 pen.n.01_2 pen.n.01_3 pen.n.01_4 - pen.n.01\n    \tstocking.n.01_1 stocking.n.01_2 stocking.n.01_3 stocking.n.01_4 - stocking.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor cube.n.05_1 floor.n.01_1) \n        (onfloor cube.n.05_2 floor.n.01_1) \n        (onfloor cube.n.05_3 floor.n.01_1) \n        (onfloor cube.n.05_4 floor.n.01_1) \n        (inside candy.n.01_1 cabinet.n.01_1) \n        (inside candy.n.01_2 cabinet.n.01_1) \n        (inside candy.n.01_3 cabinet.n.01_1) \n        (inside candy.n.01_4 cabinet.n.01_1) \n        (inside pen.n.01_1 cabinet.n.01_1) \n        (inside pen.n.01_2 cabinet.n.01_1) \n        (inside pen.n.01_3 cabinet.n.01_1) \n        (inside pen.n.01_4 cabinet.n.01_1) \n        (onfloor stocking.n.01_1 floor.n.01_1) \n        (onfloor stocking.n.01_2 floor.n.01_1) \n        (onfloor stocking.n.01_3 floor.n.01_1) \n        (onfloor stocking.n.01_4 floor.n.01_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom cabinet.n.01_2 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forpairs \n                (?stocking.n.01 - stocking.n.01) \n                (?cube.n.05 - cube.n.05) \n                (inside ?cube.n.05 ?stocking.n.01)\n            ) \n            (forpairs \n                (?stocking.n.01 - stocking.n.01) \n                (?candy.n.01 - candy.n.01) \n                (inside ?candy.n.01 ?stocking.n.01)\n            ) \n            (forpairs \n                (?stocking.n.01 - stocking.n.01) \n                (?pen.n.01 - pen.n.01) \n                (inside ?pen.n.01 ?stocking.n.01)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not stocking_n_01(x0) or forn 1. x1. (not cube_n_05(x1) or inside(x1, x0))) and forall x1. (not cube_n_05(x1) or forn 1. x0. (not stocking_n_01(x0) or inside(x1, x0))) and forall x0. (not stocking_n_01(x0) or forn 1. x1. (not candy_n_01(x1) or inside(x1, x0))) and forall x1. (not candy_n_01(x1) or forn 1. x0. (not stocking_n_01(x0) or inside(x1, x0))) and forall x0. (not stocking_n_01(x0) or forn 1. x1. (not pen_n_01(x1) or inside(x1, x0))) and forall x1. (not pen_n_01(x1) or forn 1. x0. (not stocking_n_01(x0) or inside(x1, x0)))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "ice_cube_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "stocking_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "stocking_2"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "ice_cube_3"
        },
        {
          "action": "LEFT_GRASP",
          "object": "stocking_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "stocking_1"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "ice_cube_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "stocking_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "stocking_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "ice_cube_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "stocking_3"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "stocking_3"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pen_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lollipop_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "stocking_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "stocking_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candy_cane_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "stocking_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pen_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lollipop_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "stocking_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "stocking_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lollipop_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "stocking_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pen_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lollipop_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "stocking_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "stocking_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lollipop_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "stocking_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pen_3"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candy_cane_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "stocking_3"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "stocking_3"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lollipop_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "stocking_3"
        }
      ],
      "transition_model": "(define (problem filling_a_Christmas_stocking)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 candy_n_01_4 - candy_n_01 cube_n_05_1 cube_n_05_3 - cube_n_05 floor_n_01_1 - floor_n_01 pen_n_01_2 - pen_n_01 stocking_n_01_1 stocking_n_01_2 stocking_n_01_4 - stocking_n_01)\n    (:init (inside candy_n_01_4 cabinet_n_01_1) (inside pen_n_01_2 cabinet_n_01_1) (onfloor cube_n_05_1 floor_n_01_1) (onfloor cube_n_05_3 floor_n_01_1) (onfloor stocking_n_01_1 floor_n_01_1) (onfloor stocking_n_01_2 floor_n_01_1) (onfloor stocking_n_01_4 floor_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj candy_n_01_4 candy_n_01_4) (same_obj cube_n_05_1 cube_n_05_1) (same_obj cube_n_05_3 cube_n_05_3) (same_obj floor_n_01_1 floor_n_01_1) (same_obj pen_n_01_2 pen_n_01_2) (same_obj stocking_n_01_1 stocking_n_01_1) (same_obj stocking_n_01_2 stocking_n_01_2) (same_obj stocking_n_01_4 stocking_n_01_4))\n    (:goal (and (inside pen_n_01_2 stocking_n_01_2) (inside candy_n_01_4 stocking_n_01_4) (inside cube_n_05_3 stocking_n_01_4) (inside cube_n_05_1 stocking_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_a_car_0_Ihlen_0_int_0_2021-09-11_16-37-11": {
      "task_name": "cleaning_a_car",
      "natural_description": "Use the soap, rag and bucket to clean dust off the car.",
      "raw_bddl_goal": "(define (problem cleaning_a_car_0)\n    (:domain igibson)\n\n    (:objects\n     \tcar.n.01_1 - car.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \trag.n.01_1 - rag.n.01\n    \tshelf.n.01_1 - shelf.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \tbucket.n.01_1 - bucket.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor car.n.01_1 floor.n.01_1) \n        (ontop rag.n.01_1 shelf.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (ontop soap.n.01_1 shelf.n.01_1) \n        (dusty car.n.01_1) \n        (onfloor bucket.n.01_1 floor.n.01_1) \n        (inroom floor.n.01_1 garage) \n        (inroom sink.n.01_1 bathroom) \n        (inroom shelf.n.01_1 garage) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?car.n.01_1)\n            ) \n            (inside ?soap.n.01_1 ?bucket.n.01_1) \n            (inside ?rag.n.01_1 ?bucket.n.01_1)\n        )\n    )\n)",
      "tl_goal": "not dusty(car.0) and inside(soap.0, bucket.0) and inside(rag.0, bucket.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "soap_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "CLEAN",
          "object": "car_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_0"
        }
      ],
      "transition_model": "(define (problem cleaning_a_car)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bucket_n_01_1 - bucket_n_01 car_n_01_1 - car_n_01 floor_n_01_1 - floor_n_01 rag_n_01_1 - rag_n_01 shelf_n_01_1 - shelf_n_01 soap_n_01_1 - soap_n_01)\n    (:init (dusty car_n_01_1) (not (soaked rag_n_01_1)) (onfloor bucket_n_01_1 floor_n_01_1) (onfloor car_n_01_1 floor_n_01_1) (ontop rag_n_01_1 shelf_n_01_1) (ontop soap_n_01_1 shelf_n_01_1) (same_obj bucket_n_01_1 bucket_n_01_1) (same_obj car_n_01_1 car_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj shelf_n_01_1 shelf_n_01_1) (same_obj soap_n_01_1 soap_n_01_1))\n    (:goal (and (inside soap_n_01_1 bucket_n_01_1) (not (dusty car_n_01_1)) (inside rag_n_01_1 bucket_n_01_1)))\n)",
      "demo": null
    },
    "defrosting_freezer_0_Beechwood_0_int_0_2021-10-25_23-10-43": {
      "task_name": "defrosting_freezer",
      "natural_description": "Place the receptacle next to the refrigerator, the bucket next to the countertop, the scraper on top of the refrigerator, the towel on the countertop, the soaked rag inside the sink, and all the food inside the bucket.",
      "raw_bddl_goal": "(define (problem defrosting_freezer_0)\n    (:domain igibson)\n\n    (:objects\n     \tfloor.n.01_1 - floor.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \treceptacle.n.01_1 - receptacle.n.01\n    \tbucket.n.01_1 - bucket.n.01\n    \tscraper.n.01_1 - scraper.n.01\n    \ttowel.n.01_1 - towel.n.01\n    \trag.n.01_1 - rag.n.01\n    \tfood.n.02_1 food.n.02_2 food.n.02_3 - food.n.02\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (not \n            (stained sink.n.01_1)\n        ) \n        (onfloor receptacle.n.01_1 floor.n.01_1) \n        (onfloor bucket.n.01_1 floor.n.01_1) \n        (ontop scraper.n.01_1 countertop.n.01_1) \n        (ontop towel.n.01_1 countertop.n.01_1) \n        (not \n            (stained towel.n.01_1)\n        ) \n        (ontop rag.n.01_1 countertop.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (inside food.n.02_1 electric_refrigerator.n.01_1) \n        (inside food.n.02_2 electric_refrigerator.n.01_1) \n        (inside food.n.02_3 electric_refrigerator.n.01_1) \n        (inroom floor.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (nextto ?receptacle.n.01_1 ?electric_refrigerator.n.01_1) \n            (nextto ?bucket.n.01_1 ?countertop.n.01_1) \n            (ontop ?scraper.n.01_1 ?electric_refrigerator.n.01_1) \n            (ontop ?towel.n.01_1 ?countertop.n.01_1) \n            (inside ?rag.n.01_1 ?sink.n.01_1) \n            (soaked ?rag.n.01_1) \n            (forall \n                (?food.n.02 - food.n.02) \n                (inside ?food.n.02 ?bucket.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "nextto(dustpan.0, fridge.57) and nextto(bucket.0, countertop.56) and ontop(scraper.0, fridge.57) and ontop(paper_towel.0, countertop.56) and inside(rag.0, sink.64) and soaked(rag.0) and forall x0. (not food_n_02(x0) or inside(x0, bucket.0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_64"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_64"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_64"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bucket_0"
        },
        {
          "action": "OPEN",
          "object": "fridge_57"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pear_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "UNFREEZE",
          "object": "pear_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pea_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "UNFREEZE",
          "object": "pea_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pomelo_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "UNFREEZE",
          "object": "pomelo_0"
        },
        {
          "action": "CLOSE",
          "object": "fridge_57"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "countertop_56"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scraper_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "fridge_57"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "dustpan_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "fridge_57"
        }
      ],
      "transition_model": "(define (problem defrosting_freezer)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bucket_n_01_1 - bucket_n_01 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 floor_n_01_1 - floor_n_01 food_n_02_1 food_n_02_2 food_n_02_3 - food_n_02 rag_n_01_1 - rag_n_01 receptacle_n_01_1 - receptacle_n_01 scraper_n_01_1 - scraper_n_01 towel_n_01_1 - towel_n_01)\n    (:init (inside food_n_02_1 electric_refrigerator_n_01_1) (inside food_n_02_2 electric_refrigerator_n_01_1) (inside food_n_02_3 electric_refrigerator_n_01_1) (not (stained towel_n_01_1)) (onfloor bucket_n_01_1 floor_n_01_1) (onfloor receptacle_n_01_1 floor_n_01_1) (ontop rag_n_01_1 countertop_n_01_1) (ontop scraper_n_01_1 countertop_n_01_1) (ontop towel_n_01_1 countertop_n_01_1) (same_obj bucket_n_01_1 bucket_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj food_n_02_1 food_n_02_1) (same_obj food_n_02_2 food_n_02_2) (same_obj food_n_02_3 food_n_02_3) (same_obj rag_n_01_1 rag_n_01_1) (same_obj receptacle_n_01_1 receptacle_n_01_1) (same_obj scraper_n_01_1 scraper_n_01_1) (same_obj towel_n_01_1 towel_n_01_1))\n    (:goal (and (ontop scraper_n_01_1 electric_refrigerator_n_01_1) (ontop towel_n_01_1 countertop_n_01_1) (inside food_n_02_1 bucket_n_01_1) (nextto receptacle_n_01_1 electric_refrigerator_n_01_1)))\n)",
      "demo": null
    },
    "packing_lunches_0_Beechwood_0_int_0_2021-10-26_11-03-14": {
      "task_name": "packing_lunches",
      "natural_description": "Place chips, cookies, salad, juice, sandwich, and pop in separate cartons, ensuring the correct items are inside each carton. Additionally, put either an apple or a banana in each of carton1 and carton2.",
      "raw_bddl_goal": "(define (problem packing_lunches_0)\n    (:domain igibson)\n\n    (:objects\n     \tsalad.n.01_1 - salad.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tsandwich.n.01_1 - sandwich.n.01\n    \tchip.n.04_1 chip.n.04_2 - chip.n.04\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tjuice.n.01_1 - juice.n.01\n    \ttable.n.02_1 - table.n.02\n    \tpop.n.02_1 - pop.n.02\n    \tapple.n.01_1 - apple.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \tbanana.n.02_1 - banana.n.02\n    \tcarton.n.02_1 carton.n.02_2 - carton.n.02\n    \tcookie.n.01_1 cookie.n.01_2 - cookie.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (inside salad.n.01_1 electric_refrigerator.n.01_1) \n        (inside sandwich.n.01_1 electric_refrigerator.n.01_1) \n        (inside chip.n.04_1 cabinet.n.01_1) \n        (inside chip.n.04_2 cabinet.n.01_1) \n        (ontop juice.n.01_1 table.n.02_1) \n        (ontop pop.n.02_1 table.n.02_1) \n        (ontop apple.n.01_1 countertop.n.01_1) \n        (ontop banana.n.02_1 countertop.n.01_1) \n        (onfloor carton.n.02_1 floor.n.01_2) \n        (onfloor carton.n.02_2 floor.n.01_2) \n        (ontop cookie.n.01_1 countertop.n.01_1) \n        (ontop cookie.n.01_2 countertop.n.01_1) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom table.n.02_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (inroom floor.n.01_2 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forpairs \n                (?chip.n.04 - chip.n.04) \n                (?carton.n.02 - carton.n.02) \n                (inside ?chip.n.04 ?carton.n.02)\n            ) \n            (forpairs \n                (?cookie.n.01 - cookie.n.01) \n                (?carton.n.02 - carton.n.02) \n                (inside ?cookie.n.01 ?carton.n.02)\n            ) \n            (exists \n                (?carton.n.02 - carton.n.02) \n                (and \n                    (inside ?salad.n.01_1 ?carton.n.02) \n                    (inside ?juice.n.01_1 ?carton.n.02) \n                    (not \n                        (inside ?sandwich.n.01_1 ?carton.n.02)\n                    )\n                )\n            ) \n            (exists \n                (?carton.n.02 - carton.n.02) \n                (and \n                    (inside ?sandwich.n.01_1 ?carton.n.02) \n                    (inside ?pop.n.02_1 ?carton.n.02) \n                    (not \n                        (inside ?salad.n.01_1 ?carton.n.02)\n                    )\n                )\n            ) \n            (or \n                (inside ?apple.n.01_1 ?carton.n.02_1) \n                (inside ?banana.n.02_1 ?carton.n.02_1)\n            ) \n            (or \n                (inside ?apple.n.01_1 ?carton.n.02_2) \n                (inside ?banana.n.02_1 ?carton.n.02_2)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not chip_n_04(x0) or forn 1. x1. (not carton_n_02(x1) or inside(x0, x1))) and forall x1. (not carton_n_02(x1) or forn 1. x0. (not chip_n_04(x0) or inside(x0, x1))) and forall x0. (not cookie_n_01(x0) or forn 1. x1. (not carton_n_02(x1) or inside(x0, x1))) and forall x1. (not carton_n_02(x1) or forn 1. x0. (not cookie_n_01(x0) or inside(x0, x1))) and exists x0. (not carton_n_02(x0) or (inside(salad.0, x0) and inside(juice.0, x0) and (not inside(hamburger.0, x0)))) and exists x0. (not carton_n_02(x0) or (inside(hamburger.0, x0) and inside(pop.0, x0) and (not inside(salad.0, x0)))) and inside(apple.0, carton.0) or inside(banana.0, carton.0) and inside(apple.0, carton.1) or inside(banana.0, carton.1)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "apple_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "banana_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cookie_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cookie_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_54"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "chip_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "chip_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "OPEN",
          "object": "fridge_57"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "salad_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hamburger_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "juice_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pop_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "CLOSE",
          "object": "fridge_57"
        }
      ],
      "transition_model": "(define (problem packing_lunches)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent apple_n_01_1 - apple_n_01 carton_n_02_1 carton_n_02_2 - carton_n_02 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 floor_n_01_2 - floor_n_01 juice_n_01_1 - juice_n_01 pop_n_02_1 - pop_n_02 sandwich_n_01_1 - sandwich_n_01 table_n_02_1 - table_n_02)\n    (:init (inside sandwich_n_01_1 electric_refrigerator_n_01_1) (onfloor carton_n_02_1 floor_n_01_2) (onfloor carton_n_02_2 floor_n_01_2) (ontop apple_n_01_1 countertop_n_01_1) (ontop juice_n_01_1 table_n_02_1) (ontop pop_n_02_1 table_n_02_1) (same_obj apple_n_01_1 apple_n_01_1) (same_obj carton_n_02_1 carton_n_02_1) (same_obj carton_n_02_2 carton_n_02_2) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj juice_n_01_1 juice_n_01_1) (same_obj pop_n_02_1 pop_n_02_1) (same_obj sandwich_n_01_1 sandwich_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (inside apple_n_01_1 carton_n_02_1) (not (inside sandwich_n_01_1 carton_n_02_2)) (inside juice_n_01_1 carton_n_02_2) (inside pop_n_02_1 carton_n_02_1)))\n)",
      "demo": null
    },
    "vacuuming_floors_0_Ihlen_1_int_0_2021-06-08_18-03-55": {
      "task_name": "vacuuming_floors",
      "natural_description": "Vacuum the dusty floors.",
      "raw_bddl_goal": "(define (problem vacuuming_floors_0)\n    (:domain igibson)\n\n    (:objects\n     \tfloor.n.01_1 - floor.n.01\n    \tvacuum.n.04_1 - vacuum.n.04\n        ashcan.n.01_1 - ashcan.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty floor.n.01_1) \n        (onfloor vacuum.n.04_1 floor.n.01_1) \n        (onfloor ashcan.n.01_1 floor.n.01_1) \n        (inroom floor.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?floor.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not dusty(room_floor_bedroom.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "vacuum_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_bedroom_0"
        }
      ],
      "transition_model": "(define (problem vacuuming_floors)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent ashcan_n_01_1 - ashcan_n_01 floor_n_01_1 - floor_n_01 vacuum_n_04_1 - vacuum_n_04)\n    (:init (dusty floor_n_01_1) (onfloor agent_n_01_1 floor_n_01_1) (onfloor ashcan_n_01_1 floor_n_01_1) (onfloor vacuum_n_04_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj ashcan_n_01_1 ashcan_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj vacuum_n_04_1 vacuum_n_04_1))\n    (:goal (not (dusty floor_n_01_1)))\n)",
      "demo": null
    },
    "installing_a_scanner_0_Pomaria_0_int_0_2021-06-08_18-34-59": {
      "task_name": "installing_a_scanner",
      "natural_description": "Turn on the scanner and place it under the table.",
      "raw_bddl_goal": "(define (problem installing_a_scanner_0)\n    (:domain igibson)\n\n    (:objects\n     \tscanner.n.02_1 - scanner.n.02\n    \ttable.n.02_1 - table.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop scanner.n.02_1 table.n.02_1) \n        (not \n            (toggled_on scanner.n.02_1)\n        ) \n        (inroom table.n.02_1 home_office) \n        (inroom floor.n.01_1 home_office) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (toggled_on ?scanner.n.02_1) \n            (under ?scanner.n.02_1 ?table.n.02_1)\n        )\n    )\n)",
      "tl_goal": "toggledon(scanner.0) and under(scanner.0, breakfast_table.3)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "scanner_0"
        },
        {
          "action": "RIGHT_PLACE_UNDER",
          "object": "breakfast_table_3"
        },
        {
          "action": "TOGGLE_ON",
          "object": "scanner_0"
        }
      ],
      "transition_model": "(define (problem installing_a_scanner)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent scanner_n_02_1 - scanner_n_02 table_n_02_1 - table_n_02)\n    (:init (not (toggled_on scanner_n_02_1)) (ontop scanner_n_02_1 table_n_02_1) (same_obj scanner_n_02_1 scanner_n_02_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (toggled_on scanner_n_02_1) (under scanner_n_02_1 table_n_02_1)))\n)",
      "demo": null
    },
    "installing_a_fax_machine_0_Beechwood_0_int_0_2021-10-25_20-22-22": {
      "task_name": "installing_a_fax_machine",
      "natural_description": "Place the fax machine on the table and turn it on.",
      "raw_bddl_goal": "(define (problem installing_a_fax_machine_0)\n    (:domain igibson)\n\n    (:objects\n     \tfacsimile.n.02_1 - facsimile.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \ttable.n.02_1 - table.n.02\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor facsimile.n.02_1 floor.n.01_1) \n        (not \n            (toggled_on facsimile.n.02_1)\n        ) \n        (inroom table.n.02_1 home_office) \n        (inroom floor.n.01_1 home_office) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (ontop ?facsimile.n.02_1 ?table.n.02_1) \n            (toggled_on ?facsimile.n.02_1)\n        )\n    )\n)",
      "tl_goal": "ontop(facsimile.0, breakfast_table.37) and toggledon(facsimile.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "facsimile_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "facsimile_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_37"
        }
      ],
      "transition_model": "(define (problem installing_a_fax_machine)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent facsimile_n_02_1 - facsimile_n_02 floor_n_01_1 - floor_n_01 table_n_02_1 - table_n_02)\n    (:init (not (toggled_on facsimile_n_02_1)) (onfloor facsimile_n_02_1 floor_n_01_1) (same_obj facsimile_n_02_1 facsimile_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (toggled_on facsimile_n_02_1) (ontop facsimile_n_02_1 table_n_02_1)))\n)",
      "demo": null
    },
    "bringing_in_wood_0_Benevolence_1_int_0_2021-09-15_18-42-25": {
      "task_name": "bringing_in_wood",
      "natural_description": "Bring all plywood pieces inside and put them down.",
      "raw_bddl_goal": "(define (problem bringing_in_wood_0)\n    (:domain igibson)\n\n    (:objects\n        plywood.n.01_1 plywood.n.01_2 plywood.n.01_3 - plywood.n.01\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor plywood.n.01_1 floor.n.01_1) \n        (onfloor plywood.n.01_2 floor.n.01_1) \n        (onfloor plywood.n.01_3 floor.n.01_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom floor.n.01_2 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?plywood.n.01 - plywood.n.01) \n                (onfloor ?plywood.n.01 ?floor.n.01_2)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not plywood_n_01(x0) or onfloor(x0, room_floor_kitchen.0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "plywood_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plywood_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_kitchen_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_kitchen_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plywood_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_kitchen_0"
        }
      ],
      "transition_model": "(define (problem bringing_in_wood)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 floor_n_01_2 - floor_n_01 plywood_n_01_1 plywood_n_01_2 plywood_n_01_3 - plywood_n_01)\n    (:init (onfloor plywood_n_01_1 floor_n_01_1) (onfloor plywood_n_01_2 floor_n_01_1) (onfloor plywood_n_01_3 floor_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj plywood_n_01_1 plywood_n_01_1) (same_obj plywood_n_01_2 plywood_n_01_2) (same_obj plywood_n_01_3 plywood_n_01_3))\n    (:goal (and (onfloor plywood_n_01_1 floor_n_01_2) (onfloor plywood_n_01_3 floor_n_01_2) (onfloor plywood_n_01_2 floor_n_01_2)))\n)",
      "demo": null
    },
    "cleaning_oven_0_Benevolence_1_int_0_2021-09-11_12-20-40": {
      "task_name": "cleaning_oven",
      "natural_description": "Clean the oven using wet rags and scrub brushes.",
      "raw_bddl_goal": "(define (problem cleaning_oven_0)\n    (:domain igibson)\n\n    (:objects\n     \treceptacle.n.01_1 - receptacle.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \trag.n.01_1 rag.n.01_2 - rag.n.01\n    \tnewspaper.n.03_1 - newspaper.n.03\n    \tsink.n.01_1 - sink.n.01\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n    \toven.n.01_1 - oven.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor receptacle.n.01_1 floor.n.01_1) \n        (inside soap.n.01_1 cabinet.n.01_1) \n        (inside rag.n.01_1 cabinet.n.01_1) \n        (inside rag.n.01_2 cabinet.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (not \n            (soaked rag.n.01_2)\n        ) \n        (onfloor newspaper.n.03_1 floor.n.01_1) \n        (inside scrub_brush.n.01_1 cabinet.n.01_1) \n        (not \n            (soaked scrub_brush.n.01_1)\n        ) \n        (stained oven.n.01_1) \n        (inroom oven.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?rag.n.01 - rag.n.01) \n                (soaked ?rag.n.01)\n            ) \n            (soaked ?scrub_brush.n.01_1) \n            (not \n                (stained ?oven.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not rag_n_01(x0) or soaked(x0)) and soaked(scrub_brush.0) and not stained(oven.24)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_15"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_19"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_19"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_19"
        },
        {
          "action": "CLEAN",
          "object": "oven_24"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_19"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_19"
        },
        {
          "action": "LEFT_GRASP",
          "object": "rag_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_19"
        },
        {
          "action": "SOAK",
          "object": "rag_1"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_19"
        }
      ],
      "transition_model": "(define (problem cleaning_oven)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 oven_n_01_1 - oven_n_01 rag_n_01_1 rag_n_01_2 - rag_n_01 scrub_brush_n_01_1 - scrub_brush_n_01 sink_n_01_1 - sink_n_01)\n    (:init (inside rag_n_01_1 cabinet_n_01_1) (inside rag_n_01_2 cabinet_n_01_1) (inside scrub_brush_n_01_1 cabinet_n_01_1) (not (soaked rag_n_01_1)) (not (soaked rag_n_01_2)) (not (soaked scrub_brush_n_01_1)) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj oven_n_01_1 oven_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj rag_n_01_2 rag_n_01_2) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (stained oven_n_01_1))\n    (:goal (and (soaked rag_n_01_2) (soaked scrub_brush_n_01_1) (not (stained oven_n_01_1)) (soaked rag_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_toilet_0_Merom_0_int_1_2021-06-23_17-35-48": {
      "task_name": "cleaning_toilet",
      "natural_description": "Use the scrub brush and detergent to clean the stained toilet, and leave them on the floor when finished.",
      "raw_bddl_goal": "(define (problem cleaning_toilet_0)\n    (:domain igibson)\n\n    (:objects\n     \ttoilet.n.02_1 - toilet.n.02\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tdetergent.n.02_1 - detergent.n.02\n        sink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (stained toilet.n.02_1) \n        (onfloor scrub_brush.n.01_1 floor.n.01_1) \n        (onfloor detergent.n.02_1 floor.n.01_1) \n        (inroom toilet.n.02_1 bathroom) \n        (inroom floor.n.01_1 bathroom) \n        (inroom sink.n.01_1 bathroom)\n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?toilet.n.02_1)\n            ) \n            (onfloor ?scrub_brush.n.01_1 ?floor.n.01_1) \n            (onfloor ?detergent.n.02_1 ?floor.n.01_1)\n        )\n    )\n)",
      "tl_goal": "not stained(toilet.45) and onfloor(scrub_brush.70, room_floor_bathroom.0) and onfloor(detergent.71, room_floor_bathroom.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_70"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_48"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_48"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_70"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_48"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_70"
        },
        {
          "action": "CLEAN",
          "object": "toilet_45"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_bathroom_0"
        }
      ],
      "transition_model": "(define (problem cleaning_toilet)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent detergent_n_02_1 - detergent_n_02 floor_n_01_1 - floor_n_01 scrub_brush_n_01_1 - scrub_brush_n_01 sink_n_01_1 - sink_n_01 toilet_n_02_1 - toilet_n_02)\n    (:init (onfloor agent_n_01_1 floor_n_01_1) (onfloor detergent_n_02_1 floor_n_01_1) (onfloor scrub_brush_n_01_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj detergent_n_02_1 detergent_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj toilet_n_02_1 toilet_n_02_1) (stained toilet_n_02_1))\n    (:goal (and (onfloor detergent_n_02_1 floor_n_01_1) (not (stained toilet_n_02_1)) (onfloor scrub_brush_n_01_1 floor_n_01_1)))\n)",
      "demo": null
    },
    "unpacking_suitcase_0_Benevolence_1_int_0_2021-06-08_17-58-34": {
      "task_name": "unpacking_suitcase",
      "natural_description": "Place the carton on the floor, then take everything from the carton and place them on the sofa.",
      "raw_bddl_goal": "(define (problem unpacking_suitcase_0)\n    (:domain igibson)\n\n    (:objects\n     \tsock.n.01_1 sock.n.01_2 - sock.n.01\n    \tfloor.n.01_1 - floor.n.01\n        carton.n.02_1 - carton.n.02\n        perfume.n.02_1 - perfume.n.02\n        toothbrush.n.01_1 - toothbrush.n.01\n        notebook.n.01_1 - notebook.n.01\n    \tsofa.n.01_1 - sofa.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (inside sock.n.01_1 carton.n.02_1) \n        (inside sock.n.01_2 carton.n.02_1) \n        (inside perfume.n.02_1 carton.n.02_1) \n        (inside toothbrush.n.01_1 carton.n.02_1) \n        (inside notebook.n.01_1 carton.n.02_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom sofa.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (onfloor ?carton.n.02_1 ?floor.n.01_1) \n            (forall \n                (?sock.n.01 - sock.n.01) \n                (ontop ?sock.n.01 ?sofa.n.01_1)\n            ) \n            (ontop ?perfume.n.02_1 ?sofa.n.01_1) \n            (ontop ?toothbrush.n.01_1 ?sofa.n.01_1) \n            (ontop ?notebook.n.01_1 ?sofa.n.01_1)\n        )\n    )\n)",
      "tl_goal": "onfloor(carton.0, room_floor_living_room.0) and forall x0. (not sock_n_01(x0) or ontop(x0, sofa.10)) and ontop(cologne.0, sofa.10) and ontop(toothbrush.0, sofa.10) and ontop(notebook.0, sofa.10)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "toothbrush_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "notebook_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "sofa_10"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "sofa_10"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "sock_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cologne_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "sofa_10"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "sofa_10"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "sock_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "sofa_10"
        }
      ],
      "transition_model": "(define (problem unpacking_suitcase)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent carton_n_02_1 - carton_n_02 floor_n_01_1 - floor_n_01 notebook_n_01_1 - notebook_n_01 perfume_n_02_1 - perfume_n_02 sock_n_01_1 sock_n_01_2 - sock_n_01 sofa_n_01_1 - sofa_n_01 toothbrush_n_01_1 - toothbrush_n_01)\n    (:init (inside notebook_n_01_1 carton_n_02_1) (inside perfume_n_02_1 carton_n_02_1) (inside sock_n_01_1 carton_n_02_1) (inside sock_n_01_2 carton_n_02_1) (inside toothbrush_n_01_1 carton_n_02_1) (onfloor agent_n_01_1 floor_n_01_1) (onfloor carton_n_02_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj carton_n_02_1 carton_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj notebook_n_01_1 notebook_n_01_1) (same_obj perfume_n_02_1 perfume_n_02_1) (same_obj sock_n_01_1 sock_n_01_1) (same_obj sock_n_01_2 sock_n_01_2) (same_obj sofa_n_01_1 sofa_n_01_1) (same_obj toothbrush_n_01_1 toothbrush_n_01_1))\n    (:goal (and (ontop notebook_n_01_1 sofa_n_01_1) (ontop perfume_n_02_1 sofa_n_01_1) (onfloor carton_n_02_1 floor_n_01_1) (ontop toothbrush_n_01_1 sofa_n_01_1)))\n)",
      "demo": null
    },
    "locking_every_door_0_Merom_1_int_0_2021-10-20_05-53-14": {
      "task_name": "locking_every_door",
      "natural_description": "Close and lock all the doors.",
      "raw_bddl_goal": "(define (problem locking_every_door_0)\n    (:domain igibson)\n\n    (:objects\n     \tdoor.n.01_1 door.n.01_2 - door.n.01\n    \tbed.n.01_1 - bed.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (open door.n.01_1) \n        (open door.n.01_2) \n        (inroom door.n.01_1 bedroom) \n        (inroom door.n.01_2 bathroom) \n        (inroom bed.n.01_1 bedroom) \n        (inroom floor.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (open ?door.n.01_1)\n            ) \n            (not \n                (open ?door.n.01_2)\n            )\n        )\n    )\n)\n",
      "tl_goal": "not open(door.85) and not open(door.89)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "door_89"
        },
        {
          "action": "CLOSE",
          "object": "door_89"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "door_89"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "door_85"
        },
        {
          "action": "CLOSE",
          "object": "door_85"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "door_85"
        }
      ],
      "transition_model": "(define (problem locking_every_door)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent door_n_01_1 door_n_01_2 - door_n_01)\n    (:init (open door_n_01_1) (open door_n_01_2) (same_obj door_n_01_1 door_n_01_1) (same_obj door_n_01_2 door_n_01_2))\n    (:goal (and (not (open door_n_01_1)) (not (open door_n_01_2))))\n)",
      "demo": null
    },
    "cleaning_table_after_clearing_0_Merom_1_int_0_2021-06-06_19-48-44": {
      "task_name": "cleaning_table_after_clearing",
      "natural_description": "Clean the table after clearing it.",
      "raw_bddl_goal": "(define (problem cleaning_table_after_clearing_0)\n    (:domain igibson)\n\n    (:objects\n     \ttable.n.02_1 - table.n.02\n    \tsoap.n.01_1 - soap.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tfloor.n.01_1 - floor.n.01\n            dishtowel.n.01_1 - dishtowel.n.01\n            cabinet.n.01_1 - cabinet.n.01\n            agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (stained table.n.02_1) \n        (inside soap.n.01_1 cabinet.n.01_1) \n        (inside dishtowel.n.01_1 cabinet.n.01_1) \n        (inroom table.n.02_1 dining_room) \n        (inroom floor.n.01_1 dining_room) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?table.n.02_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not stained(breakfast_table.20)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_49"
        },
        {
          "action": "LEFT_GRASP",
          "object": "dishtowel_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_53"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_53"
        },
        {
          "action": "SOAK",
          "object": "dishtowel_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_53"
        },
        {
          "action": "LEFT_GRASP",
          "object": "dishtowel_0"
        },
        {
          "action": "CLEAN",
          "object": "breakfast_table_20"
        }
      ],
      "transition_model": "(define (problem cleaning_table_after_clearing)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 dishtowel_n_01_1 - dishtowel_n_01 sink_n_01_1 - sink_n_01 table_n_02_1 - table_n_02)\n    (:init (inside dishtowel_n_01_1 cabinet_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj dishtowel_n_01_1 dishtowel_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj table_n_02_1 table_n_02_1) (stained table_n_02_1))\n    (:goal (not (stained table_n_02_1)))\n)",
      "demo": null
    },
    "sorting_books_0_Pomaria_1_int_0_2021-10-26_13-27-18": {
      "task_name": "sorting_books",
      "natural_description": "Place all types of books on the shelf.",
      "raw_bddl_goal": "(define (problem sorting_books_0)\n    (:domain igibson)\n\n    (:objects\n     \thardback.n.01_1 hardback.n.01_2 - hardback.n.01\n    \ttable.n.02_1 - table.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tshelf.n.01_1 - shelf.n.01\n    \tbook.n.02_1 book.n.02_2 - book.n.02\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop hardback.n.01_1 table.n.02_1) \n        (onfloor hardback.n.01_2 floor.n.01_1) \n        (onfloor book.n.02_1 floor.n.01_1) \n        (ontop book.n.02_2 table.n.02_1) \n        (inroom table.n.02_1 living_room) \n        (inroom shelf.n.01_1 living_room) \n        (inroom floor.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?hardback.n.01 - hardback.n.01) \n                (ontop ?hardback.n.01 ?shelf.n.01_1)\n            ) \n            (forall \n                (?book.n.02 - book.n.02) \n                (ontop ?book.n.02 ?shelf.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not hardback_n_01(x0) or ontop(x0, shelf.15)) and forall x0. (not book_n_02(x0) or ontop(x0, shelf.15))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "notebook_80"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "shelf_15"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hardback_81"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hardback_79"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "shelf_15"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "shelf_15"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hardback_78"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "shelf_15"
        }
      ],
      "transition_model": "(define (problem sorting_books)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent book_n_02_1 book_n_02_2 - book_n_02 floor_n_01_1 - floor_n_01 hardback_n_01_1 hardback_n_01_2 - hardback_n_01 shelf_n_01_1 - shelf_n_01 table_n_02_1 - table_n_02)\n    (:init (onfloor book_n_02_1 floor_n_01_1) (onfloor hardback_n_01_2 floor_n_01_1) (ontop book_n_02_2 table_n_02_1) (ontop hardback_n_01_1 table_n_02_1) (same_obj book_n_02_1 book_n_02_1) (same_obj book_n_02_2 book_n_02_2) (same_obj floor_n_01_1 floor_n_01_1) (same_obj hardback_n_01_1 hardback_n_01_1) (same_obj hardback_n_01_2 hardback_n_01_2) (same_obj shelf_n_01_1 shelf_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (ontop hardback_n_01_1 shelf_n_01_1) (ontop book_n_02_2 shelf_n_01_1) (ontop hardback_n_01_2 shelf_n_01_1) (ontop book_n_02_1 shelf_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_barbecue_grill_0_Ihlen_0_int_0_2021-09-10_16-02-39": {
      "task_name": "cleaning_barbecue_grill",
      "natural_description": "Clean stains and dust off of the barbecue grill.",
      "raw_bddl_goal": "(define (problem cleaning_barbecue_grill_0)\n    (:domain igibson)\n\n    (:objects\n     \tgrill.n.02_1 - grill.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \trag.n.01_1 - rag.n.01\n    \tbucket.n.01_1 - bucket.n.01\n        table.n.02_1 - table.n.02\n        sink.n.01_1 - sink.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor grill.n.02_1 floor.n.01_1) \n        (stained grill.n.02_1) \n        (dusty grill.n.02_1) \n        (ontop bucket.n.01_1 table.n.02_1) \n        (ontop rag.n.01_1 table.n.02_1) \n        (inroom floor.n.01_1 garage) \n        (inroom table.n.02_1 storage_room) \n        (inroom sink.n.01_1 storage_room)\n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?grill.n.02_1)\n            ) \n            (not \n                (dusty ?grill.n.02_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not stained(grill.50) and not dusty(grill.50)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "grill_50"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_garage_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_51"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_32"
        },
        {
          "action": "SOAK",
          "object": "rag_51"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_51"
        },
        {
          "action": "CLEAN",
          "object": "grill_50"
        }
      ],
      "transition_model": "(define (problem cleaning_barbecue_grill)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 - floor_n_01 grill_n_02_1 - grill_n_02 rag_n_01_1 - rag_n_01 sink_n_01_1 - sink_n_01 table_n_02_1 - table_n_02)\n    (:init (dusty grill_n_02_1) (onfloor grill_n_02_1 floor_n_01_1) (ontop rag_n_01_1 table_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj grill_n_02_1 grill_n_02_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj table_n_02_1 table_n_02_1) (stained grill_n_02_1))\n    (:goal (and (not (dusty grill_n_02_1)) (not (stained grill_n_02_1))))\n)",
      "demo": null
    },
    "cleaning_the_hot_tub_0_Ihlen_0_int_0_2021-08-24_22-19-07": {
      "task_name": "cleaning_the_hot_tub",
      "natural_description": "Clean the stained hot tub located on floor1.",
      "raw_bddl_goal": "(define (problem cleaning_the_hot_tub_0)\n    (:domain igibson)\n\n    (:objects\n     \tpool.n.01_1 - pool.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n        sink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor pool.n.01_1 floor.n.01_1) \n        (stained pool.n.01_1) \n        (onfloor scrub_brush.n.01_1 floor.n.01_1) \n        (inroom floor.n.01_1 garage) \n        (inroom sink.n.01_1 bathroom)\n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (onfloor ?pool.n.01_1 ?floor.n.01_1) \n            (not \n                (stained ?pool.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "onfloor(pool.50, room_floor_garage.0) and not stained(pool.50)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_51"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_38"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_38"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_51"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_38"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_51"
        },
        {
          "action": "CLEAN",
          "object": "pool_50"
        }
      ],
      "transition_model": "(define (problem cleaning_the_hot_tub)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 - floor_n_01 pool_n_01_1 - pool_n_01 scrub_brush_n_01_1 - scrub_brush_n_01 sink_n_01_1 - sink_n_01)\n    (:init (onfloor agent_n_01_1 floor_n_01_1) (onfloor pool_n_01_1 floor_n_01_1) (onfloor scrub_brush_n_01_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj pool_n_01_1 pool_n_01_1) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (stained pool_n_01_1))\n    (:goal (and (onfloor pool_n_01_1 floor_n_01_1) (not (stained pool_n_01_1))))\n)",
      "demo": null
    },
    "serving_hors_d_oeuvres_0_Wainscott_0_int_0_2021-10-26_14-00-22": {
      "task_name": "serving_hors_d_oeuvres",
      "natural_description": "Place the tray on the table, put the crackers on the table, place the salads next to the crackers, and put the parsley on top of the cheese.",
      "raw_bddl_goal": "(define (problem serving_hors_d_oeuvres_0)\n    (:domain igibson)\n\n    (:objects\n        cabinet.n.01_1 - cabinet.n.01\n    \tsalad.n.01_1 salad.n.01_2 salad.n.01_3 salad.n.01_4 - salad.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \ttray.n.01_1 - tray.n.01\n    \tparsley.n.02_1 parsley.n.02_2 parsley.n.02_3 parsley.n.02_4 - parsley.n.02\n    \tcracker.n.01_1 cracker.n.01_2 cracker.n.01_3 cracker.n.01_4 - cracker.n.01\n    \ttable.n.02_1 - table.n.02\n    \tcheese.n.01_1 cheese.n.01_2 cheese.n.01_3 cheese.n.01_4 - cheese.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (inside salad.n.01_1 electric_refrigerator.n.01_1) \n        (inside salad.n.01_2 electric_refrigerator.n.01_1) \n        (inside salad.n.01_3 electric_refrigerator.n.01_1) \n        (inside salad.n.01_4 electric_refrigerator.n.01_1) \n        (inside parsley.n.02_1 electric_refrigerator.n.01_1) \n        (inside parsley.n.02_2 electric_refrigerator.n.01_1) \n        (inside parsley.n.02_3 electric_refrigerator.n.01_1) \n        (inside parsley.n.02_4 electric_refrigerator.n.01_1) \n        (onfloor tray.n.01_1 floor.n.01_1) \n        (ontop cracker.n.01_1 table.n.02_1) \n        (ontop cracker.n.01_2 table.n.02_1) \n        (ontop cracker.n.01_3 table.n.02_1) \n        (ontop cracker.n.01_4 table.n.02_1) \n        (inside cheese.n.01_1 electric_refrigerator.n.01_1) \n        (inside cheese.n.01_2 electric_refrigerator.n.01_1) \n        (inside cheese.n.01_3 electric_refrigerator.n.01_1) \n        (inside cheese.n.01_4 electric_refrigerator.n.01_1) \n        (inroom table.n.02_1 dining_room) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 dining_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (ontop ?tray.n.01_1 ?table.n.02_1) \n            (forall \n                (?cracker.n.01 - cracker.n.01) \n                (ontop ?cracker.n.01 ?table.n.02_1)\n            ) \n            (forpairs \n                (?salad.n.01 - salad.n.01)\n                (?cracker.n.01 - cracker.n.01)\n                (nextto ?salad.n.01 ?cracker.n.01)\n            )\n            (forpairs \n                (?cheese.n.01 - cheese.n.01) \n                (?parsley.n.02 - parsley.n.02) \n                (ontop ?parsley.n.02 ?cheese.n.01)\n            ) \n        )\n    )\n)\n",
      "tl_goal": "ontop(tray.147, breakfast_table.1) and forall x0. (not cracker_n_01(x0) or ontop(x0, breakfast_table.1)) and forall x0. (not salad_n_01(x0) or forn 1. x1. (not cracker_n_01(x1) or nextto(x0, x1))) and forall x1. (not cracker_n_01(x1) or forn 1. x0. (not salad_n_01(x0) or nextto(x0, x1))) and forall x0. (not cheese_n_01(x0) or forn 1. x1. (not parsley_n_02(x1) or ontop(x1, x0))) and forall x1. (not parsley_n_02(x1) or forn 1. x0. (not cheese_n_01(x0) or ontop(x1, x0)))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "fridge_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "salad_143"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "salad_144"
        },
        {
          "action": "UNFREEZE",
          "object": "salad_143"
        },
        {
          "action": "UNFREEZE",
          "object": "salad_144"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "pretzel_153"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "pretzel_152"
        },
        {
          "action": "LEFT_GRASP",
          "object": "salad_145"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "salad_146"
        },
        {
          "action": "UNFREEZE",
          "object": "salad_145"
        },
        {
          "action": "UNFREEZE",
          "object": "salad_146"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "pretzel_154"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "pretzel_155"
        },
        {
          "action": "LEFT_GRASP",
          "object": "tray_147"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cheese_156"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cheese_157"
        },
        {
          "action": "UNFREEZE",
          "object": "cheese_156"
        },
        {
          "action": "UNFREEZE",
          "object": "cheese_157"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cheese_158"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cheese_159"
        },
        {
          "action": "UNFREEZE",
          "object": "cheese_158"
        },
        {
          "action": "UNFREEZE",
          "object": "cheese_159"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "parsley_148"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "parsley_149"
        },
        {
          "action": "UNFREEZE",
          "object": "parsley_148"
        },
        {
          "action": "UNFREEZE",
          "object": "parsley_149"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "cheese_156"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "cheese_157"
        },
        {
          "action": "LEFT_GRASP",
          "object": "parsley_150"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "parsley_151"
        },
        {
          "action": "UNFREEZE",
          "object": "parsley_150"
        },
        {
          "action": "UNFREEZE",
          "object": "parsley_151"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "cheese_158"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "cheese_159"
        },
        {
          "action": "CLOSE",
          "object": "fridge_97"
        }
      ],
      "transition_model": "(define (problem serving_hors_d_oeuvres)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cheese_n_01_2 - cheese_n_01 cracker_n_01_1 cracker_n_01_2 cracker_n_01_3 cracker_n_01_4 - cracker_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 floor_n_01_1 - floor_n_01 parsley_n_02_3 - parsley_n_02 salad_n_01_3 - salad_n_01 table_n_02_1 - table_n_02 tray_n_01_1 - tray_n_01)\n    (:init (inside cheese_n_01_2 electric_refrigerator_n_01_1) (inside parsley_n_02_3 electric_refrigerator_n_01_1) (inside salad_n_01_3 electric_refrigerator_n_01_1) (onfloor tray_n_01_1 floor_n_01_1) (ontop cracker_n_01_1 table_n_02_1) (ontop cracker_n_01_2 table_n_02_1) (ontop cracker_n_01_3 table_n_02_1) (ontop cracker_n_01_4 table_n_02_1) (same_obj cheese_n_01_2 cheese_n_01_2) (same_obj cracker_n_01_1 cracker_n_01_1) (same_obj cracker_n_01_2 cracker_n_01_2) (same_obj cracker_n_01_3 cracker_n_01_3) (same_obj cracker_n_01_4 cracker_n_01_4) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj parsley_n_02_3 parsley_n_02_3) (same_obj salad_n_01_3 salad_n_01_3) (same_obj table_n_02_1 table_n_02_1) (same_obj tray_n_01_1 tray_n_01_1))\n    (:goal (and (ontop cracker_n_01_1 table_n_02_1) (ontop parsley_n_02_3 cheese_n_01_2) (ontop tray_n_01_1 table_n_02_1) (nextto salad_n_01_3 cracker_n_01_4)))\n)",
      "demo": null
    },
    "packing_adult_s_bags_0_Ihlen_1_int_0_2021-10-26_09-54-15": {
      "task_name": "packing_adult_s_bags",
      "natural_description": "Pack all jewelry, makeup, toothbrush, and mouse inside the backpack, and place the backpack on the second floor.",
      "raw_bddl_goal": "(define (problem packing_adult_s_bags_0)\n    (:domain igibson)\n\n    (:objects\n        backpack.n.01_1 - backpack.n.01\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        hanger.n.02_1 - hanger.n.02\n        bed.n.01_1 - bed.n.01\n        makeup.n.01_1 makeup.n.01_2 - makeup.n.01\n        jewelry.n.01_1 jewelry.n.01_2 - jewelry.n.01\n        toothbrush.n.01_1 - toothbrush.n.01\n        mouse.n.04_1 - mouse.n.04\n        door.n.01_1 - door.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor backpack.n.01_1 floor.n.01_1) \n        (ontop hanger.n.02_1 bed.n.01_1) \n        (ontop makeup.n.01_1 bed.n.01_1) \n        (ontop makeup.n.01_2 bed.n.01_1) \n        (ontop toothbrush.n.01_1 bed.n.01_1) \n        (onfloor jewelry.n.01_1 floor.n.01_1) \n        (onfloor jewelry.n.01_2 floor.n.01_1) \n        (ontop mouse.n.04_1 bed.n.01_1) \n        (open door.n.01_1) \n        (inroom floor.n.01_1 bedroom) \n        (inroom floor.n.01_2 corridor) \n        (inroom door.n.01_1 bedroom) \n        (inroom bed.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?jewelry.n.01 - jewelry.n.01) \n                (inside ?jewelry.n.01 ?backpack.n.01_1)\n            ) \n            (forall \n                (?makeup.n.01 - makeup.n.01) \n                (inside ?makeup.n.01 ?backpack.n.01_1)\n            ) \n            (inside ?toothbrush.n.01_1 ?backpack.n.01_1) \n            (inside ?mouse.n.04_1 ?backpack.n.01_1) \n            (onfloor ?backpack.n.01_1 ?floor.n.01_2)\n        )\n    )\n)",
      "tl_goal": "forall x0. (not jewelry_n_01(x0) or inside(x0, backpack.112)) and forall x0. (not makeup_n_01(x0) or inside(x0, backpack.112)) and inside(toothbrush.118, backpack.112) and inside(mouse.119, backpack.112) and onfloor(backpack.112, room_floor_corridor.0)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "backpack_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "mouse_119"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bracelet_116"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "necklace_117"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "toothbrush_118"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "lipstick_115"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "lipstick_114"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "backpack_112"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_corridor_0"
        }
      ],
      "transition_model": "(define (problem packing_adult_s_bags)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent backpack_n_01_1 - backpack_n_01 bed_n_01_1 - bed_n_01 floor_n_01_1 - floor_n_01 jewelry_n_01_1 jewelry_n_01_2 - jewelry_n_01 makeup_n_01_1 - makeup_n_01 mouse_n_04_1 - mouse_n_04)\n    (:init (onfloor backpack_n_01_1 floor_n_01_1) (onfloor jewelry_n_01_1 floor_n_01_1) (onfloor jewelry_n_01_2 floor_n_01_1) (ontop makeup_n_01_1 bed_n_01_1) (ontop mouse_n_04_1 bed_n_01_1) (same_obj backpack_n_01_1 backpack_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj jewelry_n_01_1 jewelry_n_01_1) (same_obj jewelry_n_01_2 jewelry_n_01_2) (same_obj makeup_n_01_1 makeup_n_01_1) (same_obj mouse_n_04_1 mouse_n_04_1))\n    (:goal (and (inside makeup_n_01_1 backpack_n_01_1) (inside mouse_n_04_1 backpack_n_01_1) (inside jewelry_n_01_2 backpack_n_01_1) (inside jewelry_n_01_1 backpack_n_01_1)))\n)",
      "demo": null
    },
    "packing_car_for_trip_0_Ihlen_0_int_0_2021-10-26_10-27-23": {
      "task_name": "packing_car_for_trip",
      "natural_description": "Pack the briefcase, pencil box, headset, and duffel bag inside the car for the trip.",
      "raw_bddl_goal": "(define (problem packing_car_for_trip_0)\n    (:domain igibson)\n\n    (:objects \n        car.n.01_1 - car.n.01\n        briefcase.n.01_1 - briefcase.n.01\n        pencil_box.n.01_1 - pencil_box.n.01\n        headset.n.01_1 - headset.n.01\n        duffel_bag.n.01_1 - duffel_bag.n.01\n        table.n.02_1 - table.n.02\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor car.n.01_1 floor.n.01_1) \n        (onfloor briefcase.n.01_1 floor.n.01_2) \n        (ontop pencil_box.n.01_1 table.n.02_1) \n        (ontop headset.n.01_1 table.n.02_1) \n        (onfloor duffel_bag.n.01_1 floor.n.01_2) \n        (inroom floor.n.01_1 garage) \n        (inroom floor.n.01_2 storage_room) \n        (inroom table.n.02_1 storage_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (inside briefcase.n.01_1 car.n.01_1) \n            (inside pencil_box.n.01_1 car.n.01_1) \n            (inside headset.n.01_1 car.n.01_1) \n            (inside duffel_bag.n.01_1 car.n.01_1)\n        )\n    )\n)",
      "tl_goal": "inside(briefcase.51, car.50) and inside(pencil_box.52, car.50) and inside(headset.53, car.50) and inside(duffel_bag.54, car.50)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "car_50"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "briefcase_51"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pencil_box_52"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "car_50"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "car_50"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "duffel_bag_54"
        },
        {
          "action": "LEFT_GRASP",
          "object": "headset_53"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "car_50"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "car_50"
        }
      ],
      "transition_model": "(define (problem packing_car_for_trip)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent briefcase_n_01_1 - briefcase_n_01 car_n_01_1 - car_n_01 duffel_bag_n_01_1 - duffel_bag_n_01 floor_n_01_1 floor_n_01_2 - floor_n_01 headset_n_01_1 - headset_n_01 pencil_box_n_01_1 - pencil_box_n_01 table_n_02_1 - table_n_02)\n    (:init (onfloor briefcase_n_01_1 floor_n_01_2) (onfloor car_n_01_1 floor_n_01_1) (onfloor duffel_bag_n_01_1 floor_n_01_2) (ontop headset_n_01_1 table_n_02_1) (ontop pencil_box_n_01_1 table_n_02_1) (same_obj briefcase_n_01_1 briefcase_n_01_1) (same_obj car_n_01_1 car_n_01_1) (same_obj duffel_bag_n_01_1 duffel_bag_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj headset_n_01_1 headset_n_01_1) (same_obj pencil_box_n_01_1 pencil_box_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (inside briefcase_n_01_1 car_n_01_1) (inside duffel_bag_n_01_1 car_n_01_1) (inside pencil_box_n_01_1 car_n_01_1) (inside headset_n_01_1 car_n_01_1)))\n)",
      "demo": null
    },
    "rearranging_furniture_0_Pomaria_2_int_1_2021-06-22_16-39-21": {
      "task_name": "rearranging_furniture",
      "natural_description": "Place lamp1 next to the door, lamp2 next to the window, have seat1 touching the bed, and place seat2 next to the window.",
      "raw_bddl_goal": "(define (problem rearranging_furniture_0)\n    (:domain igibson)\n\n    (:objects\n     \tlamp.n.02_1 lamp.n.02_2 - lamp.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tseat.n.03_1 seat.n.03_2 - seat.n.03\n    \tbed.n.01_1 - bed.n.01\n    \twindow.n.01_1 - window.n.01\n    \tdoor.n.01_1 - door.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor lamp.n.02_1 floor.n.01_1) \n        (onfloor lamp.n.02_2 floor.n.01_1) \n        (onfloor seat.n.03_1 floor.n.01_1) \n        (ontop seat.n.03_2 bed.n.01_1) \n        (inroom window.n.01_1 bedroom) \n        (inroom bed.n.01_1 bedroom) \n        (inroom floor.n.01_1 bedroom) \n        (inroom door.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (nextto ?lamp.n.02_1 ?door.n.01_1) \n            (nextto ?lamp.n.02_2 ?window.n.01_1) \n            (touching ?seat.n.03_1 ?bed.n.01_1) \n            (nextto ?seat.n.03_2 ?window.n.01_1)\n        )\n    )\n)",
      "tl_goal": "nextto(table_lamp.0, door.29) and nextto(floor_lamp.1, window.27) and touching(chaise_longue.0, bed.11) and nextto(chaise_longue.1, window.27)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "table_lamp_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "door_29"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "floor_lamp_1"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "window_27"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "chaise_longue_1"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "window_27"
        }
      ],
      "transition_model": "(define (problem rearranging_furniture)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bed_n_01_1 - bed_n_01 door_n_01_1 - door_n_01 floor_n_01_1 - floor_n_01 lamp_n_02_1 lamp_n_02_2 - lamp_n_02 seat_n_03_2 - seat_n_03 window_n_01_1 - window_n_01)\n    (:init (onfloor lamp_n_02_1 floor_n_01_1) (onfloor lamp_n_02_2 floor_n_01_1) (ontop seat_n_03_2 bed_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj door_n_01_1 door_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj lamp_n_02_1 lamp_n_02_1) (same_obj lamp_n_02_2 lamp_n_02_2) (same_obj seat_n_03_2 seat_n_03_2) (same_obj window_n_01_1 window_n_01_1))\n    (:goal (and (nextto lamp_n_02_1 door_n_01_1) (nextto lamp_n_02_2 window_n_01_1) (nextto seat_n_03_2 window_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_bedroom_0_Benevolence_2_int_0_2021-06-06_18-10-59": {
      "task_name": "cleaning_bedroom",
      "natural_description": "Put clothes inside the cabinets, put jewelry and perfume inside the cabinet, place the sheet on the bed and the painting on top, clean the cabinets of any dust, place the vacuum next to the bed.",
      "raw_bddl_goal": "(define (problem cleaning_bedroom_0)\n    (:domain igibson)\n\n    (:objects\n        floor.n.01_1 - floor.n.01\n        apparel.n.01_1 apparel.n.01_2 - apparel.n.01\n        bed.n.01_1 - bed.n.01\n        jewelry.n.01_1 - jewelry.n.01\n        perfume.n.02_1 - perfume.n.02\n        painting.n.01_1 - painting.n.01\n        vacuum.n.04_1 - vacuum.n.04\n        hand_towel.n.01_1 - hand_towel.n.01\n        sheet.n.03_1 - sheet.n.03\n        cabinet.n.01_1 cabinet.n.01_2 - cabinet.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty cabinet.n.01_1) \n        (dusty cabinet.n.01_2) \n        (ontop apparel.n.01_1 bed.n.01_1) \n        (ontop apparel.n.01_2 bed.n.01_1) \n        (onfloor jewelry.n.01_1 floor.n.01_1) \n        (onfloor perfume.n.02_1 floor.n.01_1) \n        (ontop painting.n.01_1 bed.n.01_1) \n        (not \n            (dusty vacuum.n.04_1)\n        ) \n        (onfloor vacuum.n.04_1 floor.n.01_1) \n        (onfloor hand_towel.n.01_1 floor.n.01_1)\n        (onfloor sheet.n.03_1 floor.n.01_1) \n        (inroom floor.n.01_1 bedroom) \n        (inroom bed.n.01_1 bedroom) \n        (inroom cabinet.n.01_1 bedroom) \n        (inroom cabinet.n.01_2 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?apparel.n.01 - apparel.n.01) \n                (exists \n                    (?cabinet.n.01 - cabinet.n.01) \n                    (inside ?apparel.n.01 ?cabinet.n.01)\n                )\n            ) \n            (and \n                (inside ?jewelry.n.01_1 ?cabinet.n.01_1) \n                (inside ?perfume.n.02_1 ?cabinet.n.01_1)\n            ) \n            (ontop ?sheet.n.03_1 ?bed.n.01_1) \n            (forall \n                (?cabinet.n.01 - cabinet.n.01) \n                (not \n                    (dusty ?cabinet.n.01)\n                )\n            ) \n            (nextto ?vacuum.n.04_1 ?bed.n.01_1) \n            (ontop ?painting.n.01_1 ?sheet.n.03_1)\n        )\n    )\n)",
      "tl_goal": "forall x0. (not apparel_n_01(x0) or (exists x1. (not cabinet_n_01(x1) or inside(x0, x1)))) and inside(necklace.48, bottom_cabinet.2) and inside(cologne.49, bottom_cabinet.2) and ontop(sheet.53, bed.10) and forall x0. (not cabinet_n_01(x0) or (not dusty(x0))) and nextto(vacuum.51, bed.10) and ontop(painting.50, sheet.53)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "hand_towel_52"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_2"
        },
        {
          "action": "CLEAN",
          "object": "bottom_cabinet_2"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_bedroom_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cologne_49"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "necklace_48"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "jeans_46"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "jeans_47"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "sheet_53"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "bed_10"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "painting_50"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "sheet_53"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hand_towel_52"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_0"
        },
        {
          "action": "CLEAN",
          "object": "bottom_cabinet_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "bottom_cabinet_0"
        }
      ],
      "transition_model": "(define (problem cleaning_bedroom)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent apparel_n_01_1 apparel_n_01_2 - apparel_n_01 bed_n_01_1 - bed_n_01 cabinet_n_01_1 cabinet_n_01_2 - cabinet_n_01 floor_n_01_1 - floor_n_01 hand_towel_n_01_1 - hand_towel_n_01 painting_n_01_1 - painting_n_01 sheet_n_03_1 - sheet_n_03 vacuum_n_04_1 - vacuum_n_04)\n    (:init (dusty cabinet_n_01_1) (dusty cabinet_n_01_2) (not (dusty vacuum_n_04_1)) (onfloor hand_towel_n_01_1 floor_n_01_1) (onfloor sheet_n_03_1 floor_n_01_1) (onfloor vacuum_n_04_1 floor_n_01_1) (ontop apparel_n_01_1 bed_n_01_1) (ontop apparel_n_01_2 bed_n_01_1) (ontop painting_n_01_1 bed_n_01_1) (same_obj apparel_n_01_1 apparel_n_01_1) (same_obj apparel_n_01_2 apparel_n_01_2) (same_obj bed_n_01_1 bed_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj cabinet_n_01_2 cabinet_n_01_2) (same_obj floor_n_01_1 floor_n_01_1) (same_obj hand_towel_n_01_1 hand_towel_n_01_1) (same_obj painting_n_01_1 painting_n_01_1) (same_obj sheet_n_03_1 sheet_n_03_1) (same_obj vacuum_n_04_1 vacuum_n_04_1))\n    (:goal (and (not (dusty cabinet_n_01_1)) (inside apparel_n_01_2 cabinet_n_01_2) (nextto vacuum_n_04_1 bed_n_01_1) (ontop sheet_n_03_1 bed_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_floors_0_Merom_0_int_1_2021-06-23_16-12-28": {
      "task_name": "cleaning_floors",
      "natural_description": "Clean dust and stains off the floors.",
      "raw_bddl_goal": "(define (problem cleaning_floors_0)\n    (:domain igibson)\n\n    (:objects\n     \tfloor.n.01_1 - floor.n.01\n    \tbroom.n.01_1 - broom.n.01\n    \tdustpan.n.02_1 - dustpan.n.02\n    \tcleansing_agent.n.01_1 - cleansing_agent.n.01\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n    \tdoor.n.01_1 - door.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty floor.n.01_1) \n        (stained floor.n.01_1) \n        (onfloor broom.n.01_1 floor.n.01_1) \n        (onfloor dustpan.n.02_1 floor.n.01_1) \n        (onfloor cleansing_agent.n.01_1 floor.n.01_1) \n        (onfloor scrub_brush.n.01_1 floor.n.01_1) \n        (inroom floor.n.01_1 bathroom) \n        (inroom door.n.01_1 bathroom) \n        (inroom sink.n.01_1 bathroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?floor.n.01_1)\n            ) \n            (not \n                (dusty ?floor.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not stained(room_floor_bathroom.0) and not dusty(room_floor_bathroom.0)",
      "action_trajectory": [
        {
          "action": "TOGGLE_ON",
          "object": "sink_48"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_48"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_48"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_bathroom_0"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "scrub_brush_0"
        }
      ],
      "transition_model": "(define (problem cleaning_floors)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent broom_n_01_1 - broom_n_01 dustpan_n_02_1 - dustpan_n_02 floor_n_01_1 - floor_n_01 scrub_brush_n_01_1 - scrub_brush_n_01 sink_n_01_1 - sink_n_01)\n    (:init (dusty floor_n_01_1) (onfloor agent_n_01_1 floor_n_01_1) (onfloor broom_n_01_1 floor_n_01_1) (onfloor cleansing_agent_n_01_1 floor_n_01_1) (onfloor dustpan_n_02_1 floor_n_01_1) (onfloor scrub_brush_n_01_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj broom_n_01_1 broom_n_01_1) (same_obj cleansing_agent_n_01_1 cleansing_agent_n_01_1) (same_obj dustpan_n_02_1 dustpan_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (stained floor_n_01_1))\n    (:goal (and (not (stained floor_n_01_1)) (not (dusty floor_n_01_1))))\n)",
      "demo": null
    },
    "opening_presents_0_Benevolence_2_int_0_2021-10-25_21-10-48": {
      "task_name": "opening_presents",
      "natural_description": "Open all the gift packages.",
      "raw_bddl_goal": "(define (problem opening_presents_0)\n    (:domain igibson)\n\n    (:objects\n     \tpackage.n.02_1 package.n.02_2 - package.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tbed.n.01_1 - bed.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor package.n.02_1 floor.n.01_1) \n        (onfloor package.n.02_2 floor.n.01_1) \n        (not \n            (open package.n.02_1)\n        ) \n        (not \n            (open package.n.02_2)\n        ) \n        (inroom bed.n.01_1 bedroom) \n        (inroom floor.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?package.n.02 - package.n.02) \n                (open ?package.n.02)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not package_n_02(x0) or open(x0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "package_0"
        },
        {
          "action": "OPEN",
          "object": "package_0"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "package_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "package_1"
        },
        {
          "action": "OPEN",
          "object": "package_1"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "package_1"
        }
      ],
      "transition_model": "(define (problem opening_presents)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 - floor_n_01 package_n_02_1 package_n_02_2 - package_n_02)\n    (:init (not (open package_n_02_1)) (not (open package_n_02_2)) (onfloor package_n_02_1 floor_n_01_1) (onfloor package_n_02_2 floor_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj package_n_02_1 package_n_02_1) (same_obj package_n_02_2 package_n_02_2))\n    (:goal (and (open package_n_02_1) (open package_n_02_2)))\n)",
      "demo": null
    },
    "picking_up_take-out_food_0_Ihlen_1_int_0_2021-06-10_22-09-43": {
      "task_name": "picking_up_take-out_food",
      "natural_description": "Place the sushi and hamburger inside separate cartons that are on the table.",
      "raw_bddl_goal": "(define (problem picking_up_take-out_food_0)\n    (:domain igibson)\n\n    (:objects\n    \tfloor.n.01_1 - floor.n.01\n    \tcarton.n.02_1 - carton.n.02\n        table.n.02_1 - table.n.02\n        sushi.n.01_1 - sushi.n.01\n        hamburger.n.01_1 - hamburger.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (inside sushi.n.01_1 carton.n.02_1) \n        (inside hamburger.n.01_1 carton.n.02_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom table.n.02_1 dining_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?carton.n.02 - carton.n.02) \n                (ontop ?carton.n.02 ?table.n.02_1)\n            ) \n            (inside ?sushi.n.01_1 ?carton.n.02_1) \n            (inside ?hamburger.n.01_1 ?carton.n.02_1)\n        )\n    )\n)\n",
      "tl_goal": "forall x0. (not carton_n_02(x0) or ontop(x0, breakfast_table.19)) and inside(sushi.0, carton.0) and inside(hamburger.0, carton.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_19"
        }
      ],
      "transition_model": "(define (problem picking_up_take-out_food)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent carton_n_02_1 - carton_n_02 floor_n_01_1 - floor_n_01 hamburger_n_01_1 - hamburger_n_01 sushi_n_01_1 - sushi_n_01 table_n_02_1 - table_n_02)\n    (:init (inside hamburger_n_01_1 carton_n_02_1) (inside sushi_n_01_1 carton_n_02_1) (onfloor carton_n_02_1 floor_n_01_1) (same_obj carton_n_02_1 carton_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj hamburger_n_01_1 hamburger_n_01_1) (same_obj sushi_n_01_1 sushi_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (ontop carton_n_02_1 table_n_02_1) (inside hamburger_n_01_1 carton_n_02_1) (inside sushi_n_01_1 carton_n_02_1)))\n)",
      "demo": null
    },
    "organizing_file_cabinet_0_Pomaria_0_int_0_2021-06-08_15-27-20": {
      "task_name": "organizing_file_cabinet",
      "natural_description": "Place all documents and folders inside the cabinet, and put the marker on the table.",
      "raw_bddl_goal": "(define (problem organizing_file_cabinet_0)\n    (:domain igibson)\n\n    (:objects\n        floor.n.01_1 - floor.n.01\n        marker.n.03_1 - marker.n.03\n        chair.n.01_1 - chair.n.01\n        document.n.01_1 document.n.01_2 document.n.01_3 document.n.01_4 - document.n.01\n        table.n.02_1 - table.n.02\n        cabinet.n.01_1 - cabinet.n.01\n        folder.n.02_1 folder.n.02_2 - folder.n.02\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop marker.n.03_1 chair.n.01_1) \n        (ontop document.n.01_1 table.n.02_1) \n        (inside document.n.01_2 cabinet.n.01_1) \n        (ontop document.n.01_3 table.n.02_1) \n        (inside document.n.01_4 cabinet.n.01_1) \n        (ontop folder.n.02_1 table.n.02_1) \n        (onfloor folder.n.02_2 floor.n.01_1) \n        (inroom cabinet.n.01_1 home_office) \n        (inroom table.n.02_1 home_office) \n        (inroom chair.n.01_1 home_office) \n        (inroom floor.n.01_1 home_office) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (ontop ?marker.n.03_1 ?table.n.02_1) \n            (forall \n                (?document.n.01 - document.n.01) \n                (inside ?document.n.01 ?cabinet.n.01_1)\n            ) \n            (forall \n                (?folder.n.02 - folder.n.02) \n                (inside ?folder.n.02 ?cabinet.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "ontop(highlighter.0, breakfast_table.3) and forall x0. (not document_n_01(x0) or inside(x0, bottom_cabinet_no_top.21)) and forall x0. (not folder_n_02(x0) or inside(x0, bottom_cabinet_no_top.21))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "highlighter_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_3"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_21"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "folder_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_21"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "folder_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_21"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "document_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_21"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "document_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_21"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "document_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_21"
        }
      ],
      "transition_model": "(define (problem organizing_file_cabinet)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 chair_n_01_1 - chair_n_01 document_n_01_1 document_n_01_2 document_n_01_3 document_n_01_4 - document_n_01 floor_n_01_1 - floor_n_01 folder_n_02_1 folder_n_02_2 - folder_n_02 marker_n_03_1 - marker_n_03 table_n_02_1 - table_n_02)\n    (:init (inside document_n_01_2 cabinet_n_01_1) (inside document_n_01_4 cabinet_n_01_1) (onfloor folder_n_02_2 floor_n_01_1) (ontop document_n_01_1 table_n_02_1) (ontop document_n_01_3 table_n_02_1) (ontop folder_n_02_1 table_n_02_1) (ontop marker_n_03_1 chair_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj chair_n_01_1 chair_n_01_1) (same_obj document_n_01_1 document_n_01_1) (same_obj document_n_01_2 document_n_01_2) (same_obj document_n_01_3 document_n_01_3) (same_obj document_n_01_4 document_n_01_4) (same_obj floor_n_01_1 floor_n_01_1) (same_obj folder_n_02_1 folder_n_02_1) (same_obj folder_n_02_2 folder_n_02_2) (same_obj marker_n_03_1 marker_n_03_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (ontop marker_n_03_1 table_n_02_1) (inside document_n_01_1 cabinet_n_01_1) (inside folder_n_02_2 cabinet_n_01_1) (inside document_n_01_4 cabinet_n_01_1)))\n)",
      "demo": null
    },
    "laying_tile_floors_0_Beechwood_0_int_0_2021-10-26_17-26-23": {
      "task_name": "laying_tile_floors",
      "natural_description": "Lay all the tiles on the floor.",
      "raw_bddl_goal": "(define (problem laying_tile_floors_0)\n    (:domain igibson)\n\n    (:objects\n        tile.n.01_1 tile.n.01_2 tile.n.01_3 tile.n.01_4 - tile.n.01\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor tile.n.01_1 floor.n.01_1) \n        (onfloor tile.n.01_2 floor.n.01_1) \n        (onfloor tile.n.01_3 floor.n.01_1) \n        (onfloor tile.n.01_4 floor.n.01_1) \n        (inroom floor.n.01_1 corridor) \n        (inroom floor.n.01_2 bathroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?tile.n.01 - tile.n.01) \n                (onfloor ?tile.n.01 ?floor.n.01_2)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not tile_n_01(x0) or onfloor(x0, room_floor_bathroom.0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "tile_3"
        },
        {
          "action": "LEFT_GRASP",
          "object": "tile_2"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_bathroom_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_bathroom_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "tile_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "tile_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_bathroom_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_bathroom_0"
        }
      ],
      "transition_model": "(define (problem laying_tile_floors)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 floor_n_01_2 - floor_n_01 tile_n_01_1 tile_n_01_2 tile_n_01_3 tile_n_01_4 - tile_n_01)\n    (:init (onfloor tile_n_01_1 floor_n_01_1) (onfloor tile_n_01_2 floor_n_01_1) (onfloor tile_n_01_3 floor_n_01_1) (onfloor tile_n_01_4 floor_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj tile_n_01_1 tile_n_01_1) (same_obj tile_n_01_2 tile_n_01_2) (same_obj tile_n_01_3 tile_n_01_3) (same_obj tile_n_01_4 tile_n_01_4))\n    (:goal (and (onfloor tile_n_01_3 floor_n_01_2) (onfloor tile_n_01_4 floor_n_01_2) (onfloor tile_n_01_2 floor_n_01_2) (onfloor tile_n_01_1 floor_n_01_2)))\n)",
      "demo": null
    },
    "throwing_away_leftovers_0_Ihlen_1_int_0_2021-06-04_19-52-40": {
      "task_name": "throwing_away_leftovers",
      "natural_description": "Throw away all leftover hamburgers into the trash.",
      "raw_bddl_goal": "(define (problem throwing_away_leftovers_0)\n    (:domain igibson)\n\n    (:objects\n     \tplate.n.04_1 plate.n.04_2 plate.n.04_3 plate.n.04_4 - plate.n.04\n        hamburger.n.01_1 hamburger.n.01_2 hamburger.n.01_3 - hamburger.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tashcan.n.01_1 - ashcan.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop plate.n.04_1 countertop.n.01_1) \n        (ontop hamburger.n.01_1 plate.n.04_1) \n        (ontop plate.n.04_2 countertop.n.01_1) \n        (ontop hamburger.n.01_3 plate.n.04_2) \n        (ontop plate.n.04_3 countertop.n.01_1) \n        (ontop hamburger.n.01_2 plate.n.04_3) \n        (ontop plate.n.04_4 countertop.n.01_1) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor ashcan.n.01_1 floor.n.01_1) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?hamburger.n.01 - hamburger.n.01) \n                (inside ?hamburger.n.01 ?ashcan.n.01_1)\n            )\n        )\n    )\n)\n",
      "tl_goal": "forall x0. (not hamburger_n_01(x0) or inside(x0, trash_can.119))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "hamburger_116"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hamburger_117"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "trash_can_119"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "trash_can_119"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hamburger_118"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "trash_can_119"
        }
      ],
      "transition_model": "(define (problem throwing_away_leftovers)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent ashcan_n_01_1 - ashcan_n_01 floor_n_01_1 - floor_n_01 hamburger_n_01_1 hamburger_n_01_2 hamburger_n_01_3 - hamburger_n_01 plate_n_04_1 plate_n_04_2 plate_n_04_3 - plate_n_04)\n    (:init (onfloor ashcan_n_01_1 floor_n_01_1) (ontop hamburger_n_01_1 plate_n_04_1) (ontop hamburger_n_01_2 plate_n_04_3) (ontop hamburger_n_01_3 plate_n_04_2) (same_obj ashcan_n_01_1 ashcan_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj hamburger_n_01_1 hamburger_n_01_1) (same_obj hamburger_n_01_2 hamburger_n_01_2) (same_obj hamburger_n_01_3 hamburger_n_01_3) (same_obj plate_n_04_1 plate_n_04_1) (same_obj plate_n_04_2 plate_n_04_2) (same_obj plate_n_04_3 plate_n_04_3))\n    (:goal (and (inside hamburger_n_01_2 ashcan_n_01_1) (inside hamburger_n_01_1 ashcan_n_01_1) (inside hamburger_n_01_3 ashcan_n_01_1)))\n)",
      "demo": null
    },
    "storing_food_0_Rs_int_0_2021-10-25_21-27-36": {
      "task_name": "storing_food",
      "natural_description": "Store food into the cabinet.",
      "raw_bddl_goal": "(define (problem storing_food_0)\n    (:domain igibson)\n\n    (:objects\n     \toatmeal.n.01_1 oatmeal.n.01_2 - oatmeal.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \tchip.n.04_1 chip.n.04_2 - chip.n.04\n    \tvegetable_oil.n.01_1 vegetable_oil.n.01_2 - vegetable_oil.n.01\n    \tsugar.n.01_1 sugar.n.01_2 - sugar.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop oatmeal.n.01_1 countertop.n.01_1) \n        (ontop oatmeal.n.01_2 countertop.n.01_1) \n        (ontop chip.n.04_1 countertop.n.01_1) \n        (ontop chip.n.04_2 countertop.n.01_1) \n        (ontop vegetable_oil.n.01_1 countertop.n.01_1) \n        (ontop vegetable_oil.n.01_2 countertop.n.01_1) \n        (ontop sugar.n.01_1 countertop.n.01_1) \n        (ontop sugar.n.01_2 countertop.n.01_1) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (inside ?oatmeal.n.01_1 ?cabinet.n.01_1) \n            (inside ?oatmeal.n.01_2 ?cabinet.n.01_1) \n            (inside ?chip.n.04_1 ?cabinet.n.01_1) \n            (inside ?chip.n.04_2 ?cabinet.n.01_1) \n            (inside ?vegetable_oil.n.01_1 ?cabinet.n.01_1) \n            (inside ?vegetable_oil.n.01_2 ?cabinet.n.01_1) \n            (inside ?sugar.n.01_1 ?cabinet.n.01_1) \n            (inside ?sugar.n.01_2 ?cabinet.n.01_1)\n        )\n    )\n)",
      "tl_goal": "inside(oatmeal.0, bottom_cabinet.41) and inside(oatmeal.1, bottom_cabinet.41) and inside(chip.0, bottom_cabinet.41) and inside(chip.1, bottom_cabinet.41) and inside(olive_oil.0, bottom_cabinet.41) and inside(olive_oil.1, bottom_cabinet.41) and inside(sugar_jar.0, bottom_cabinet.41) and inside(sugar_jar.1, bottom_cabinet.41)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "chip_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "chip_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "sugar_jar_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sugar_jar_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "oatmeal_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "oatmeal_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "olive_oil_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "olive_oil_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_41"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_41"
        }
      ],
      "transition_model": "(define (problem storing_food)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 chip_n_04_2 - chip_n_04 countertop_n_01_1 - countertop_n_01 sugar_n_01_1 sugar_n_01_2 - sugar_n_01 vegetable_oil_n_01_2 - vegetable_oil_n_01)\n    (:init (ontop chip_n_04_2 countertop_n_01_1) (ontop sugar_n_01_1 countertop_n_01_1) (ontop sugar_n_01_2 countertop_n_01_1) (ontop vegetable_oil_n_01_2 countertop_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj chip_n_04_2 chip_n_04_2) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj sugar_n_01_1 sugar_n_01_1) (same_obj sugar_n_01_2 sugar_n_01_2) (same_obj vegetable_oil_n_01_2 vegetable_oil_n_01_2))\n    (:goal (and (inside vegetable_oil_n_01_2 cabinet_n_01_1) (inside sugar_n_01_1 cabinet_n_01_1) (inside chip_n_04_2 cabinet_n_01_1) (inside sugar_n_01_2 cabinet_n_01_1)))\n)",
      "demo": null
    },
    "sorting_groceries_0_Wainscott_0_int_0_2021-10-26_13-36-01": {
      "task_name": "sorting_groceries",
      "natural_description": "Sort the groceries into the fridge and the cabinet based on your common sense. Place groceries of the same type next to each other.",
      "raw_bddl_goal": "(define (problem sorting_groceries_0)\n    (:domain igibson)\n\n    (:objects\n     \tbread.n.01_1 - bread.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \tflour.n.01_1 - flour.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tmilk.n.01_1 - milk.n.01\n    \tchair.n.01_1 - chair.n.01\n    \tmeat.n.01_1 - meat.n.01\n    \ttable.n.02_1 - table.n.02\n    \tcheese.n.01_1 - cheese.n.01\n    \tyogurt.n.01_1 - yogurt.n.01\n    \tsoup.n.01_1 - soup.n.01\n    \tcarrot.n.03_1 carrot.n.03_2 carrot.n.03_3 - carrot.n.03\n    \tbroccoli.n.02_1 - broccoli.n.02\n    \tapple.n.01_1 apple.n.01_2 - apple.n.01\n    \torange.n.01_1 orange.n.01_2 orange.n.01_3 - orange.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop bread.n.01_1 countertop.n.01_1) \n        (onfloor flour.n.01_1 floor.n.01_1) \n        (ontop milk.n.01_1 chair.n.01_1) \n        (ontop meat.n.01_1 table.n.02_1) \n        (ontop cheese.n.01_1 table.n.02_1) \n        (ontop yogurt.n.01_1 table.n.02_1) \n        (ontop soup.n.01_1 table.n.02_1) \n        (ontop carrot.n.03_1 countertop.n.01_1) \n        (ontop carrot.n.03_2 countertop.n.01_1) \n        (ontop carrot.n.03_3 countertop.n.01_1) \n        (ontop broccoli.n.02_1 countertop.n.01_1) \n        (ontop apple.n.01_1 countertop.n.01_1) \n        (ontop apple.n.01_2 countertop.n.01_1) \n        (ontop orange.n.01_1 table.n.02_1) \n        (ontop orange.n.01_2 table.n.02_1) \n        (ontop orange.n.01_3 table.n.02_1) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom table.n.02_1 kitchen) \n        (inroom chair.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (inside ?bread.n.01_1 ?cabinet.n.01_1) \n            (inside ?flour.n.01_1 ?cabinet.n.01_1) \n            (and \n                (inside ?milk.n.01_1 ?electric_refrigerator.n.01_1) \n                (inside ?meat.n.01_1 ?electric_refrigerator.n.01_1) \n                (inside ?cheese.n.01_1 ?electric_refrigerator.n.01_1) \n                (inside ?yogurt.n.01_1 ?electric_refrigerator.n.01_1) \n                (inside ?soup.n.01_1 ?electric_refrigerator.n.01_1)\n            ) \n            (forall \n                (?carrot.n.03 - carrot.n.03) \n                (and \n                    (inside ?carrot.n.03 ?electric_refrigerator.n.01_1) \n                    (or \n                        (nextto ?carrot.n.03 ?carrot.n.03_1) \n                        (nextto ?carrot.n.03 ?carrot.n.03_2) \n                        (nextto ?carrot.n.03 ?carrot.n.03_3)\n                    )\n                )\n            ) \n            (inside ?broccoli.n.02_1 ?electric_refrigerator.n.01_1) \n            (forall \n                (?apple.n.01 - apple.n.01) \n                (and \n                    (inside ?apple.n.01 ?electric_refrigerator.n.01_1) \n                    (or \n                        (nextto ?apple.n.01 ?apple.n.01_1) \n                        (nextto ?apple.n.01 ?apple.n.01_2)\n                    )\n                )\n            ) \n            (forall \n                (?orange.n.01 - orange.n.01) \n                (and \n                    (ontop ?orange.n.01 ?table.n.02_1) \n                    (or \n                        (nextto ?orange.n.01 ?orange.n.01_1) \n                        (nextto ?orange.n.01 ?orange.n.01_2) \n                        (nextto ?orange.n.01 ?orange.n.01_3)\n                    )\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "inside(pretzel.0, bottom_cabinet_no_top.80) and inside(flour.0, bottom_cabinet_no_top.80) and inside(milk.0, fridge.97) and inside(prosciutto.0, fridge.97) and inside(cheese.0, fridge.97) and inside(yogurt.0, fridge.97) and inside(soup.0, fridge.97) and forall x0. (not carrot_n_03(x0) or (inside(x0, fridge.97) and (nextto(x0, carrot.0) or nextto(x0, carrot.1) or nextto(x0, carrot.2)))) and inside(broccoli.0, fridge.97) and forall x0. (not apple_n_01(x0) or (inside(x0, fridge.97) and (nextto(x0, apple.0) or nextto(x0, apple.1)))) and forall x0. (not orange_n_01(x0) or (ontop(x0, breakfast_table.44) and (nextto(x0, orange.0) or nextto(x0, orange.1) or nextto(x0, orange.2))))",
      "action_trajectory": [
        {
          "action": "LEFT_GRASP",
          "object": "orange_2"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "orange_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "orange_1"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "orange_2"
        },
        {
          "action": "OPEN",
          "object": "fridge_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "prosciutto_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cheese_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "milk_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "yogurt_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "carrot_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "carrot_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "carrot_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "soup_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "apple_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "apple_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "apple_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "broccoli_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pretzel_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "flour_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "prosciutto_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_97"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "CLOSE",
          "object": "fridge_97"
        }
      ],
      "transition_model": "(define (problem sorting_groceries)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent apple_n_01_2 - apple_n_01 cheese_n_01_1 - cheese_n_01 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 meat_n_01_1 - meat_n_01 orange_n_01_1 orange_n_01_3 - orange_n_01 table_n_02_1 - table_n_02)\n    (:init (ontop apple_n_01_2 countertop_n_01_1) (ontop cheese_n_01_1 table_n_02_1) (ontop meat_n_01_1 table_n_02_1) (ontop orange_n_01_1 table_n_02_1) (ontop orange_n_01_3 table_n_02_1) (same_obj apple_n_01_2 apple_n_01_2) (same_obj cheese_n_01_1 cheese_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj meat_n_01_1 meat_n_01_1) (same_obj orange_n_01_1 orange_n_01_1) (same_obj orange_n_01_3 orange_n_01_3) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (nextto apple_n_01_2 apple_n_01_2) (inside cheese_n_01_1 electric_refrigerator_n_01_1) (inside meat_n_01_1 electric_refrigerator_n_01_1) (nextto orange_n_01_1 orange_n_01_3)))\n)",
      "demo": null
    },
    "cleaning_microwave_oven_0_Benevolence_1_int_0_2021-09-11_01-27-10": {
      "task_name": "cleaning_microwave_oven",
      "natural_description": "Clean the microwave oven.",
      "raw_bddl_goal": "(define (problem cleaning_microwave_oven_0)\n    (:domain igibson)\n\n    (:objects\n     \tmicrowave.n.02_1 - microwave.n.02\n    \trag.n.01_1 - rag.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \tashcan.n.01_1 - ashcan.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty microwave.n.02_1) \n        (stained microwave.n.02_1) \n        (ontop rag.n.01_1 countertop.n.01_1) \n        (onfloor ashcan.n.01_1 floor.n.01_1) \n        (inroom microwave.n.02_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?microwave.n.02_1)\n            ) \n            (not \n                (stained ?microwave.n.02_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not dusty(microwave.36) and not stained(microwave.36)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "microwave_36"
        },
        {
          "action": "LEFT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_19"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_19"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_19"
        },
        {
          "action": "LEFT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "CLEAN",
          "object": "microwave_36"
        }
      ],
      "transition_model": "(define (problem cleaning_microwave_oven)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent countertop_n_01_1 - countertop_n_01 microwave_n_02_1 - microwave_n_02 rag_n_01_1 - rag_n_01 sink_n_01_1 - sink_n_01)\n    (:init (dusty microwave_n_02_1) (ontop rag_n_01_1 countertop_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj microwave_n_02_1 microwave_n_02_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (stained microwave_n_02_1))\n    (:goal (and (not (dusty microwave_n_02_1)) (not (stained microwave_n_02_1))))\n)",
      "demo": null
    },
    "chopping_vegetables_0_Rs_int_0_2021-05-25_22-01-16": {
      "task_name": "chopping_vegetables",
      "natural_description": "Slice all the vegetables, and put all sliced vegetable into dishes.",
      "raw_bddl_goal": "(define (problem chopping_vegetables_0)\n    (:domain igibson)\n\n    (:objects\n        tomato.n.01_1 tomato.n.01_2 - tomato.n.01\n        mushroom.n.05_1 mushroom.n.05_2 - mushroom.n.05\n        chestnut.n.03_1 chestnut.n.03_2 - chestnut.n.03\n        countertop.n.01_1 - countertop.n.01\n        vidalia_onion.n.01_1 vidalia_onion.n.01_2 - vidalia_onion.n.01\n        electric_refrigerator.n.01_1 - electric_refrigerator.n.01\n        knife.n.01_1 - knife.n.01\n        dish.n.01_1 dish.n.01_2 - dish.n.01\n        cabinet.n.01_1 - cabinet.n.01\n        sink.n.01_1 - sink.n.01\n        floor.n.01_1 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop tomato.n.01_1 countertop.n.01_1) \n        (ontop tomato.n.01_2 countertop.n.01_1) \n        (ontop mushroom.n.05_1 countertop.n.01_1) \n        (ontop mushroom.n.05_2 countertop.n.01_1) \n        (ontop chestnut.n.03_1 countertop.n.01_1) \n        (ontop chestnut.n.03_2 countertop.n.01_1) \n        (inside vidalia_onion.n.01_1 electric_refrigerator.n.01_1) \n        (inside vidalia_onion.n.01_2 electric_refrigerator.n.01_1) \n        (ontop knife.n.01_1 countertop.n.01_1) \n        (inside dish.n.01_1 cabinet.n.01_1) \n        (inside dish.n.01_2 cabinet.n.01_1) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?tomato.n.01 - tomato.n.01) \n                (and \n                    (exists \n                        (?dish.n.01 - dish.n.01) \n                        (inside ?tomato.n.01 ?dish.n.01)\n                    ) \n                    (sliced ?tomato.n.01)\n                )\n            ) \n            (forall \n                (?mushroom.n.05 - mushroom.n.05) \n                (and \n                    (exists \n                        (?dish.n.01 - dish.n.01) \n                        (inside ?mushroom.n.05 ?dish.n.01)\n                    ) \n                    (sliced ?mushroom.n.05)\n                )\n            ) \n            (forall \n                (?chestnut.n.03 - chestnut.n.03) \n                (and \n                    (exists \n                        (?dish.n.01 - dish.n.01) \n                        (inside ?chestnut.n.03 ?dish.n.01)\n                    ) \n                    (sliced ?chestnut.n.03)\n                )\n            ) \n            (forall \n                (?vidalia_onion.n.01 - vidalia_onion.n.01) \n                (and \n                    (exists \n                        (?dish.n.01 - dish.n.01) \n                        (inside ?vidalia_onion.n.01 ?dish.n.01)\n                    ) \n                    (sliced ?vidalia_onion.n.01)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not tomato_n_01(x0) or ((exists x1. (not dish_n_01(x1) or inside(x0, x1))) and sliced(x0))) and forall x0. (not mushroom_n_05(x0) or ((exists x1. (not dish_n_01(x1) or inside(x0, x1))) and sliced(x0))) and forall x0. (not chestnut_n_03(x0) or ((exists x1. (not dish_n_01(x1) or inside(x0, x1))) and sliced(x0))) and forall x0. (not vidalia_onion_n_01(x0) or ((exists x1. (not dish_n_01(x1) or inside(x0, x1))) and sliced(x0)))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "top_cabinet_50"
        },
        {
          "action": "LEFT_GRASP",
          "object": "casserole_71"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "countertop_26"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "chestnut_66"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "chestnut_65"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "mushroom_63"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "mushroom_64"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "tomato_62"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "tomato_61"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "OPEN",
          "object": "fridge_40"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "vidalia_onion_67"
        },
        {
          "action": "LEFT_GRASP",
          "object": "vidalia_onion_68"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "countertop_26"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "countertop_26"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "carving_knife_69"
        },
        {
          "action": "SLICE",
          "object": "chestnut_66"
        },
        {
          "action": "SLICE",
          "object": "chestnut_65"
        },
        {
          "action": "SLICE",
          "object": "mushroom_63"
        },
        {
          "action": "SLICE",
          "object": "mushroom_64"
        },
        {
          "action": "SLICE",
          "object": "tomato_62"
        },
        {
          "action": "SLICE",
          "object": "tomato_61"
        },
        {
          "action": "SLICE",
          "object": "vidalia_onion_67"
        },
        {
          "action": "SLICE",
          "object": "vidalia_onion_68"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "countertop_26"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "vidalia_onion_67_part_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "vidalia_onion_67_part_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "vidalia_onion_68_part_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "vidalia_onion_68_part_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "casserole_71"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "casserole_71"
        }
      ],
      "transition_model": "(define (problem chopping_vegetables)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 chestnut_n_03_1 chestnut_n_03_2 - chestnut_n_03 countertop_n_01_1 - countertop_n_01 dish_n_01_2 - dish_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 knife_n_01_1 - knife_n_01 mushroom_n_05_1 mushroom_n_05_2 - mushroom_n_05 tomato_n_01_1 tomato_n_01_2 - tomato_n_01 vidalia_onion_n_01_2 - vidalia_onion_n_01)\n    (:init (inside dish_n_01_2 cabinet_n_01_1) (inside vidalia_onion_n_01_2 electric_refrigerator_n_01_1) (ontop chestnut_n_03_1 countertop_n_01_1) (ontop chestnut_n_03_2 countertop_n_01_1) (ontop knife_n_01_1 countertop_n_01_1) (ontop mushroom_n_05_1 countertop_n_01_1) (ontop mushroom_n_05_2 countertop_n_01_1) (ontop tomato_n_01_1 countertop_n_01_1) (ontop tomato_n_01_2 countertop_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj chestnut_n_03_1 chestnut_n_03_1) (same_obj chestnut_n_03_2 chestnut_n_03_2) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj dish_n_01_2 dish_n_01_2) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj knife_n_01_1 knife_n_01_1) (same_obj mushroom_n_05_1 mushroom_n_05_1) (same_obj mushroom_n_05_2 mushroom_n_05_2) (same_obj tomato_n_01_1 tomato_n_01_1) (same_obj tomato_n_01_2 tomato_n_01_2) (same_obj vidalia_onion_n_01_2 vidalia_onion_n_01_2))\n    (:goal (and (sliced vidalia_onion_n_01_2) (inside chestnut_n_03_1 dish_n_01_2) (sliced tomato_n_01_1) (sliced mushroom_n_05_1)))\n)",
      "demo": null
    },
    "cleaning_closet_0_Beechwood_1_int_0_2021-10-25_19-50-32": {
      "task_name": "cleaning_closet",
      "natural_description": "Organize all jewelry inside cabinet3, make sure umbrella1 is not inside cabinet3, place hat1 inside the cabinet or on top of shelf1, place all sandals next to shelf1 and on the floor, clean dust from cabinet3, shelf1, and floor1.",
      "raw_bddl_goal": "(define (problem cleaning_closet_0)\n    (:domain igibson)\n\n    (:objects\n     \tshelf.n.01_1 - shelf.n.01\n    \tcabinet.n.01_1 cabinet.n.01_2 cabinet.n.01_3 - cabinet.n.01\n    \tjewelry.n.01_1 jewelry.n.01_2 - jewelry.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \that.n.01_1 - hat.n.01\n    \tsandal.n.01_1 sandal.n.01_2 - sandal.n.01\n    \tumbrella.n.01_1 - umbrella.n.01\n    \ttowel.n.01_1 - towel.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty shelf.n.01_1) \n        (dusty cabinet.n.01_3) \n        (onfloor jewelry.n.01_1 floor.n.01_1) \n        (onfloor jewelry.n.01_2 floor.n.01_1) \n        (dusty floor.n.01_1) \n        (onfloor hat.n.01_1 floor.n.01_1) \n        (onfloor sandal.n.01_1 floor.n.01_1) \n        (onfloor sandal.n.01_2 floor.n.01_1) \n        (onfloor umbrella.n.01_1 floor.n.01_1) \n        (inside towel.n.01_1 cabinet.n.01_1) \n        (inroom cabinet.n.01_1 bedroom) \n        (inroom cabinet.n.01_2 bedroom) \n        (inroom cabinet.n.01_3 closet) \n        (inroom shelf.n.01_1 closet) \n        (inroom floor.n.01_1 closet) \n        (inroom floor.n.01_2 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_2)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?jewelry.n.01 - jewelry.n.01) \n                (inside ?jewelry.n.01 ?cabinet.n.01_3)\n            ) \n            (not \n                (inside ?umbrella.n.01_1 ?cabinet.n.01_3)\n            ) \n            (or \n                (inside ?hat.n.01_1 ?cabinet.n.01_1) \n                (ontop ?hat.n.01_1 ?shelf.n.01_1)\n            ) \n            (forall \n                (?sandal.n.01 - sandal.n.01) \n                (and \n                    (nextto ?sandal.n.01 ?shelf.n.01_1) \n                    (onfloor ?sandal.n.01 ?floor.n.01_1)\n                )\n            ) \n            (not \n                (dusty ?cabinet.n.01_3)\n            ) \n            (not \n                (dusty ?shelf.n.01_1)\n            ) \n            (not \n                (dusty ?floor.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not jewelry_n_01(x0) or inside(x0, bottom_cabinet.30)) and not inside(umbrella.0, bottom_cabinet.30) and inside(hat.0, bottom_cabinet.44) or ontop(hat.0, shelf.31) and forall x0. (not sandal_n_01(x0) or (nextto(x0, shelf.31) and onfloor(x0, room_floor_closet.0))) and not dusty(bottom_cabinet.30) and not dusty(shelf.31) and not dusty(room_floor_closet.0)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_44"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_30"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "paper_towel_0"
        },
        {
          "action": "SOAK",
          "object": "paper_towel_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_closet_0"
        },
        {
          "action": "CLEAN",
          "object": "shelf_31"
        },
        {
          "action": "CLEAN",
          "object": "bottom_cabinet_44"
        },
        {
          "action": "CLEAN",
          "object": "bottom_cabinet_30"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_closet_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hat_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "necklace_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "shelf_31"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_30"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bracelet_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_30"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sandal_0"
        },
        {
          "action": "LEFT_PLACE_NEXTTO_ONTOP",
          "object": "shelf_31,room_floor_closet_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sandal_1"
        },
        {
          "action": "LEFT_PLACE_NEXTTO_ONTOP",
          "object": "shelf_31,room_floor_closet_0"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_44"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_30"
        }
      ],
      "transition_model": "(define (problem cleaning_closet)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 cabinet_n_01_3 - cabinet_n_01 floor_n_01_1 - floor_n_01 hat_n_01_1 - hat_n_01 jewelry_n_01_1 jewelry_n_01_2 - jewelry_n_01 sandal_n_01_1 sandal_n_01_2 - sandal_n_01 towel_n_01_1 - towel_n_01 umbrella_n_01_1 - umbrella_n_01)\n    (:init (dusty cabinet_n_01_3) (dusty floor_n_01_1) (inside towel_n_01_1 cabinet_n_01_1) (onfloor hat_n_01_1 floor_n_01_1) (onfloor jewelry_n_01_1 floor_n_01_1) (onfloor jewelry_n_01_2 floor_n_01_1) (onfloor sandal_n_01_1 floor_n_01_1) (onfloor sandal_n_01_2 floor_n_01_1) (onfloor umbrella_n_01_1 floor_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj cabinet_n_01_3 cabinet_n_01_3) (same_obj floor_n_01_1 floor_n_01_1) (same_obj hat_n_01_1 hat_n_01_1) (same_obj jewelry_n_01_1 jewelry_n_01_1) (same_obj jewelry_n_01_2 jewelry_n_01_2) (same_obj sandal_n_01_1 sandal_n_01_1) (same_obj sandal_n_01_2 sandal_n_01_2) (same_obj towel_n_01_1 towel_n_01_1) (same_obj umbrella_n_01_1 umbrella_n_01_1))\n    (:goal (and (not (dusty cabinet_n_01_3)) (onfloor sandal_n_01_2 floor_n_01_1) (inside jewelry_n_01_2 cabinet_n_01_3) (not (dusty floor_n_01_1))))\n)",
      "demo": null
    },
    "cleaning_up_the_kitchen_only_0_Pomaria_1_int_0_2021-10-26_00-50-16": {
      "task_name": "cleaning_up_the_kitchen_only",
      "natural_description": "Use the soap and rags to clean the plates, cabinets and floor, then leave the soap and rags near the sink. Place the blender on the countertop, store vegetable oil in one cabinet and plates in another cabinet, and put the fuits and vegetables in the fridge.",
      "raw_bddl_goal": "(define (problem cleaning_up_the_kitchen_only_0)\n    (:domain igibson)\n\n    (:objects\n        bin.n.01_1 - bin.n.01\n        floor.n.01_1 - floor.n.01\n        soap.n.01_1 - soap.n.01\n        cabinet.n.01_1 cabinet.n.01_2 - cabinet.n.01\n        electric_refrigerator.n.01_1 - electric_refrigerator.n.01\n        rag.n.01_1 - rag.n.01\n        dustpan.n.02_1 - dustpan.n.02\n        broom.n.01_1 - broom.n.01\n        blender.n.01_1 - blender.n.01\n        sink.n.01_1 - sink.n.01\n        casserole.n.02_1 - casserole.n.02\n        plate.n.04_1 - plate.n.04\n        vegetable_oil.n.01_1 - vegetable_oil.n.01\n        apple.n.01_1 - apple.n.01\n        window.n.01_1 - window.n.01\n        countertop.n.01_1 - countertop.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor bin.n.01_1 floor.n.01_1) \n        (inside soap.n.01_1 cabinet.n.01_1) \n        (inside rag.n.01_1 cabinet.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (inside dustpan.n.02_1 cabinet.n.01_1) \n        (dusty dustpan.n.02_1) \n        (onfloor broom.n.01_1 floor.n.01_1) \n        (dusty broom.n.01_1) \n        (onfloor blender.n.01_1 floor.n.01_1) \n        (stained blender.n.01_1) \n        (inside casserole.n.02_1 electric_refrigerator.n.01_1) \n        (inside plate.n.04_1 electric_refrigerator.n.01_1) \n        (stained plate.n.04_1) \n        (inside vegetable_oil.n.01_1 electric_refrigerator.n.01_1) \n        (inside apple.n.01_1 electric_refrigerator.n.01_1) \n        (dusty floor.n.01_1) \n        (dusty cabinet.n.01_1) \n        (dusty cabinet.n.01_2) \n        (inroom floor.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom cabinet.n.01_2 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom window.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (ontop ?blender.n.01_1 ?countertop.n.01_1) \n            (nextto ?soap.n.01_1 ?sink.n.01_1) \n            (exists \n                (?cabinet.n.01 - cabinet.n.01) \n                (and \n                    (inside ?vegetable_oil.n.01_1 ?cabinet.n.01) \n                    (not \n                        (inside ?plate.n.04_1 ?cabinet.n.01)\n                    )\n                )\n            ) \n            (exists \n                (?cabinet.n.01 - cabinet.n.01) \n                (and \n                    (inside ?plate.n.04_1 ?cabinet.n.01) \n                    (not \n                        (inside ?vegetable_oil.n.01_1 ?cabinet.n.01)\n                    )\n                )\n            ) \n            (and \n                (not \n                    (dusty ?cabinet.n.01_1)\n                ) \n                (not \n                    (dusty ?cabinet.n.01_2)\n                ) \n                (not \n                    (dusty ?floor.n.01_1)\n                )\n            ) \n            (not \n                (stained ?plate.n.04_1)\n            ) \n            (or \n                (nextto ?rag.n.01_1 ?sink.n.01_1) \n                (inside ?rag.n.01_1 ?sink.n.01_1)\n            ) \n            (and \n                (inside ?casserole.n.02_1 ?electric_refrigerator.n.01_1) \n                (inside ?apple.n.01_1 ?electric_refrigerator.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "ontop(blender.83, countertop.31) and nextto(soap.79, sink.37) and exists x0. (not cabinet_n_01(x0) or (inside(olive_oil.86, x0) and (not inside(plate.85, x0)))) and exists x0. (not cabinet_n_01(x0) or (inside(plate.85, x0) and (not inside(olive_oil.86, x0)))) and (not dusty(top_cabinet.27)) and (not dusty(top_cabinet.24)) and (not dusty(room_floor_kitchen.0)) and not stained(plate.85) and nextto(rag.80, sink.37) or inside(rag.80, sink.37) and inside(casserole.84, fridge.20) and inside(apple.87, fridge.20)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "broom_82"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_kitchen_0"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "broom_82"
        },
        {
          "action": "LEFT_GRASP",
          "object": "blender_83"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "countertop_31"
        },
        {
          "action": "OPEN",
          "object": "top_cabinet_27"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_80"
        },
        {
          "action": "LEFT_GRASP",
          "object": "soap_79"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_37"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_37"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_37"
        },
        {
          "action": "SOAK",
          "object": "rag_80"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_37"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_80"
        },
        {
          "action": "CLEAN",
          "object": "top_cabinet_27"
        },
        {
          "action": "CLEAN",
          "object": "top_cabinet_24"
        },
        {
          "action": "OPEN",
          "object": "fridge_20"
        },
        {
          "action": "CLEAN",
          "object": "plate_85"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_37"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_85"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "top_cabinet_27"
        },
        {
          "action": "CLOSE",
          "object": "top_cabinet_27"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "olive_oil_86"
        },
        {
          "action": "OPEN",
          "object": "top_cabinet_24"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_24"
        },
        {
          "action": "CLOSE",
          "object": "top_cabinet_24"
        },
        {
          "action": "CLOSE",
          "object": "fridge_20"
        }
      ],
      "transition_model": "(define (problem cleaning_up_the_kitchen_only)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent apple_n_01_1 - apple_n_01 blender_n_01_1 - blender_n_01 cabinet_n_01_1 - cabinet_n_01 casserole_n_02_1 - casserole_n_02 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 floor_n_01_1 - floor_n_01 plate_n_04_1 - plate_n_04 rag_n_01_1 - rag_n_01 sink_n_01_1 - sink_n_01 vegetable_oil_n_01_1 - vegetable_oil_n_01)\n    (:init (inside apple_n_01_1 electric_refrigerator_n_01_1) (inside casserole_n_02_1 electric_refrigerator_n_01_1) (inside plate_n_04_1 electric_refrigerator_n_01_1) (inside rag_n_01_1 cabinet_n_01_1) (inside vegetable_oil_n_01_1 electric_refrigerator_n_01_1) (not (soaked rag_n_01_1)) (onfloor blender_n_01_1 floor_n_01_1) (same_obj apple_n_01_1 apple_n_01_1) (same_obj blender_n_01_1 blender_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj casserole_n_02_1 casserole_n_02_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj plate_n_04_1 plate_n_04_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj vegetable_oil_n_01_1 vegetable_oil_n_01_1) (stained blender_n_01_1))\n    (:goal (and (inside casserole_n_02_1 electric_refrigerator_n_01_1) (ontop blender_n_01_1 countertop_n_01_1) (inside rag_n_01_1 sink_n_01_1) (inside apple_n_01_1 electric_refrigerator_n_01_1)))\n)",
      "demo": null
    },
    "waxing_cars_or_other_vehicles_0_Ihlen_0_int_0_2021-10-25_23-03-46": {
      "task_name": "waxing_cars_or_other_vehicles",
      "natural_description": "Wax the dust off the vehicle.",
      "raw_bddl_goal": "(define (problem waxing_cars_or_other_vehicles_0)\n    (:domain igibson)\n\n    (:objects\n     \tvehicle.n.01_1 - vehicle.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tvessel.n.03_1 - vessel.n.03\n    \tshelf.n.01_1 - shelf.n.01\n\trag.n.01_1 - rag.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor vehicle.n.01_1 floor.n.01_1) \n        (dusty vehicle.n.01_1) \n        (ontop vessel.n.03_1 shelf.n.01_1) \n\t(inside rag.n.01_1 shelf.n.01_1)\n        (inroom floor.n.01_1 garage) \n        (inroom shelf.n.01_1 garage) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?vehicle.n.01_1)\n            ) \n        )\n    )\n)\n",
      "tl_goal": "not dusty(car.50)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_52"
        },
        {
          "action": "CLEAN",
          "object": "car_50"
        }
      ],
      "transition_model": "(define (problem waxing_cars_or_other_vehicles)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 - floor_n_01 rag_n_01_1 - rag_n_01 shelf_n_01_1 - shelf_n_01 vehicle_n_01_1 - vehicle_n_01)\n    (:init (dusty vehicle_n_01_1) (inside rag_n_01_1 shelf_n_01_1) (onfloor vehicle_n_01_1 floor_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj shelf_n_01_1 shelf_n_01_1) (same_obj vehicle_n_01_1 vehicle_n_01_1))\n    (:goal (not (dusty vehicle_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_out_drawers_0_Benevolence_1_int_0_2021-10-20_05-03-27": {
      "task_name": "cleaning_out_drawers",
      "natural_description": "Remove the piece of cloth, two bowls, and two spoons from the drawers and put them near the sink.",
      "raw_bddl_goal": "(define (problem cleaning_out_drawers_0)\n    (:domain igibson)\n\n    (:objects\n     \tbowl.n.01_1 bowl.n.01_2 - bowl.n.01\n    \tcabinet.n.01_1 cabinet.n.01_2 - cabinet.n.01\n    \tspoon.n.01_1 spoon.n.01_2 - spoon.n.01\n    \tpiece_of_cloth.n.01_1 - piece_of_cloth.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (inside bowl.n.01_1 cabinet.n.01_1) \n        (inside bowl.n.01_2 cabinet.n.01_1) \n        (inside spoon.n.01_1 cabinet.n.01_2) \n        (inside spoon.n.01_2 cabinet.n.01_2) \n        (inside piece_of_cloth.n.01_1 cabinet.n.01_1) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom cabinet.n.01_2 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (nextto ?piece_of_cloth.n.01_1 ?sink.n.01_1) \n            (nextto ?bowl.n.01_1 ?sink.n.01_1) \n            (nextto ?bowl.n.01_2 ?sink.n.01_1) \n            (nextto ?spoon.n.01_1 ?sink.n.01_1) \n            (nextto ?spoon.n.01_2 ?sink.n.01_1)\n        )\n    )\n)",
      "tl_goal": "nextto(bath_towel.0, sink.19) and nextto(bowl.0, sink.19) and nextto(bowl.1, sink.19) and nextto(spoon.0, sink.19) and nextto(spoon.1, sink.19)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_16"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_15"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_1"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bath_towel_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_1"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "spoon_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "spoon_1"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_19"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_no_top_16"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_no_top_15"
        }
      ],
      "transition_model": "(define (problem cleaning_out_drawers)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bowl_n_01_1 bowl_n_01_2 - bowl_n_01 cabinet_n_01_1 cabinet_n_01_2 - cabinet_n_01 piece_of_cloth_n_01_1 - piece_of_cloth_n_01 sink_n_01_1 - sink_n_01 spoon_n_01_1 - spoon_n_01)\n    (:init (inside bowl_n_01_1 cabinet_n_01_1) (inside bowl_n_01_2 cabinet_n_01_1) (inside piece_of_cloth_n_01_1 cabinet_n_01_1) (inside spoon_n_01_1 cabinet_n_01_2) (same_obj bowl_n_01_1 bowl_n_01_1) (same_obj bowl_n_01_2 bowl_n_01_2) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj cabinet_n_01_2 cabinet_n_01_2) (same_obj piece_of_cloth_n_01_1 piece_of_cloth_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj spoon_n_01_1 spoon_n_01_1))\n    (:goal (and (nextto piece_of_cloth_n_01_1 sink_n_01_1) (nextto spoon_n_01_1 sink_n_01_1) (nextto bowl_n_01_2 sink_n_01_1) (nextto bowl_n_01_1 sink_n_01_1)))\n)",
      "demo": null
    },
    "putting_dishes_away_after_cleaning_0_Ihlen_1_int_0_2021-10-25_22-54-09": {
      "task_name": "putting_dishes_away_after_cleaning",
      "natural_description": "Put all plates inside the cabinet after cleaning.",
      "raw_bddl_goal": "(define (problem putting_dishes_away_after_cleaning_0)\n    (:domain igibson)\n\n    (:objects\n     \tplate.n.04_1 plate.n.04_2 plate.n.04_3 plate.n.04_4 plate.n.04_5 plate.n.04_6 plate.n.04_7 plate.n.04_8 - plate.n.04\n    \tcountertop.n.01_1 countertop.n.01_2 - countertop.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop plate.n.04_1 countertop.n.01_1) \n        (ontop plate.n.04_2 countertop.n.01_1) \n        (ontop plate.n.04_3 countertop.n.01_1) \n        (ontop plate.n.04_4 countertop.n.01_1) \n        (ontop plate.n.04_5 countertop.n.01_2) \n        (ontop plate.n.04_6 countertop.n.01_2) \n        (ontop plate.n.04_7 countertop.n.01_2) \n        (ontop plate.n.04_8 countertop.n.01_2) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom countertop.n.01_2 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (exists \n                (?cabinet.n.01 - cabinet.n.01) \n                (forall \n                    (?plate.n.04 - plate.n.04) \n                    (inside ?plate.n.04 ?cabinet.n.01_1)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "exists x0. (not cabinet_n_01(x0) or (forall x1. (not plate_n_04(x1) or inside(x1, top_cabinet.62))))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "top_cabinet_62"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_5"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_62"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "top_cabinet_62"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_62"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_62"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_3"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "top_cabinet_62"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_4"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_62"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_6"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "top_cabinet_62"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_7"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "top_cabinet_62"
        }
      ],
      "transition_model": "(define (problem putting_dishes_away_after_cleaning)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 countertop_n_01_1 countertop_n_01_2 - countertop_n_01 plate_n_04_1 plate_n_04_6 plate_n_04_7 plate_n_04_8 - plate_n_04)\n    (:init (ontop plate_n_04_1 countertop_n_01_1) (ontop plate_n_04_6 countertop_n_01_2) (ontop plate_n_04_7 countertop_n_01_2) (ontop plate_n_04_8 countertop_n_01_2) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj countertop_n_01_2 countertop_n_01_2) (same_obj plate_n_04_1 plate_n_04_1) (same_obj plate_n_04_6 plate_n_04_6) (same_obj plate_n_04_7 plate_n_04_7) (same_obj plate_n_04_8 plate_n_04_8))\n    (:goal (and (inside plate_n_04_7 cabinet_n_01_1) (inside plate_n_04_8 cabinet_n_01_1) (inside plate_n_04_6 cabinet_n_01_1) (inside plate_n_04_1 cabinet_n_01_1)))\n)",
      "demo": null
    },
    "packing_child_s_bag_0_Beechwood_1_int_0_2021-10-26_10-33-11": {
      "task_name": "packing_child_s_bag",
      "natural_description": "Place the sunglasses, notebook, bracelet, apple, and earphones inside the backpack next to the bed.",
      "raw_bddl_goal": "(define (problem packing_child_s_bag_0)\n    (:domain igibson)\n\n    (:objects\n     \tbackpack.n.01_1 - backpack.n.01\n        notebook.n.01_1 - notebook.n.01\n        bracelet.n.02_1 - bracelet.n.02\n        apple.n.01_1 - apple.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tbed.n.01_1 - bed.n.01\n        earphone.n.01_1 - earphone.n.01\n    \tsunglass.n.01_1 - sunglass.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor backpack.n.01_1 floor.n.01_1) \n        (ontop sunglass.n.01_1 bed.n.01_1) \n        (ontop bracelet.n.02_1 bed.n.01_1) \n        (onfloor notebook.n.01_1 floor.n.01_1) \n        (ontop apple.n.01_1 bed.n.01_1) \n        (ontop earphone.n.01_1 bed.n.01_1) \n        (inroom bed.n.01_1 bedroom) \n        (inroom floor.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (nextto ?backpack.n.01_1 ?bed.n.01_1) \n            (inside ?sunglass.n.01_1 ?backpack.n.01_1) \n            (inside ?notebook.n.01_1 ?backpack.n.01_1) \n            (inside ?bracelet.n.02_1 ?backpack.n.01_1) \n            (inside ?apple.n.01_1 ?backpack.n.01_1) \n            (inside ?earphone.n.01_1 ?backpack.n.01_1)\n        )\n    )\n)",
      "tl_goal": "nextto(backpack.100, bed.43) and inside(sunglass.105, backpack.100) and inside(notebook.101, backpack.100) and inside(bracelet.102, backpack.100) and inside(apple.103, backpack.100) and inside(headset.104, backpack.100)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "backpack_100"
        },
        {
          "action": "LEFT_GRASP",
          "object": "notebook_101"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_100"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sunglass_105"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_100"
        },
        {
          "action": "LEFT_GRASP",
          "object": "apple_103"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_100"
        },
        {
          "action": "LEFT_GRASP",
          "object": "headset_104"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_100"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bracelet_102"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_100"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "backpack_100"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_bedroom_0"
        }
      ],
      "transition_model": "(define (problem packing_child_s_bag)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent apple_n_01_1 - apple_n_01 backpack_n_01_1 - backpack_n_01 bed_n_01_1 - bed_n_01 bracelet_n_02_1 - bracelet_n_02 earphone_n_01_1 - earphone_n_01 floor_n_01_1 - floor_n_01 notebook_n_01_1 - notebook_n_01 sunglass_n_01_1 - sunglass_n_01)\n    (:init (onfloor backpack_n_01_1 floor_n_01_1) (onfloor notebook_n_01_1 floor_n_01_1) (ontop apple_n_01_1 bed_n_01_1) (ontop bracelet_n_02_1 bed_n_01_1) (ontop earphone_n_01_1 bed_n_01_1) (ontop sunglass_n_01_1 bed_n_01_1) (same_obj apple_n_01_1 apple_n_01_1) (same_obj backpack_n_01_1 backpack_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj bracelet_n_02_1 bracelet_n_02_1) (same_obj earphone_n_01_1 earphone_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj notebook_n_01_1 notebook_n_01_1) (same_obj sunglass_n_01_1 sunglass_n_01_1))\n    (:goal (and (nextto backpack_n_01_1 bed_n_01_1) (inside sunglass_n_01_1 backpack_n_01_1) (inside notebook_n_01_1 backpack_n_01_1) (inside bracelet_n_02_1 backpack_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_windows_0_Wainscott_0_int_0_2021-05-23_23-07-05": {
      "task_name": "cleaning_windows",
      "natural_description": "Soak the rags and use them to clean the dusty windows.",
      "raw_bddl_goal": "(define (problem cleaning_windows_0)\n    (:domain igibson)\n\n    (:objects\n     \ttowel.n.01_1 towel.n.01_2 - towel.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \trag.n.01_1 rag.n.01_2 - rag.n.01\n    \tcleansing_agent.n.01_1 - cleansing_agent.n.01\n    \twindow.n.01_1 window.n.01_2 - window.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \ttable.n.02_1 - table.n.02\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (inside towel.n.01_1 cabinet.n.01_1) \n        (inside towel.n.01_2 cabinet.n.01_1) \n        (inside rag.n.01_1 cabinet.n.01_1) \n        (inside rag.n.01_2 cabinet.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (not \n            (soaked rag.n.01_2)\n        ) \n        (inside cleansing_agent.n.01_1 cabinet.n.01_1) \n        (dusty window.n.01_1) \n        (dusty window.n.01_2) \n        (not \n            (dusty sink.n.01_1)\n        ) \n        (inroom floor.n.01_1 kitchen) \n        (inroom floor.n.01_2 living_room) \n        (inroom window.n.01_1 kitchen) \n        (inroom window.n.01_2 living_room) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom table.n.02_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (and \n                (soaked ?rag.n.01_1) \n                (soaked ?rag.n.01_2)\n            ) \n            (and \n                (not \n                    (dusty ?window.n.01_1)\n                ) \n                (not \n                    (dusty ?window.n.01_2)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "soaked(rag.0) and soaked(rag.1) and (not dusty(window.133)) and (not dusty(window.119))",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "rag_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_82"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_82"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_82"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "SOAK",
          "object": "rag_1"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_82"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "rag_1"
        },
        {
          "action": "CLEAN",
          "object": "window_133"
        },
        {
          "action": "CLEAN",
          "object": "window_119"
        }
      ],
      "transition_model": "(define (problem cleaning_windows)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 rag_n_01_1 rag_n_01_2 - rag_n_01 sink_n_01_1 - sink_n_01 towel_n_01_1 towel_n_01_2 - towel_n_01 window_n_01_1 window_n_01_2 - window_n_01)\n    (:init (dusty window_n_01_1) (dusty window_n_01_2) (inside rag_n_01_1 cabinet_n_01_1) (inside rag_n_01_2 cabinet_n_01_1) (inside towel_n_01_1 cabinet_n_01_1) (inside towel_n_01_2 cabinet_n_01_1) (not (dusty sink_n_01_1)) (not (soaked rag_n_01_1)) (not (soaked rag_n_01_2)) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj rag_n_01_2 rag_n_01_2) (same_obj sink_n_01_1 sink_n_01_1) (same_obj towel_n_01_1 towel_n_01_1) (same_obj towel_n_01_2 towel_n_01_2) (same_obj window_n_01_1 window_n_01_1) (same_obj window_n_01_2 window_n_01_2))\n    (:goal (and (soaked rag_n_01_1) (soaked rag_n_01_2) (not (dusty window_n_01_2)) (not (dusty window_n_01_1))))\n)",
      "demo": null
    },
    "bottling_fruit_0_Wainscott_0_int_0_2021-05-24_19-46-46": {
      "task_name": "bottling_fruit",
      "natural_description": "Slice the strawberry and the peach, put the sliced strawberry and peach in separate jars, and close the jars.",
      "raw_bddl_goal": "(define (problem bottling_fruit_0)\n    (:domain igibson)\n\n    (:objects\n     \tstrawberry.n.01_1 - strawberry.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tpeach.n.03_1 - peach.n.03\n    \tcountertop.n.01_1 - countertop.n.01\n    \tjar.n.01_1 jar.n.01_2 - jar.n.01\n        carving_knife.n.01_1 - carving_knife.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (inside strawberry.n.01_1 electric_refrigerator.n.01_1) \n        (inside peach.n.03_1 electric_refrigerator.n.01_1) \n        (not \n            (sliced strawberry.n.01_1)\n        ) \n        (not \n            (sliced peach.n.03_1)\n        ) \n        (ontop jar.n.01_1 countertop.n.01_1) \n        (ontop jar.n.01_2 countertop.n.01_1) \n        (ontop carving_knife.n.01_1 countertop.n.01_1) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (exists \n                (?jar.n.01 - jar.n.01) \n                (and \n                    (inside ?strawberry.n.01_1 ?jar.n.01) \n                    (not \n                        (inside ?peach.n.03_1 ?jar.n.01)\n                    )\n                )\n            ) \n            (exists \n                (?jar.n.01 - jar.n.01) \n                (and \n                    (inside ?peach.n.03_1 ?jar.n.01) \n                    (not \n                        (inside ?strawberry.n.01_1 ?jar.n.01)\n                    )\n                )\n            ) \n            (forall \n                (?jar.n.01 - jar.n.01) \n                (not \n                    (open ?jar.n.01)\n                )\n            ) \n            (sliced strawberry.n.01_1) \n            (sliced peach.n.03_1)\n        )\n    )\n)",
      "tl_goal": "exists x0. (not jar_n_01(x0) or (inside(strawberry.0, x0) and (not inside(peach.0, x0)))) and exists x0. (not jar_n_01(x0) or (inside(peach.0, x0) and (not inside(strawberry.0, x0)))) and forall x0. (not jar_n_01(x0) or (not open(x0))) and sliced(strawberry.0) and sliced(peach.0)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "strawberry_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "peach_0"
        },
        {
          "action": "LEFT_RELEASE",
          "object": "peach_0"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "strawberry_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "carving_knife_0"
        },
        {
          "action": "SLICE",
          "object": "strawberry_0"
        },
        {
          "action": "SLICE",
          "object": "peach_0"
        },
        {
          "action": "LEFT_RELEASE",
          "object": "carving_knife_0"
        },
        {
          "action": "OPEN",
          "object": "jar_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "strawberry_0_part_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "jar_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "strawberry_0_part_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "jar_1"
        },
        {
          "action": "CLOSE",
          "object": "jar_1"
        },
        {
          "action": "OPEN",
          "object": "jar_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "peach_0_part_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "jar_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "peach_0_part_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "jar_0"
        },
        {
          "action": "CLOSE",
          "object": "jar_0"
        }
      ],
      "transition_model": "(define (problem bottling_fruit)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent carving_knife_n_01_1 - carving_knife_n_01 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 jar_n_01_1 jar_n_01_2 - jar_n_01 peach_n_03_1 - peach_n_03 strawberry_n_01_1 - strawberry_n_01)\n    (:init (inside peach_n_03_1 electric_refrigerator_n_01_1) (inside strawberry_n_01_1 electric_refrigerator_n_01_1) (not (sliced peach_n_03_1)) (not (sliced strawberry_n_01_1)) (ontop carving_knife_n_01_1 countertop_n_01_1) (ontop jar_n_01_1 countertop_n_01_1) (ontop jar_n_01_2 countertop_n_01_1) (same_obj carving_knife_n_01_1 carving_knife_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj jar_n_01_1 jar_n_01_1) (same_obj jar_n_01_2 jar_n_01_2) (same_obj peach_n_03_1 peach_n_03_1) (same_obj strawberry_n_01_1 strawberry_n_01_1))\n    (:goal (and (sliced strawberry_n_01_1) (sliced peach_n_03_1) (inside peach_n_03_1 jar_n_01_1) (not (inside strawberry_n_01_1 jar_n_01_1))))\n)",
      "demo": null
    },
    "thawing_frozen_food_0_Pomaria_1_int_0_2021-10-26_13-10-33": {
      "task_name": "thawing_frozen_food",
      "natural_description": "Place the frozen food items next to the sink to thaw.",
      "raw_bddl_goal": "(define (problem thawing_frozen_food_0)\n    (:domain igibson)\n\n    (:objects\n     \tdate.n.08_1 - date.n.08\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tolive.n.04_1 - olive.n.04\n    \tfish.n.02_1 fish.n.02_2 fish.n.02_3 fish.n.02_4 - fish.n.02\n    \tsink.n.01_1 - sink.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (inside date.n.08_1 electric_refrigerator.n.01_1) \n        (inside olive.n.04_1 electric_refrigerator.n.01_1) \n        (inside fish.n.02_1 electric_refrigerator.n.01_1) \n        (inside fish.n.02_2 electric_refrigerator.n.01_1) \n        (inside fish.n.02_3 electric_refrigerator.n.01_1) \n        (inside fish.n.02_4 electric_refrigerator.n.01_1) \n        (frozen fish.n.02_1) \n        (frozen fish.n.02_2) \n        (frozen fish.n.02_3) \n        (frozen fish.n.02_4) \n        (frozen date.n.08_1) \n        (frozen olive.n.04_1) \n        (inroom sink.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (nextto ?date.n.08_1 ?fish.n.02_1) \n            (nextto ?fish.n.02_1 ?sink.n.01_1) \n            (nextto ?fish.n.02_2 ?sink.n.01_1) \n            (nextto ?fish.n.02_3 ?sink.n.01_1) \n            (nextto ?fish.n.02_4 ?sink.n.01_1) \n            (nextto ?olive.n.04_1 ?sink.n.01_1)\n        )\n    )\n)",
      "tl_goal": "nextto(container_date.0, fish.0) and nextto(fish.0, sink.37) and nextto(fish.1, sink.37) and nextto(fish.2, sink.37) and nextto(fish.3, sink.37) and nextto(olive.0, sink.37)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "fridge_20"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "fish_3"
        },
        {
          "action": "LEFT_GRASP",
          "object": "fish_2"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_37"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "sink_37"
        },
        {
          "action": "UNFREEZE",
          "object": "fish_3"
        },
        {
          "action": "UNFREEZE",
          "object": "fish_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "fish_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "fish_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_37"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "sink_37"
        },
        {
          "action": "UNFREEZE",
          "object": "fish_1"
        },
        {
          "action": "UNFREEZE",
          "object": "fish_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "container_date_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "olive_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_37"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "sink_37"
        },
        {
          "action": "UNFREEZE",
          "object": "container_date_0"
        },
        {
          "action": "UNFREEZE",
          "object": "olive_0"
        },
        {
          "action": "CLOSE",
          "object": "fridge_20"
        }
      ],
      "transition_model": "(define (problem thawing_frozen_food)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent date_n_08_1 - date_n_08 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 fish_n_02_1 fish_n_02_2 fish_n_02_4 - fish_n_02 olive_n_04_1 - olive_n_04 sink_n_01_1 - sink_n_01)\n    (:init (frozen date_n_08_1) (frozen fish_n_02_1) (frozen fish_n_02_2) (frozen fish_n_02_4) (frozen olive_n_04_1) (inside date_n_08_1 electric_refrigerator_n_01_1) (inside fish_n_02_1 electric_refrigerator_n_01_1) (inside fish_n_02_2 electric_refrigerator_n_01_1) (inside fish_n_02_4 electric_refrigerator_n_01_1) (inside olive_n_04_1 electric_refrigerator_n_01_1) (same_obj date_n_08_1 date_n_08_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj fish_n_02_1 fish_n_02_1) (same_obj fish_n_02_2 fish_n_02_2) (same_obj fish_n_02_4 fish_n_02_4) (same_obj olive_n_04_1 olive_n_04_1) (same_obj sink_n_01_1 sink_n_01_1))\n    (:goal (and (nextto olive_n_04_1 sink_n_01_1) (nextto fish_n_02_2 sink_n_01_1) (nextto fish_n_02_4 sink_n_01_1) (nextto date_n_08_1 fish_n_02_1)))\n)",
      "demo": null
    },
    "setting_mousetraps_0_Beechwood_1_int_0_2021-10-26_13-53-26": {
      "task_name": "setting_mousetraps",
      "natural_description": "Place mousetraps 1 and 2 on the floor, and mousetraps 3 and 4 next to the toilet.",
      "raw_bddl_goal": "(define (problem setting_mousetraps_0)\n    (:domain igibson)\n\n    (:objects\n     \tmousetrap.n.01_1 mousetrap.n.01_2 mousetrap.n.01_3 mousetrap.n.01_4 - mousetrap.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \ttoilet.n.02_1 - toilet.n.02\n        bed.n.01_1 - bed.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop mousetrap.n.01_1 bed.n.01_1) \n        (ontop mousetrap.n.01_2 bed.n.01_1) \n        (ontop mousetrap.n.01_3 bed.n.01_1) \n        (ontop mousetrap.n.01_4 bed.n.01_1) \n        (inroom floor.n.01_1 corridor) \n        (inroom toilet.n.02_1 bathroom) \n        (inroom sink.n.01_1 bathroom) \n        (inroom floor.n.01_2 bathroom) \n        (inroom bed.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_2)\n    )\n    \n    (:goal \n        (and \n            (onfloor ?mousetrap.n.01_1 ?floor.n.01_1) \n            (onfloor ?mousetrap.n.01_2 ?floor.n.01_1) \n            (nextto ?mousetrap.n.01_3 ?toilet.n.02_1) \n            (nextto ?mousetrap.n.01_4 ?toilet.n.02_1)\n        )\n    )\n)",
      "tl_goal": "onfloor(mousetrap.100, room_floor_corridor.0) and onfloor(mousetrap.101, room_floor_corridor.0) and nextto(mousetrap.102, toilet.64) and nextto(mousetrap.103, toilet.64)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "mousetrap_101"
        },
        {
          "action": "LEFT_GRASP",
          "object": "mousetrap_100"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_corridor_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_corridor_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "mousetrap_103"
        },
        {
          "action": "LEFT_GRASP",
          "object": "mousetrap_102"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "toilet_64"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "toilet_64"
        }
      ],
      "transition_model": "(define (problem setting_mousetraps)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bed_n_01_1 - bed_n_01 floor_n_01_1 - floor_n_01 mousetrap_n_01_1 mousetrap_n_01_2 mousetrap_n_01_3 mousetrap_n_01_4 - mousetrap_n_01 toilet_n_02_1 - toilet_n_02)\n    (:init (ontop mousetrap_n_01_1 bed_n_01_1) (ontop mousetrap_n_01_2 bed_n_01_1) (ontop mousetrap_n_01_3 bed_n_01_1) (ontop mousetrap_n_01_4 bed_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj mousetrap_n_01_1 mousetrap_n_01_1) (same_obj mousetrap_n_01_2 mousetrap_n_01_2) (same_obj mousetrap_n_01_3 mousetrap_n_01_3) (same_obj mousetrap_n_01_4 mousetrap_n_01_4) (same_obj toilet_n_02_1 toilet_n_02_1))\n    (:goal (and (onfloor mousetrap_n_01_2 floor_n_01_1) (onfloor mousetrap_n_01_1 floor_n_01_1) (nextto mousetrap_n_01_4 toilet_n_02_1) (nextto mousetrap_n_01_3 toilet_n_02_1)))\n)",
      "demo": null
    },
    "washing_pots_and_pans_0_Pomaria_1_int_0_2021-10-26_13-06-44": {
      "task_name": "washing_pots_and_pans",
      "natural_description": "Clean all the stained pans, kettles, and teapots and place them inside a cabinet.",
      "raw_bddl_goal": "(define (problem washing_pots_and_pans_0)\n    (:domain igibson)\n\n    (:objects\n     \tteapot.n.01_1 - teapot.n.01\n        kettle.n.01_1 - kettle.n.01\n    \tpan.n.01_1 pan.n.01_2 pan.n.01_3 - pan.n.01\n    \tcountertop.n.01_1 countertop.n.01_2 - countertop.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \tcabinet.n.01_1 cabinet.n.01_2 - cabinet.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop teapot.n.01_1 countertop.n.01_1) \n        (stained teapot.n.01_1) \n        (ontop kettle.n.01_1 countertop.n.01_2) \n        (stained kettle.n.01_1) \n        (ontop pan.n.01_1 countertop.n.01_1) \n        (stained pan.n.01_1) \n        (ontop pan.n.01_2 countertop.n.01_1) \n        (stained pan.n.01_2) \n        (ontop pan.n.01_3 countertop.n.01_2) \n        (stained pan.n.01_3) \n        (ontop scrub_brush.n.01_1 countertop.n.01_2) \n        (soaked scrub_brush.n.01_1) \n        (inside soap.n.01_1 sink.n.01_1) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom cabinet.n.01_2 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (inroom countertop.n.01_2 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?pan.n.01 - pan.n.01) \n                (and \n                    (not \n                        (stained ?pan.n.01)\n                    ) \n                    (exists \n                        (?cabinet.n.01 - cabinet.n.01) \n                        (inside ?pan.n.01 ?cabinet.n.01)\n                    )\n                )\n            ) \n            (forall \n                (?kettle.n.01 - kettle.n.01) \n                (and \n                    (not \n                        (stained ?kettle.n.01)\n                    ) \n                    (exists \n                        (?cabinet.n.01 - cabinet.n.01) \n                        (inside ?kettle.n.01 ?cabinet.n.01)\n                    )\n                )\n            )\n            (forall \n                (?teapot.n.01 - teapot.n.01) \n                (and \n                    (not \n                        (stained ?teapot.n.01)\n                    ) \n                    (exists \n                        (?cabinet.n.01 - cabinet.n.01) \n                        (inside ?teapot.n.01 ?cabinet.n.01)\n                    )\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not pan_n_01(x0) or ((not stained(x0)) and (exists x1. (not cabinet_n_01(x1) or inside(x0, x1))))) and forall x0. (not kettle_n_01(x0) or ((not stained(x0)) and (exists x1. (not cabinet_n_01(x1) or inside(x0, x1))))) and forall x0. (not teapot_n_01(x0) or ((not stained(x0)) and (exists x1. (not cabinet_n_01(x1) or inside(x0, x1)))))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_83"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_37"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_37"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_83"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_37"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_83"
        },
        {
          "action": "CLEAN",
          "object": "kettle_79"
        },
        {
          "action": "CLEAN",
          "object": "saucepan_81"
        },
        {
          "action": "CLEAN",
          "object": "saucepan_80"
        },
        {
          "action": "CLEAN",
          "object": "frying_pan_82"
        },
        {
          "action": "CLEAN",
          "object": "teapot_78"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "scrub_brush_83"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "saucepan_81"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "saucepan_80"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "frying_pan_82"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "teapot_78"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "kettle_79"
        },
        {
          "action": "OPEN",
          "object": "top_cabinet_27"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "top_cabinet_27"
        }
      ],
      "transition_model": "(define (problem washing_pots_and_pans)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 countertop_n_01_1 countertop_n_01_2 - countertop_n_01 pan_n_01_1 pan_n_01_3 - pan_n_01 scrub_brush_n_01_1 - scrub_brush_n_01 sink_n_01_1 - sink_n_01 soap_n_01_1 - soap_n_01 teapot_n_01_1 - teapot_n_01)\n    (:init (inside soap_n_01_1 sink_n_01_1) (ontop pan_n_01_1 countertop_n_01_1) (ontop pan_n_01_3 countertop_n_01_2) (ontop scrub_brush_n_01_1 countertop_n_01_2) (ontop teapot_n_01_1 countertop_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj countertop_n_01_2 countertop_n_01_2) (same_obj pan_n_01_1 pan_n_01_1) (same_obj pan_n_01_3 pan_n_01_3) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj soap_n_01_1 soap_n_01_1) (same_obj teapot_n_01_1 teapot_n_01_1) (soaked scrub_brush_n_01_1) (stained pan_n_01_1) (stained pan_n_01_3) (stained teapot_n_01_1))\n    (:goal (and (not (stained teapot_n_01_1)) (inside teapot_n_01_1 cabinet_n_01_1) (not (stained pan_n_01_1)) (not (stained pan_n_01_3))))\n)",
      "demo": null
    },
    "laying_wood_floors_0_Pomaria_1_int_0_2021-10-25_20-46-59": {
      "task_name": "laying_wood_floors",
      "natural_description": "Lay the plywoods on floor2 right next to each other.",
      "raw_bddl_goal": "(define (problem laying_wood_floors_0)\n    (:domain igibson)\n\n    (:objects\n     \tplywood.n.01_1 plywood.n.01_2 plywood.n.01_3 plywood.n.01_4 - plywood.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \thammer.n.02_1 - hammer.n.02\n    \tsaw.n.02_1 - saw.n.02\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor plywood.n.01_1 floor.n.01_1) \n        (onfloor plywood.n.01_2 floor.n.01_1) \n        (onfloor plywood.n.01_3 floor.n.01_1) \n        (onfloor plywood.n.01_4 floor.n.01_1) \n        (onfloor hammer.n.02_1 floor.n.01_1) \n        (onfloor saw.n.02_1 floor.n.01_1) \n        (inroom floor.n.01_1 kitchen) \n        (inroom floor.n.01_2 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?plywood.n.01 - plywood.n.01) \n                (onfloor ?plywood.n.01 ?floor.n.01_2)\n            ) \n            (forall \n                (?plywood.n.01 - plywood.n.01) \n                (or \n                    (nextto ?plywood.n.01 ?plywood.n.01_1) \n                    (nextto ?plywood.n.01 ?plywood.n.01_2) \n                    (nextto ?plywood.n.01 ?plywood.n.01_3) \n                    (nextto ?plywood.n.01 ?plywood.n.01_4)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not plywood_n_01(x0) or onfloor(x0, room_floor_living_room.0)) and forall x0. (not plywood_n_01(x0) or (nextto(x0, plywood.78) or nextto(x0, plywood.79) or nextto(x0, plywood.80) or nextto(x0, plywood.81)))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "plywood_81"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plywood_80"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plywood_78"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plywood_79"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_living_room_0"
        }
      ],
      "transition_model": "(define (problem laying_wood_floors)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 floor_n_01_2 - floor_n_01 plywood_n_01_1 plywood_n_01_2 plywood_n_01_3 plywood_n_01_4 - plywood_n_01)\n    (:init (onfloor plywood_n_01_1 floor_n_01_1) (onfloor plywood_n_01_2 floor_n_01_1) (onfloor plywood_n_01_3 floor_n_01_1) (onfloor plywood_n_01_4 floor_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj plywood_n_01_1 plywood_n_01_1) (same_obj plywood_n_01_2 plywood_n_01_2) (same_obj plywood_n_01_3 plywood_n_01_3) (same_obj plywood_n_01_4 plywood_n_01_4))\n    (:goal (and (nextto plywood_n_01_3 plywood_n_01_2) (nextto plywood_n_01_2 plywood_n_01_2) (onfloor plywood_n_01_4 floor_n_01_2) (onfloor plywood_n_01_1 floor_n_01_2)))\n)",
      "demo": null
    },
    "putting_away_toys_0_Ihlen_0_int_0_2021-10-25_22-47-44": {
      "task_name": "putting_away_toys",
      "natural_description": "Put all the toys into cartons.",
      "raw_bddl_goal": "(define (problem putting_away_toys_0)\n    (:domain igibson)\n\n    (:objects\n        plaything.n.01_1 plaything.n.01_2 plaything.n.01_3 plaything.n.01_4 plaything.n.01_5 plaything.n.01_6 plaything.n.01_7 plaything.n.01_8 - plaything.n.01\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        carton.n.02_1 carton.n.02_2 - carton.n.02\n        agent.n.01_1 - agent.n.01\n        table.n.02_1 - table.n.02\n    )\n    \n    (:init \n        (onfloor plaything.n.01_1 floor.n.01_1) \n        (onfloor plaything.n.01_2 floor.n.01_1) \n        (onfloor plaything.n.01_3 floor.n.01_1) \n        (onfloor plaything.n.01_4 floor.n.01_1) \n        (onfloor plaything.n.01_5 floor.n.01_2) \n        (onfloor plaything.n.01_6 floor.n.01_2) \n        (onfloor plaything.n.01_7 floor.n.01_2) \n        (onfloor plaything.n.01_8 floor.n.01_2) \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (ontop carton.n.02_2 table.n.02_1) \n        (inroom floor.n.01_1 living_room) \n        (inroom floor.n.01_2 dining_room) \n        (inroom table.n.02_1 dining_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?plaything.n.01 - plaything.n.01) \n                (exists \n                    (?carton.n.02 - carton.n.02) \n                    (inside ?plaything.n.01 ?carton.n.02)\n                )\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not plaything_n_01(x0) or (exists x1. (not carton_n_02(x1) or inside(x0, x1))))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "toy_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "toy_2"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "toy_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "toy_4"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "toy_3"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "toy_5"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "toy_7"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "toy_6"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        }
      ],
      "transition_model": "(define (problem putting_away_toys)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent carton_n_02_1 - carton_n_02 floor_n_01_1 floor_n_01_2 - floor_n_01 plaything_n_01_2 plaything_n_01_3 plaything_n_01_5 plaything_n_01_6 - plaything_n_01)\n    (:init (onfloor carton_n_02_1 floor_n_01_1) (onfloor plaything_n_01_2 floor_n_01_1) (onfloor plaything_n_01_3 floor_n_01_1) (onfloor plaything_n_01_5 floor_n_01_2) (onfloor plaything_n_01_6 floor_n_01_2) (same_obj carton_n_02_1 carton_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj plaything_n_01_2 plaything_n_01_2) (same_obj plaything_n_01_3 plaything_n_01_3) (same_obj plaything_n_01_5 plaything_n_01_5) (same_obj plaything_n_01_6 plaything_n_01_6))\n    (:goal (and (inside plaything_n_01_5 carton_n_02_1) (inside plaything_n_01_3 carton_n_02_1) (inside plaything_n_01_6 carton_n_02_1) (inside plaything_n_01_2 carton_n_02_1)))\n)",
      "demo": null
    },
    "cleaning_garage_0_Ihlen_0_int_0_2021-08-24_17-40-48": {
      "task_name": "cleaning_garage",
      "natural_description": "Clean dust and stains off the floor and cabinet, put all newspapers into the bin or on the floor, and put all bottles on the table.",
      "raw_bddl_goal": "(define (problem cleaning_garage_0)\n    (:domain igibson)\n\n    (:objects\n     \tbox.n.01_1 - box.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \tnewspaper.n.03_1 newspaper.n.03_2 - newspaper.n.03\n    \tbottle.n.01_1 bottle.n.01_2 - bottle.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tbroom.n.01_1 - broom.n.01\n    \trag.n.01_1 - rag.n.01\n    \ttable.n.02_1 - table.n.02\n    \tbin.n.01_1 - bin.n.01\n    \tsink.n.01_1 - sink.n.01\n    \tshelf.n.01_1 - shelf.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor box.n.01_1 floor.n.01_1) \n        (onfloor newspaper.n.03_1 floor.n.01_1) \n        (onfloor newspaper.n.03_2 floor.n.01_1) \n        (onfloor bottle.n.01_1 floor.n.01_1) \n        (onfloor bottle.n.01_2 floor.n.01_1) \n        (dusty floor.n.01_1) \n        (stained floor.n.01_1) \n        (dusty cabinet.n.01_1) \n        (onfloor broom.n.01_1 floor.n.01_1) \n        (ontop rag.n.01_1 table.n.02_1) \n        (onfloor bin.n.01_1 floor.n.01_1) \n        (inroom floor.n.01_1 garage) \n        (inroom cabinet.n.01_1 garage) \n        (inroom sink.n.01_1 storage_room) \n        (inroom shelf.n.01_1 storage_room) \n        (inroom table.n.02_1 storage_room) \n        (inroom floor.n.01_2 storage_room) \n        (onfloor agent.n.01_1 floor.n.01_2)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?floor.n.01_1)\n            ) \n            (not \n                (dusty ?cabinet.n.01_1)\n            ) \n            (not \n                (stained ?cabinet.n.01_1)\n            ) \n            (forall \n                (?newspaper.n.03 - newspaper.n.03) \n                (or \n                    (inside ?newspaper.n.03 ?bin.n.01_1) \n                    (not \n                        (onfloor ?newspaper.n.03 ?floor.n.01_1)\n                    )\n                )\n            ) \n            (forall \n                (?bottle.n.01 - bottle.n.01) \n                (ontop ?bottle.n.01 ?table.n.02_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not dusty(room_floor_garage.0) and not dusty(bottom_cabinet.15) and not stained(bottom_cabinet.15) and forall x0. (not newspaper_n_03(x0) or (inside(x0, trash_can.0) or (not onfloor(x0, room_floor_garage.0)))) and forall x0. (not bottle_n_01(x0) or ontop(x0, breakfast_table.14))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_32"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_32"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_storage_room_0"
        },
        {
          "action": "CLEAN",
          "object": "room_floor_garage_0"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_15"
        },
        {
          "action": "CLEAN",
          "object": "bottom_cabinet_15"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_garage_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "newspaper_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "newspaper_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "trash_can_0"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "trash_can_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cruet_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cruet_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_14"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_14"
        }
      ],
      "transition_model": "(define (problem cleaning_garage)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bin_n_01_1 - bin_n_01 bottle_n_01_1 - bottle_n_01 cabinet_n_01_1 - cabinet_n_01 floor_n_01_1 - floor_n_01 newspaper_n_03_2 - newspaper_n_03 rag_n_01_1 - rag_n_01 sink_n_01_1 - sink_n_01 table_n_02_1 - table_n_02)\n    (:init (dusty cabinet_n_01_1) (onfloor bin_n_01_1 floor_n_01_1) (onfloor bottle_n_01_1 floor_n_01_1) (onfloor newspaper_n_03_2 floor_n_01_1) (ontop rag_n_01_1 table_n_02_1) (same_obj bin_n_01_1 bin_n_01_1) (same_obj bottle_n_01_1 bottle_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj newspaper_n_03_2 newspaper_n_03_2) (same_obj rag_n_01_1 rag_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (inside newspaper_n_03_2 bin_n_01_1) (not (dusty cabinet_n_01_1)) (not (stained cabinet_n_01_1)) (ontop bottle_n_01_1 table_n_02_1)))\n)",
      "demo": null
    },
    "watering_houseplants_0_Beechwood_0_int_0_2021-10-26_15-20-01": {
      "task_name": "watering_houseplants",
      "natural_description": "Water each houseplant thoroughly.",
      "raw_bddl_goal": "(define (problem watering_houseplants_0)\n    (:domain igibson)\n\n    (:objects\n     \tpot_plant.n.01_1 pot_plant.n.01_2 pot_plant.n.01_3 - pot_plant.n.01\n    \tfloor.n.01_1 floor.n.01_2 - floor.n.01\n    \tsink.n.01_1 - sink.n.01\n    \ttable.n.02_1 - table.n.02\n    \tcountertop.n.01_1 - countertop.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor pot_plant.n.01_1 floor.n.01_1) \n        (onfloor pot_plant.n.01_2 floor.n.01_1) \n        (onfloor pot_plant.n.01_3 floor.n.01_2) \n        (not \n            (soaked pot_plant.n.01_1)\n        ) \n        (not \n            (soaked pot_plant.n.01_2)\n        ) \n        (not \n            (soaked pot_plant.n.01_3)\n        ) \n        (inroom table.n.02_1 dining_room) \n        (inroom floor.n.01_1 dining_room) \n        (inroom floor.n.01_2 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_2)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?pot_plant.n.01 - pot_plant.n.01) \n                (soaked ?pot_plant.n.01)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not pot_plant_n_01(x0) or soaked(x0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "pot_plant_2"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_64"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_64"
        },
        {
          "action": "SOAK",
          "object": "pot_plant_2"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "pot_plant_2"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pot_plant_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_64"
        },
        {
          "action": "SOAK",
          "object": "pot_plant_1"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "pot_plant_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pot_plant_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_64"
        },
        {
          "action": "SOAK",
          "object": "pot_plant_0"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "pot_plant_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_64"
        }
      ],
      "transition_model": "(define (problem watering_houseplants)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 floor_n_01_2 - floor_n_01 pot_plant_n_01_1 pot_plant_n_01_2 pot_plant_n_01_3 - pot_plant_n_01 sink_n_01_1 - sink_n_01)\n    (:init (not (soaked pot_plant_n_01_1)) (not (soaked pot_plant_n_01_2)) (not (soaked pot_plant_n_01_3)) (onfloor pot_plant_n_01_1 floor_n_01_1) (onfloor pot_plant_n_01_2 floor_n_01_1) (onfloor pot_plant_n_01_3 floor_n_01_2) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj pot_plant_n_01_1 pot_plant_n_01_1) (same_obj pot_plant_n_01_2 pot_plant_n_01_2) (same_obj pot_plant_n_01_3 pot_plant_n_01_3) (same_obj sink_n_01_1 sink_n_01_1))\n    (:goal (and (soaked pot_plant_n_01_3) (soaked pot_plant_n_01_1) (soaked pot_plant_n_01_2)))\n)",
      "demo": null
    },
    "installing_alarms_0_Merom_1_int_0_2021-05-23_23-02-24": {
      "task_name": "installing_alarms",
      "natural_description": "Place each alarm on a table and make sure they are turned on.",
      "raw_bddl_goal": "(define (problem installing_alarms_0)\n    (:domain igibson)\n\n    (:objects\n     \talarm.n.02_1 alarm.n.02_2 - alarm.n.02\n    \ttable.n.02_1 table.n.02_2 - table.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop alarm.n.02_1 table.n.02_2) \n        (ontop alarm.n.02_2 table.n.02_2) \n        (not \n            (toggled_on alarm.n.02_1)\n        ) \n        (not \n            (toggled_on alarm.n.02_2)\n        ) \n        (inroom table.n.02_1 dining_room) \n        (inroom table.n.02_2 living_room) \n        (inroom floor.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forpairs \n                (?alarm.n.02 - alarm.n.02) \n                (?table.n.02 - table.n.02) \n                (ontop ?alarm.n.02 ?table.n.02)\n            ) \n            (forall \n                (?alarm.n.02 - alarm.n.02) \n                (toggled_on ?alarm.n.02)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not alarm_n_02(x0) or forn 1. x1. (not table_n_02(x1) or ontop(x0, x1))) and forall x1. (not table_n_02(x1) or forn 1. x0. (not alarm_n_02(x0) or ontop(x0, x1))) and forall x0. (not alarm_n_02(x0) or toggledon(x0))",
      "action_trajectory": [
        {
          "action": "TOGGLE_ON",
          "object": "alarm_0"
        },
        {
          "action": "TOGGLE_ON",
          "object": "alarm_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "alarm_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "coffee_table_27"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "alarm_1"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_20"
        }
      ],
      "transition_model": "(define (problem installing_alarms)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent alarm_n_02_1 alarm_n_02_2 - alarm_n_02 table_n_02_1 table_n_02_2 - table_n_02)\n    (:init (not (toggled_on alarm_n_02_1)) (not (toggled_on alarm_n_02_2)) (ontop alarm_n_02_1 table_n_02_2) (ontop alarm_n_02_2 table_n_02_2) (same_obj alarm_n_02_1 alarm_n_02_1) (same_obj alarm_n_02_2 alarm_n_02_2) (same_obj table_n_02_1 table_n_02_1) (same_obj table_n_02_2 table_n_02_2))\n    (:goal (and (toggled_on alarm_n_02_2) (toggled_on alarm_n_02_1) (ontop alarm_n_02_1 table_n_02_2) (ontop alarm_n_02_2 table_n_02_1)))\n)",
      "demo": null
    },
    "organizing_boxes_in_garage_0_Ihlen_0_int_0_2021-08-24_22-59-54": {
      "task_name": "organizing_boxes_in_garage",
      "natural_description": "Put all balls and plates inside separate cartons, put the saucepan inside one of the cartons, and place all cartons on the floor.",
      "raw_bddl_goal": "(define (problem organizing_boxes_in_garage_0)\n    (:domain igibson)\n\n    (:objects\n     \tcarton.n.02_1 carton.n.02_2 - carton.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tball.n.01_1 ball.n.01_2 - ball.n.01\n    \tplate.n.04_1 plate.n.04_2 plate.n.04_3 - plate.n.04\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tsaucepan.n.01_1 - saucepan.n.01\n    \tshelf.n.01_1 - shelf.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (onfloor carton.n.02_2 floor.n.01_1) \n        (onfloor ball.n.01_1 floor.n.01_1) \n        (onfloor ball.n.01_2 floor.n.01_1) \n        (inside plate.n.04_1 shelf.n.01_1) \n        (inside plate.n.04_2 shelf.n.01_1) \n        (inside plate.n.04_3 shelf.n.01_1) \n        (inside saucepan.n.01_1 shelf.n.01_1) \n        (inroom floor.n.01_1 garage) \n        (inroom shelf.n.01_1 garage) \n        (inroom cabinet.n.01_1 garage) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (exists \n                (?carton.n.02 - carton.n.02) \n                (and \n                    (forall \n                        (?ball.n.01 - ball.n.01) \n                        (inside ?ball.n.01 ?carton.n.02)\n                    ) \n                    (forall \n                        (?plate.n.04 - plate.n.04) \n                        (inside ?plate.n.04 ?carton.n.02)\n                    ) \n                    (inside ?saucepan.n.01_1 ?carton.n.02)\n                )\n            ) \n            (forall \n                (?carton.n.02 - carton.n.02) \n                (onfloor ?carton.n.02 floor.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "exists x0. (not carton_n_02(x0) or ((forall x1. (not ball_n_01(x1) or inside(x1, x0))) and (forall x1. (not plate_n_04(x1) or inside(x1, x0))) and inside(saucepan.0, x0))) and forall x0. (not carton_n_02(x0) or onfloor(x0, room_floor_garage.0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "ball_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "ball_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "saucepan_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_2"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_1"
        }
      ],
      "transition_model": "(define (problem organizing_boxes_in_garage)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent ball_n_01_1 ball_n_01_2 - ball_n_01 carton_n_02_1 carton_n_02_2 - carton_n_02 floor_n_01_1 - floor_n_01 plate_n_04_2 - plate_n_04 saucepan_n_01_1 - saucepan_n_01 shelf_n_01_1 - shelf_n_01)\n    (:init (inside plate_n_04_2 shelf_n_01_1) (inside saucepan_n_01_1 shelf_n_01_1) (onfloor agent_n_01_1 floor_n_01_1) (onfloor ball_n_01_1 floor_n_01_1) (onfloor ball_n_01_2 floor_n_01_1) (onfloor carton_n_02_1 floor_n_01_1) (onfloor carton_n_02_2 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj ball_n_01_1 ball_n_01_1) (same_obj ball_n_01_2 ball_n_01_2) (same_obj carton_n_02_1 carton_n_02_1) (same_obj carton_n_02_2 carton_n_02_2) (same_obj floor_n_01_1 floor_n_01_1) (same_obj plate_n_04_2 plate_n_04_2) (same_obj saucepan_n_01_1 saucepan_n_01_1) (same_obj shelf_n_01_1 shelf_n_01_1))\n    (:goal (and (inside ball_n_01_1 carton_n_02_1) (inside plate_n_04_2 carton_n_02_1) (inside saucepan_n_01_1 carton_n_02_1) (onfloor carton_n_02_1 floor_n_01_1)))\n)",
      "demo": null
    },
    "putting_up_Christmas_decorations_inside_0_Ihlen_1_int_0_2021-06-03_14-27-09": {
      "task_name": "putting_up_Christmas_decorations_inside",
      "natural_description": "Place all wrappings under or next to the Christmas tree, place all candles on the table, place one bow on the table, two bows on the sofa, and place the wreath on the table.",
      "raw_bddl_goal": "(define (problem putting_up_Christmas_decorations_inside_0)\n    (:domain igibson)\n\n    (:objects \n        christmas_tree.n.05_1 - christmas_tree.n.05\n        wreath.n.01_1 - wreath.n.01\n        bow.n.08_1 bow.n.08_2 bow.n.08_3 - bow.n.08\n        candle.n.01_1 candle.n.01_2 - candle.n.01\n        wrapping.n.01_1 wrapping.n.01_2 wrapping.n.01_3 - wrapping.n.01\n        carton.n.02_1 - carton.n.02\n        floor.n.01_1 - floor.n.01\n        table.n.02_1 - table.n.02\n        sofa.n.01_1 - sofa.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor christmas_tree.n.05_1 floor.n.01_1)\n        (onfloor carton.n.02_1 floor.n.01_1)\n        (inside wreath.n.01_1 carton.n.02_1)\n        (inside bow.n.08_1 carton.n.02_1)\n        (inside bow.n.08_2 carton.n.02_1)\n        (inside bow.n.08_3 carton.n.02_1)\n        (inside candle.n.01_1 carton.n.02_1)\n        (inside candle.n.01_2 carton.n.02_1)\n        (onfloor wrapping.n.01_1 floor.n.01_1)\n        (onfloor wrapping.n.01_2 floor.n.01_1)\n        (onfloor wrapping.n.01_3 floor.n.01_1)\n        (inroom floor.n.01_1 living_room)\n        (inroom table.n.02_1 dining_room)\n        (inroom sofa.n.01_1 living_room)\n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?wrapping.n.01 - wrapping.n.01)\n                (or \n                    (nextto ?wrapping.n.01 ?christmas_tree.n.05_1)\n                    (under ?wrapping.n.01 ?christmas_tree.n.05_1)\n                )\n            )\n            (forall \n                (?candle.n.01 - candle.n.01)\n                (ontop ?candle.n.01 ?table.n.02_1)\n            )\n            (forn \n                (1)\n                (?bow.n.08 - bow.n.08)\n                (ontop ?bow.n.08 ?table.n.02_1)\n            )\n            (forn\n                (2)\n                (?bow.n.08 - bow.n.08)\n                (ontop ?bow.n.08 ?sofa.n.01_1)\n            )\n            (ontop ?wreath.n.01_1 ?table.n.02_1)\n        )\n    )\n)",
      "tl_goal": "forall x0. (not wrapping_n_01(x0) or (nextto(x0, christmas_tree_decorated.112) or under(x0, christmas_tree_decorated.112))) and forall x0. (not candle_n_01(x0) or ontop(x0, breakfast_table.19)) and forn 1. x0. (not bow_n_08(x0) or ontop(x0, breakfast_table.19)) and forn 2. x0. (not bow_n_08(x0) or ontop(x0, sofa.25)) and ontop(wreath.113, breakfast_table.19)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "wrapped_gift_120"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "christmas_tree_decorated_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "wrapped_gift_119"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "christmas_tree_decorated_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "wrapped_gift_121"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "christmas_tree_decorated_112"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bow_114"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "sofa_25"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bow_115"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "sofa_25"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bow_116"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_19"
        },
        {
          "action": "LEFT_GRASP",
          "object": "wreath_113"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_19"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "candle_118"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_19"
        },
        {
          "action": "LEFT_GRASP",
          "object": "candle_117"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "breakfast_table_19"
        }
      ],
      "transition_model": "(define (problem putting_up_Christmas_decorations_inside)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bow_n_08_1 bow_n_08_3 - bow_n_08 candle_n_01_1 - candle_n_01 carton_n_02_1 - carton_n_02 christmas_tree_n_05_1 - christmas_tree_n_05 floor_n_01_1 - floor_n_01 sofa_n_01_1 - sofa_n_01 table_n_02_1 - table_n_02 wrapping_n_01_1 - wrapping_n_01)\n    (:init (inside bow_n_08_1 carton_n_02_1) (inside bow_n_08_3 carton_n_02_1) (inside candle_n_01_1 carton_n_02_1) (onfloor christmas_tree_n_05_1 floor_n_01_1) (onfloor wrapping_n_01_1 floor_n_01_1) (same_obj bow_n_08_1 bow_n_08_1) (same_obj bow_n_08_3 bow_n_08_3) (same_obj candle_n_01_1 candle_n_01_1) (same_obj carton_n_02_1 carton_n_02_1) (same_obj christmas_tree_n_05_1 christmas_tree_n_05_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj sofa_n_01_1 sofa_n_01_1) (same_obj table_n_02_1 table_n_02_1) (same_obj wrapping_n_01_1 wrapping_n_01_1))\n    (:goal (and (ontop bow_n_08_1 sofa_n_01_1) (nextto wrapping_n_01_1 christmas_tree_n_05_1) (ontop bow_n_08_3 sofa_n_01_1) (ontop candle_n_01_1 table_n_02_1)))\n)",
      "demo": null
    },
    "cleaning_bathtub_0_Pomaria_0_int_0_2021-09-10_16-22-10": {
      "task_name": "cleaning_bathtub",
      "natural_description": "Clean the stained bathtub.",
      "raw_bddl_goal": "(define (problem cleaning_bathtub_0)\n    (:domain igibson)\n\n    (:objects\n        sink.n.01_1 - sink.n.01\n     \tbathtub.n.01_1 - bathtub.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tbucket.n.01_1 - bucket.n.01\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (stained bathtub.n.01_1) \n        (onfloor soap.n.01_1 floor.n.01_1) \n        (onfloor bucket.n.01_1 floor.n.01_1) \n        (inside scrub_brush.n.01_1 bathtub.n.01_1) \n        (inroom floor.n.01_1 bathroom) \n        (inroom bathtub.n.01_1 bathroom) \n        (inroom sink.n.01_1 bathroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (stained ?bathtub.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "not stained(bathtub.35)",
      "action_trajectory": [
        {
          "action": "TOGGLE_ON",
          "object": "sink_38"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_38"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_38"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_0"
        },
        {
          "action": "CLEAN",
          "object": "bathtub_35"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "scrub_brush_0"
        }
      ],
      "transition_model": "(define (problem cleaning_bathtub)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bathtub_n_01_1 - bathtub_n_01 scrub_brush_n_01_1 - scrub_brush_n_01 sink_n_01_1 - sink_n_01)\n    (:init (inside scrub_brush_n_01_1 bathtub_n_01_1) (same_obj bathtub_n_01_1 bathtub_n_01_1) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (stained bathtub_n_01_1))\n    (:goal (not (stained bathtub_n_01_1)))\n)",
      "demo": null
    },
    "clearing_the_table_after_dinner_0_Ihlen_0_int_0_2021-10-25_23-01-51": {
      "task_name": "clearing_the_table_after_dinner",
      "natural_description": "Put all cups, bowls, and catsup into buckets.",
      "raw_bddl_goal": "(define (problem clearing_the_table_after_dinner_0)\n    (:domain igibson)\n\n    (:objects\n     \tfloor.n.01_1 - floor.n.01\n    \tchair.n.01_1 chair.n.01_2 - chair.n.01\n    \ttable.n.02_1 - table.n.02\n    \tcup.n.01_1 cup.n.01_2 - cup.n.01\n    \tbucket.n.01_1 bucket.n.01_2 - bucket.n.01\n    \tbowl.n.01_1 bowl.n.01_2 bowl.n.01_3 bowl.n.01_4 - bowl.n.01\n    \tcatsup.n.01_1 - catsup.n.01\n    \tbeverage.n.01_1 beverage.n.01_2 - beverage.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop cup.n.01_1 table.n.02_1) \n        (ontop cup.n.01_2 table.n.02_1) \n        (onfloor bucket.n.01_1 floor.n.01_1) \n        (ontop bowl.n.01_1 table.n.02_1) \n        (ontop bowl.n.01_2 table.n.02_1) \n        (ontop bowl.n.01_3 table.n.02_1) \n        (ontop bowl.n.01_4 table.n.02_1) \n        (ontop catsup.n.01_1 table.n.02_1) \n        (ontop beverage.n.01_1 table.n.02_1) \n        (onfloor beverage.n.01_2 floor.n.01_1) \n        (onfloor bucket.n.01_2 floor.n.01_1) \n        (inroom floor.n.01_1 dining_room) \n        (inroom chair.n.01_1 dining_room) \n        (inroom chair.n.01_2 dining_room) \n        (inroom table.n.02_1 dining_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?cup.n.01 - cup.n.01) \n                (exists \n                    (?bucket.n.01 - bucket.n.01) \n                    (inside ?cup.n.01 ?bucket.n.01)\n                )\n            ) \n            (forall \n                (?bowl.n.01 - bowl.n.01) \n                (exists \n                    (?bucket.n.01 - bucket.n.01) \n                    (inside ?bowl.n.01 ?bucket.n.01)\n                )\n            ) \n            (exists \n                (?bucket.n.01 - bucket.n.01) \n                (inside ?catsup.n.01_1 ?bucket.n.01)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not cup_n_01(x0) or (exists x1. (not bucket_n_01(x1) or inside(x0, x1)))) and forall x0. (not bowl_n_01(x0) or (exists x1. (not bucket_n_01(x1) or inside(x0, x1)))) and exists x0. (not bucket_n_01(x0) or inside(catsup.0, x0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "cup_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cup_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "catsup_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_2"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bowl_3"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bowl_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bucket_1"
        }
      ],
      "transition_model": "(define (problem clearing_the_table_after_dinner)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bowl_n_01_1 bowl_n_01_2 bowl_n_01_4 - bowl_n_01 bucket_n_01_1 bucket_n_01_2 - bucket_n_01 catsup_n_01_1 - catsup_n_01 floor_n_01_1 - floor_n_01 table_n_02_1 - table_n_02)\n    (:init (onfloor bucket_n_01_1 floor_n_01_1) (onfloor bucket_n_01_2 floor_n_01_1) (ontop bowl_n_01_1 table_n_02_1) (ontop bowl_n_01_2 table_n_02_1) (ontop bowl_n_01_4 table_n_02_1) (ontop catsup_n_01_1 table_n_02_1) (same_obj bowl_n_01_1 bowl_n_01_1) (same_obj bowl_n_01_2 bowl_n_01_2) (same_obj bowl_n_01_4 bowl_n_01_4) (same_obj bucket_n_01_1 bucket_n_01_1) (same_obj bucket_n_01_2 bucket_n_01_2) (same_obj catsup_n_01_1 catsup_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (inside bowl_n_01_4 bucket_n_01_1) (inside bowl_n_01_1 bucket_n_01_2) (inside catsup_n_01_1 bucket_n_01_2) (inside bowl_n_01_2 bucket_n_01_1)))\n)",
      "demo": null
    },
    "loading_the_dishwasher_0_Benevolence_1_int_0_2021-10-20_06-10-42": {
      "task_name": "loading_the_dishwasher",
      "natural_description": "Load all plates, bowls, and the mug into the dishwasher.",
      "raw_bddl_goal": "(define (problem loading_the_dishwasher_0)\n    (:domain igibson)\n\n    (:objects\n        plate.n.04_1 plate.n.04_2 plate.n.04_3 - plate.n.04\n       countertop.n.01_1 - countertop.n.01\n        mug.n.04_1 - mug.n.04\n        bowl.n.01_1 bowl.n.01_2 - bowl.n.01\n        dishwasher.n.01_1 - dishwasher.n.01\n        floor.n.01_1 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop plate.n.04_1 countertop.n.01_1) \n        (stained plate.n.04_1) \n        (ontop plate.n.04_2 countertop.n.01_1) \n        (stained plate.n.04_2) \n        (ontop plate.n.04_3 countertop.n.01_1) \n        (stained plate.n.04_3) \n        (ontop mug.n.04_1 countertop.n.01_1) \n        (stained mug.n.04_1) \n        (ontop bowl.n.01_1 countertop.n.01_1) \n        (stained bowl.n.01_1) \n        (ontop bowl.n.01_2 countertop.n.01_1) \n        (stained bowl.n.01_2) \n        (inroom dishwasher.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?plate.n.04 - plate.n.04) \n                (inside ?plate.n.04 ?dishwasher.n.01_1)\n            ) \n            (forall \n                (?bowl.n.01 - bowl.n.01) \n                (inside ?bowl.n.01 ?dishwasher.n.01_1)\n            ) \n            (inside ?mug.n.04_1 ?dishwasher.n.01_1)\n        )\n    )\n)\n",
      "tl_goal": "forall x0. (not plate_n_04(x0) or inside(x0, dishwasher.20)) and forall x0. (not bowl_n_01(x0) or inside(x0, dishwasher.20)) and inside(mug.62, dishwasher.20)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "dishwasher_20"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_59"
        },
        {
          "action": "LEFT_GRASP",
          "object": "plate_61"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_20"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "dishwasher_20"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "plate_60"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bowl_64"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_20"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "dishwasher_20"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bowl_63"
        },
        {
          "action": "LEFT_GRASP",
          "object": "mug_62"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "dishwasher_20"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "dishwasher_20"
        }
      ],
      "transition_model": "(define (problem loading_the_dishwasher)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bowl_n_01_2 - bowl_n_01 countertop_n_01_1 - countertop_n_01 dishwasher_n_01_1 - dishwasher_n_01 plate_n_04_1 plate_n_04_2 plate_n_04_3 - plate_n_04)\n    (:init (ontop bowl_n_01_2 countertop_n_01_1) (ontop plate_n_04_1 countertop_n_01_1) (ontop plate_n_04_2 countertop_n_01_1) (ontop plate_n_04_3 countertop_n_01_1) (same_obj bowl_n_01_2 bowl_n_01_2) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj dishwasher_n_01_1 dishwasher_n_01_1) (same_obj plate_n_04_1 plate_n_04_1) (same_obj plate_n_04_2 plate_n_04_2) (same_obj plate_n_04_3 plate_n_04_3) (stained bowl_n_01_2) (stained plate_n_04_1) (stained plate_n_04_2) (stained plate_n_04_3))\n    (:goal (and (inside bowl_n_01_2 dishwasher_n_01_1) (inside plate_n_04_2 dishwasher_n_01_1) (inside plate_n_04_3 dishwasher_n_01_1) (inside plate_n_04_1 dishwasher_n_01_1)))\n)",
      "demo": null
    },
    "filling_an_Easter_basket_0_Benevolence_1_int_1_2021-09-10_00-09-54": {
      "task_name": "filling_an_Easter_basket",
      "natural_description": "Place eggs, candies, jewelry, balls, bows, and books in the baskets on the countertop.",
      "raw_bddl_goal": "(define (problem filling_an_Easter_basket_0)\n    (:domain igibson)\n\n    (:objects\n     \tbasket.n.01_1 basket.n.01_2 - basket.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \tball.n.01_1 - ball.n.01\n    \tjewelry.n.01_1 - jewelry.n.01\n    \tbook.n.02_1 book.n.02_2 - book.n.02\n    \tcabinet.n.01_1 cabinet.n.01_2 - cabinet.n.01\n    \tbow.n.08_1 bow.n.08_2 - bow.n.08\n    \tegg.n.02_1 egg.n.02_2 - egg.n.02\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tcandy.n.01_1 candy.n.01_2 - candy.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop basket.n.01_1 countertop.n.01_1) \n        (ontop basket.n.01_2 countertop.n.01_1) \n        (ontop ball.n.01_1 countertop.n.01_1) \n        (ontop jewelry.n.01_1 countertop.n.01_1) \n        (inside book.n.02_1 cabinet.n.01_1) \n        (inside book.n.02_2 cabinet.n.01_1) \n        (inside bow.n.08_1 cabinet.n.01_2) \n        (inside bow.n.08_2 cabinet.n.01_2) \n        (inside egg.n.02_1 electric_refrigerator.n.01_1) \n        (cooked egg.n.02_1) \n        (inside egg.n.02_2 electric_refrigerator.n.01_1) \n        (cooked egg.n.02_2) \n        (ontop candy.n.01_1 electric_refrigerator.n.01_1) \n        (ontop candy.n.01_2 electric_refrigerator.n.01_1) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom cabinet.n.01_2 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?basket.n.01 - basket.n.01) \n                (ontop ?basket.n.01 ?countertop.n.01_1)\n            ) \n            (forpairs \n                (?basket.n.01 - basket.n.01) \n                (?egg.n.02 - egg.n.02) \n                (inside ?egg.n.02 ?basket.n.01)\n            ) \n            (forpairs \n                (?basket.n.01 - basket.n.01) \n                (?candy.n.01 - candy.n.01) \n                (inside ?candy.n.01 ?basket.n.01)\n            ) \n            (exists \n                (?basket.n.01 - basket.n.01) \n                (and \n                    (inside ?jewelry.n.01_1 ?basket.n.01) \n                    (inside ?ball.n.01_1 ?basket.n.01)\n                )\n            ) \n            (forpairs \n                (?bow.n.08 - bow.n.08) \n                (?basket.n.01 - basket.n.01) \n                (or \n                    (ontop ?bow.n.08 ?basket.n.01) \n                    (inside ?bow.n.08 ?basket.n.01)\n                )\n            ) \n            (forpairs \n                (?book.n.02 - book.n.02) \n                (?basket.n.01 - basket.n.01) \n                (nextto ?book.n.02 ?basket.n.01)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not basket_n_01(x0) or ontop(x0, countertop.18)) and forall x0. (not basket_n_01(x0) or forn 1. x1. (not egg_n_02(x1) or inside(x1, x0))) and forall x1. (not egg_n_02(x1) or forn 1. x0. (not basket_n_01(x0) or inside(x1, x0))) and forall x0. (not basket_n_01(x0) or forn 1. x1. (not candy_n_01(x1) or inside(x1, x0))) and forall x1. (not candy_n_01(x1) or forn 1. x0. (not basket_n_01(x0) or inside(x1, x0))) and exists x0. (not basket_n_01(x0) or (inside(bracelet.0, x0) and inside(ball.0, x0))) and forall x0. (not bow_n_08(x0) or forn 1. x1. (not basket_n_01(x1) or (ontop(x0, x1) or inside(x0, x1)))) and forall x1. (not basket_n_01(x1) or forn 1. x0. (not bow_n_08(x0) or (ontop(x0, x1) or inside(x0, x1)))) and forall x0. (not book_n_02(x0) or forn 1. x1. (not basket_n_01(x1) or nextto(x0, x1))) and forall x1. (not basket_n_01(x1) or forn 1. x0. (not book_n_02(x0) or nextto(x0, x1)))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "ball_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bracelet_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_15"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_16"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "bow_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bow_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "lollipop_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lollipop_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_1"
        },
        {
          "action": "OPEN",
          "object": "fridge_27"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "egg_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "egg_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "basket_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "basket_1"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "notebook_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "notebook_0"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "basket_0"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "basket_1"
        },
        {
          "action": "CLOSE",
          "object": "fridge_27"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_no_top_15"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_no_top_16"
        }
      ],
      "transition_model": "(define (problem filling_an_Easter_basket)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent basket_n_01_1 basket_n_01_2 - basket_n_01 bow_n_08_2 - bow_n_08 cabinet_n_01_2 - cabinet_n_01 candy_n_01_1 candy_n_01_2 - candy_n_01 countertop_n_01_1 - countertop_n_01 egg_n_02_1 - egg_n_02 electric_refrigerator_n_01_1 - electric_refrigerator_n_01)\n    (:init (cooked egg_n_02_1) (inside bow_n_08_2 cabinet_n_01_2) (inside egg_n_02_1 electric_refrigerator_n_01_1) (ontop basket_n_01_1 countertop_n_01_1) (ontop basket_n_01_2 countertop_n_01_1) (ontop candy_n_01_1 electric_refrigerator_n_01_1) (ontop candy_n_01_2 electric_refrigerator_n_01_1) (same_obj basket_n_01_1 basket_n_01_1) (same_obj basket_n_01_2 basket_n_01_2) (same_obj bow_n_08_2 bow_n_08_2) (same_obj cabinet_n_01_2 cabinet_n_01_2) (same_obj candy_n_01_1 candy_n_01_1) (same_obj candy_n_01_2 candy_n_01_2) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj egg_n_02_1 egg_n_02_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1))\n    (:goal (and (inside egg_n_02_1 basket_n_01_1) (inside candy_n_01_2 basket_n_01_1) (ontop bow_n_08_2 basket_n_01_1) (inside candy_n_01_1 basket_n_01_2)))\n)",
      "demo": null
    },
    "cleaning_the_pool_0_Ihlen_0_int_0_2021-06-01_15-30-31": {
      "task_name": "cleaning_the_pool",
      "natural_description": "Clean the stained pool on the floor using the scrub brush and the detergent, when you are done leave the brush on top of the shelf, and the detergent on the floor.",
      "raw_bddl_goal": "(define (problem cleaning_the_pool_0)\n    (:domain igibson)\n\n    (:objects\n     \tpool.n.01_1 - pool.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n    \tshelf.n.01_1 - shelf.n.01\n    \tdetergent.n.02_1 - detergent.n.02\n        sink.n.01_1 - sink.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor pool.n.01_1 floor.n.01_1) \n        (stained pool.n.01_1) \n        (onfloor scrub_brush.n.01_1 floor.n.01_1) \n        (onfloor detergent.n.02_1 floor.n.01_1) \n        (inroom shelf.n.01_1 garage) \n        (inroom floor.n.01_1 garage) \n        (inroom sink.n.01_1 storage_room)\n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (onfloor ?pool.n.01_1 ?floor.n.01_1) \n            (not \n                (stained ?pool.n.01_1)\n            ) \n            (ontop ?scrub_brush.n.01_1 ?shelf.n.01_1) \n            (onfloor ?detergent.n.02_1 ?floor.n.01_1)\n        )\n    )\n)",
      "tl_goal": "onfloor(pool.50, room_floor_garage.0) and not stained(pool.50) and ontop(scrub_brush.51, shelf.16) and onfloor(detergent.52, room_floor_garage.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_51"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_32"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_32"
        },
        {
          "action": "SOAK",
          "object": "scrub_brush_51"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_32"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "scrub_brush_51"
        },
        {
          "action": "CLEAN",
          "object": "pool_50"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "shelf_16"
        }
      ],
      "transition_model": "(define (problem cleaning_the_pool)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent detergent_n_02_1 - detergent_n_02 floor_n_01_1 - floor_n_01 pool_n_01_1 - pool_n_01 scrub_brush_n_01_1 - scrub_brush_n_01 shelf_n_01_1 - shelf_n_01 sink_n_01_1 - sink_n_01)\n    (:init (onfloor agent_n_01_1 floor_n_01_1) (onfloor detergent_n_02_1 floor_n_01_1) (onfloor pool_n_01_1 floor_n_01_1) (onfloor scrub_brush_n_01_1 floor_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj detergent_n_02_1 detergent_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj pool_n_01_1 pool_n_01_1) (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1) (same_obj shelf_n_01_1 shelf_n_01_1) (same_obj sink_n_01_1 sink_n_01_1) (stained pool_n_01_1))\n    (:goal (and (not (stained pool_n_01_1)) (onfloor pool_n_01_1 floor_n_01_1) (ontop scrub_brush_n_01_1 shelf_n_01_1) (onfloor detergent_n_02_1 floor_n_01_1)))\n)",
      "demo": null
    },
    "opening_packages_0_Benevolence_2_int_0_2021-10-25_21-06-42": {
      "task_name": "opening_packages",
      "natural_description": "Open all packages.",
      "raw_bddl_goal": "(define (problem opening_packages_0)\n    (:domain igibson)\n\n    (:objects\n     \tpackage.n.02_1 package.n.02_2 - package.n.02\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor package.n.02_1 floor.n.01_1) \n        (onfloor package.n.02_2 floor.n.01_1) \n        (not \n            (open package.n.02_1)\n        ) \n        (not \n            (open package.n.02_2)\n        ) \n        (inroom floor.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?package.n.02 - package.n.02) \n                (open ?package.n.02)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not package_n_02(x0) or open(x0))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "package_0"
        },
        {
          "action": "OPEN",
          "object": "package_0"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "package_0"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "package_1"
        },
        {
          "action": "OPEN",
          "object": "package_1"
        },
        {
          "action": "RIGHT_RELEASE",
          "object": "package_1"
        }
      ],
      "transition_model": "(define (problem opening_packages)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 - floor_n_01 package_n_02_1 package_n_02_2 - package_n_02)\n    (:init (not (open package_n_02_1)) (not (open package_n_02_2)) (onfloor package_n_02_1 floor_n_01_1) (onfloor package_n_02_2 floor_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj package_n_02_1 package_n_02_1) (same_obj package_n_02_2 package_n_02_2))\n    (:goal (and (open package_n_02_2) (open package_n_02_1)))\n)",
      "demo": null
    },
    "packing_bags_or_suitcase_0_Merom_1_int_0_2021-10-26_10-04-07": {
      "task_name": "packing_bags_or_suitcase",
      "natural_description": "Pack the backpack with underwear, toothbrush, shampoo, hardback, and toothpaste. Place the backpack on the bed or on the floor.",
      "raw_bddl_goal": "(define (problem packing_bags_or_suitcase_0)\n    (:domain igibson)\n\n    (:objects\n     \tbackpack.n.01_1 - backpack.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \ttoothbrush.n.01_1 - toothbrush.n.01\n    \tbed.n.01_1 - bed.n.01\n    \tshampoo.n.01_1 - shampoo.n.01\n    \thardback.n.01_1 - hardback.n.01\n    \tunderwear.n.01_1 underwear.n.01_2 - underwear.n.01\n    \ttoothpaste.n.01_1 - toothpaste.n.01\n    \tdoor.n.01_1 - door.n.01\n    \twindow.n.01_1 - window.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor backpack.n.01_1 floor.n.01_1) \n        (ontop toothbrush.n.01_1 bed.n.01_1) \n        (ontop shampoo.n.01_1 bed.n.01_1) \n        (ontop hardback.n.01_1 bed.n.01_1) \n        (ontop underwear.n.01_1 bed.n.01_1) \n        (ontop underwear.n.01_2 bed.n.01_1) \n        (ontop toothpaste.n.01_1 bed.n.01_1) \n        (inroom bed.n.01_1 bedroom) \n        (inroom floor.n.01_1 bedroom) \n        (inroom door.n.01_1 bedroom) \n        (inroom window.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?underwear.n.01 - underwear.n.01) \n                (inside ?underwear.n.01 ?backpack.n.01_1)\n            ) \n            (inside ?toothbrush.n.01_1 ?backpack.n.01_1) \n            (inside ?shampoo.n.01_1 ?backpack.n.01_1) \n            (inside ?hardback.n.01_1 ?backpack.n.01_1) \n            (inside ?toothpaste.n.01_1 ?backpack.n.01_1) \n            (or \n                (ontop ?backpack.n.01_1 ?bed.n.01_1) \n                (onfloor ?backpack.n.01_1 ?floor.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not underwear_n_01(x0) or inside(x0, backpack.97)) and inside(toothbrush.98, backpack.97) and inside(shampoo.99, backpack.97) and inside(hardback.100, backpack.97) and inside(toothpaste.103, backpack.97) and ontop(backpack.97, bed.7) or onfloor(backpack.97, room_floor_bedroom.0)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "backpack_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hardback_100"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "shampoo_99"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "underwear_101"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "toothbrush_98"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "underwear_102"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "toothpaste_103"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "backpack_97"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "backpack_97"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "room_floor_bedroom_0"
        }
      ],
      "transition_model": "(define (problem packing_bags_or_suitcase)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent backpack_n_01_1 - backpack_n_01 bed_n_01_1 - bed_n_01 floor_n_01_1 - floor_n_01 hardback_n_01_1 - hardback_n_01 shampoo_n_01_1 - shampoo_n_01 underwear_n_01_1 - underwear_n_01)\n    (:init (onfloor agent_n_01_1 floor_n_01_1) (onfloor backpack_n_01_1 floor_n_01_1) (ontop hardback_n_01_1 bed_n_01_1) (ontop shampoo_n_01_1 bed_n_01_1) (ontop underwear_n_01_1 bed_n_01_1) (same_obj agent_n_01_1 agent_n_01_1) (same_obj backpack_n_01_1 backpack_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj hardback_n_01_1 hardback_n_01_1) (same_obj shampoo_n_01_1 shampoo_n_01_1) (same_obj underwear_n_01_1 underwear_n_01_1))\n    (:goal (and (onfloor backpack_n_01_1 floor_n_01_1) (inside shampoo_n_01_1 backpack_n_01_1) (inside underwear_n_01_1 backpack_n_01_1) (inside hardback_n_01_1 backpack_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_up_refrigerator_0_Wainscott_0_int_1_2021-06-23_17-46-01": {
      "task_name": "cleaning_up_refrigerator",
      "natural_description": "Use the rag and soap to clean the trays, the bowl, and the refrigerator. When you are done, leave the rag and bowl next to the sink, the soap in the sink, and the trays in the refrigerator.",
      "raw_bddl_goal": "(define (problem cleaning_up_refrigerator_0)\n    (:domain igibson)\n\n    (:objects\n     \trag.n.01_1 rag.n.01_2 - rag.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tsoap.n.01_1 - soap.n.01\n    \tcountertop.n.01_1 - countertop.n.01\n    \ttray.n.01_1 tray.n.01_2 - tray.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tbowl.n.01_1 - bowl.n.01\n    \tsink.n.01_1 - sink.n.01\n            agent.n.01_1 - agent.n.01\n            floor.n.01_1 - floor.n.01\n    )\n    \n    (:init \n        (inside rag.n.01_1 cabinet.n.01_1) \n        (inside rag.n.01_2 cabinet.n.01_1) \n        (ontop soap.n.01_1 countertop.n.01_1) \n        (inside tray.n.01_1 electric_refrigerator.n.01_1) \n        (inside tray.n.01_2 electric_refrigerator.n.01_1) \n        (inside bowl.n.01_1 electric_refrigerator.n.01_1) \n        (not \n            (soaked rag.n.01_1)\n        ) \n        (not \n            (soaked rag.n.01_2)\n        ) \n        (stained tray.n.01_1) \n        (stained tray.n.01_2) \n        (dusty bowl.n.01_1) \n        (stained electric_refrigerator.n.01_1) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom sink.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?rag.n.01 - rag.n.01) \n                (nextto ?rag.n.01 ?sink.n.01_1)\n            ) \n            (inside ?soap.n.01_1 ?sink.n.01_1) \n            (forall \n                (?tray.n.01 - tray.n.01) \n                (inside ?tray.n.01 ?electric_refrigerator.n.01_1)\n            ) \n            (not \n                (stained ?tray.n.01_1)\n            ) \n            (not \n                (stained ?tray.n.01_2)\n            ) \n            (nextto ?bowl.n.01_1 ?sink.n.01_1) \n            (not \n                (dusty ?bowl.n.01_1)\n            ) \n            (not \n                (stained ?electric_refrigerator.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not rag_n_01(x0) or nextto(x0, sink.82)) and inside(soap.0, sink.82) and forall x0. (not tray_n_01(x0) or inside(x0, fridge.97)) and not stained(tray.0) and not stained(tray.1) and nextto(bowl.0, sink.82) and not dusty(bowl.0) and not stained(fridge.97)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "soap_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_82"
        },
        {
          "action": "TOGGLE_ON",
          "object": "sink_82"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "rag_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "sink_82"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "sink_82"
        },
        {
          "action": "SOAK",
          "object": "rag_1"
        },
        {
          "action": "SOAK",
          "object": "rag_0"
        },
        {
          "action": "TOGGLE_OFF",
          "object": "sink_82"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "OPEN",
          "object": "fridge_97"
        },
        {
          "action": "CLEAN",
          "object": "tray_1"
        },
        {
          "action": "CLEAN",
          "object": "tray_0"
        },
        {
          "action": "CLEAN",
          "object": "bowl_0"
        },
        {
          "action": "CLEAN",
          "object": "fridge_97"
        },
        {
          "action": "LEFT_GRASP",
          "object": "bowl_0"
        },
        {
          "action": "LEFT_PLACE_NEXTTO",
          "object": "sink_82"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_82"
        },
        {
          "action": "CLOSE",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_1"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "sink_82"
        }
      ],
      "transition_model": "(define (problem cleaning_up_refrigerator)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent bowl_n_01_1 - bowl_n_01 cabinet_n_01_1 - cabinet_n_01 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 rag_n_01_1 rag_n_01_2 - rag_n_01 sink_n_01_1 - sink_n_01 soap_n_01_1 - soap_n_01 tray_n_01_1 tray_n_01_2 - tray_n_01)\n    (:init (inside bowl_n_01_1 electric_refrigerator_n_01_1) (inside rag_n_01_1 cabinet_n_01_1) (inside rag_n_01_2 cabinet_n_01_1) (inside tray_n_01_1 electric_refrigerator_n_01_1) (inside tray_n_01_2 electric_refrigerator_n_01_1) (not (soaked rag_n_01_1)) (not (soaked rag_n_01_2)) (ontop soap_n_01_1 countertop_n_01_1) (same_obj bowl_n_01_1 bowl_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj rag_n_01_2 rag_n_01_2) (same_obj sink_n_01_1 sink_n_01_1) (same_obj soap_n_01_1 soap_n_01_1) (same_obj tray_n_01_1 tray_n_01_1) (same_obj tray_n_01_2 tray_n_01_2) (stained electric_refrigerator_n_01_1) (stained tray_n_01_1))\n    (:goal (and (inside tray_n_01_1 electric_refrigerator_n_01_1) (inside soap_n_01_1 sink_n_01_1) (nextto rag_n_01_2 sink_n_01_1) (not (stained electric_refrigerator_n_01_1))))\n)",
      "demo": null
    },
    "making_tea_0_Wainscott_0_int_0_2021-10-26_12-49-48": {
      "task_name": "making_tea",
      "natural_description": "Slice the lemon, heat the tea on the stove.",
      "raw_bddl_goal": "(define (problem making_tea_0)\n    (:domain igibson)\n\n    (:objects \n        teapot.n.01_1 - teapot.n.01\n        tea_bag.n.01_1 - tea_bag.n.01\n        lemon.n.01_1 - lemon.n.01\n        knife.n.01_1 - knife.n.01\n        cabinet.n.01_1 - cabinet.n.01\n        electric_refrigerator.n.01_1 - electric_refrigerator.n.01\n        stove.n.01_1 - stove.n.01\n        floor.n.01_1 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (inside teapot.n.01_1 cabinet.n.01_1) \n        (inside tea_bag.n.01_1 cabinet.n.01_1) \n        (inside lemon.n.01_1 electric_refrigerator.n.01_1) \n        (inside knife.n.01_1 cabinet.n.01_1) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom stove.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (sliced ?lemon.n.01_1) \n            (ontop ?teapot.n.01_1 ?stove.n.01_1) \n            (inside ?tea_bag.n.01_1 ?teapot.n.01_1) \n            (soaked ?tea_bag.n.01_1) \n            (toggled_on ?stove.n.01_1)\n        )\n    )\n)\n",
      "tl_goal": "sliced(lemon.0) and ontop(teapot.0, stove.88) and inside(tea_bag.0, teapot.0) and soaked(tea_bag.0) and toggledon(stove.88)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_80"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "teapot_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "tea_bag_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "teapot_0"
        },
        {
          "action": "SOAK",
          "object": "tea_bag_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "stove_88"
        },
        {
          "action": "TOGGLE_ON",
          "object": "stove_88"
        },
        {
          "action": "OPEN",
          "object": "fridge_97"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "lemon_0"
        },
        {
          "action": "UNFREEZE",
          "object": "carving_knife_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "carving_knife_0"
        },
        {
          "action": "SLICE",
          "object": "lemon_0"
        },
        {
          "action": "CLOSE",
          "object": "fridge_97"
        }
      ],
      "transition_model": "(define (problem making_tea)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent cabinet_n_01_1 - cabinet_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 knife_n_01_1 - knife_n_01 lemon_n_01_1 - lemon_n_01 stove_n_01_1 - stove_n_01 tea_bag_n_01_1 - tea_bag_n_01 teapot_n_01_1 - teapot_n_01)\n    (:init (inside knife_n_01_1 cabinet_n_01_1) (inside lemon_n_01_1 electric_refrigerator_n_01_1) (inside tea_bag_n_01_1 cabinet_n_01_1) (inside teapot_n_01_1 cabinet_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj knife_n_01_1 knife_n_01_1) (same_obj lemon_n_01_1 lemon_n_01_1) (same_obj stove_n_01_1 stove_n_01_1) (same_obj tea_bag_n_01_1 tea_bag_n_01_1) (same_obj teapot_n_01_1 teapot_n_01_1))\n    (:goal (and (ontop teapot_n_01_1 stove_n_01_1) (soaked tea_bag_n_01_1) (sliced lemon_n_01_1) (toggled_on stove_n_01_1)))\n)",
      "demo": null
    },
    "picking_up_trash_0_Beechwood_0_int_1_2021-10-26_14-06-49": {
      "task_name": "picking_up_trash",
      "natural_description": "Pick up all pads and pops and put them inside the ashcan.",
      "raw_bddl_goal": "(define (problem picking_up_trash_0)\n    (:domain igibson)\n\n    (:objects\n        ashcan.n.01_1 - ashcan.n.01\n        pad.n.01_1 pad.n.01_2 pad.n.01_3 - pad.n.01\n        pop.n.02_1 pop.n.02_2 - pop.n.02\n        floor.n.01_1 floor.n.01_2 - floor.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor ashcan.n.01_1 floor.n.01_2) \n        (onfloor pad.n.01_1 floor.n.01_2) \n        (onfloor pad.n.01_2 floor.n.01_2) \n        (onfloor pad.n.01_3 floor.n.01_1) \n        (onfloor pop.n.02_1 floor.n.01_1) \n        (onfloor pop.n.02_2 floor.n.01_1) \n        (inroom floor.n.01_2 kitchen) \n        (inroom floor.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_2)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?pad.n.01 - pad.n.01) \n                (inside ?pad.n.01 ?ashcan.n.01_1)\n            ) \n            (forall \n                (?pop.n.02 - pop.n.02) \n                (inside ?pop.n.02 ?ashcan.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "forall x0. (not pad_n_01(x0) or inside(x0, trash_can.116)) and forall x0. (not pop_n_02(x0) or inside(x0, trash_can.116))",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "sticky_note_118"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sticky_note_117"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "trash_can_116"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "trash_can_116"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pop_121"
        },
        {
          "action": "LEFT_GRASP",
          "object": "sticky_note_119"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "trash_can_116"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "trash_can_116"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pop_120"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "trash_can_116"
        }
      ],
      "transition_model": "(define (problem picking_up_trash)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent ashcan_n_01_1 - ashcan_n_01 floor_n_01_1 floor_n_01_2 - floor_n_01 pad_n_01_1 pad_n_01_3 - pad_n_01 pop_n_02_1 pop_n_02_2 - pop_n_02)\n    (:init (onfloor ashcan_n_01_1 floor_n_01_2) (onfloor pad_n_01_1 floor_n_01_2) (onfloor pad_n_01_3 floor_n_01_1) (onfloor pop_n_02_1 floor_n_01_1) (onfloor pop_n_02_2 floor_n_01_1) (same_obj ashcan_n_01_1 ashcan_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj floor_n_01_2 floor_n_01_2) (same_obj pad_n_01_1 pad_n_01_1) (same_obj pad_n_01_3 pad_n_01_3) (same_obj pop_n_02_1 pop_n_02_1) (same_obj pop_n_02_2 pop_n_02_2))\n    (:goal (and (inside pad_n_01_3 ashcan_n_01_1) (inside pop_n_02_2 ashcan_n_01_1) (inside pop_n_02_1 ashcan_n_01_1) (inside pad_n_01_1 ashcan_n_01_1)))\n)",
      "demo": null
    },
    "polishing_furniture_0_Ihlen_0_int_0_2021-10-26_11-35-40": {
      "task_name": "polishing_furniture",
      "natural_description": "Polish the table and the shelf, and place the rag under the table.",
      "raw_bddl_goal": "(define (problem polishing_furniture_0)\n    (:domain igibson)\n\n    (:objects\n     \tshelf.n.01_1 - shelf.n.01\n    \ttable.n.02_1 - table.n.02\n    \trag.n.01_1 - rag.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (dusty shelf.n.01_1) \n        (dusty table.n.02_1) \n        (ontop rag.n.01_1 table.n.02_1) \n        (inroom table.n.02_1 living_room) \n        (inroom shelf.n.01_1 living_room) \n        (inroom floor.n.01_1 living_room) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (not \n                (dusty ?table.n.02_1)\n            ) \n            (not \n                (dusty ?shelf.n.01_1)\n            ) \n            (under ?rag.n.01_1 ?table.n.02_1)\n        )\n    )\n)",
      "tl_goal": "not dusty(coffee_table.10) and not dusty(shelf.11) and under(rag.0, coffee_table.10)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "rag_0"
        },
        {
          "action": "CLEAN",
          "object": "coffee_table_10"
        },
        {
          "action": "CLEAN",
          "object": "shelf_11"
        },
        {
          "action": "RIGHT_PLACE_UNDER",
          "object": "coffee_table_10"
        }
      ],
      "transition_model": "(define (problem polishing_furniture)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent rag_n_01_1 - rag_n_01 shelf_n_01_1 - shelf_n_01 table_n_02_1 - table_n_02)\n    (:init (dusty shelf_n_01_1) (dusty table_n_02_1) (ontop rag_n_01_1 table_n_02_1) (same_obj rag_n_01_1 rag_n_01_1) (same_obj shelf_n_01_1 shelf_n_01_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (under rag_n_01_1 table_n_02_1) (not (dusty table_n_02_1)) (not (dusty shelf_n_01_1))))\n)",
      "demo": null
    },
    "organizing_school_stuff_0_Wainscott_1_int_0_2021-08-24_22-56-24": {
      "task_name": "organizing_school_stuff",
      "natural_description": "Place the folder, highlighter, pencil, pen, and calculator into the backpack, then leave the backpack on the bed.",
      "raw_bddl_goal": "(define (problem organizing_school_stuff_0)\n    (:domain igibson)\n\n    (:objects\n     \thighlighter.n.02_1 - highlighter.n.02\n    \tbed.n.01_1 - bed.n.01\n    \tpencil.n.01_1 - pencil.n.01\n    \tpen.n.01_1 - pen.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tcalculator.n.02_1 - calculator.n.02\n    \tbook.n.02_1 - book.n.02\n    \tfolder.n.02_1 - folder.n.02\n        table.n.02_1 - table.n.02\n    \tbackpack.n.01_1 - backpack.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop highlighter.n.02_1 bed.n.01_1) \n        (ontop pencil.n.01_1 bed.n.01_1) \n        (onfloor pen.n.01_1 floor.n.01_1) \n        (onfloor calculator.n.02_1 floor.n.01_1) \n        (ontop book.n.02_1 bed.n.01_1) \n        (ontop folder.n.02_1 bed.n.01_1) \n        (onfloor backpack.n.01_1 floor.n.01_1) \n        (inroom floor.n.01_1 bedroom) \n        (inroom bed.n.01_1 bedroom) \n        (inroom table.n.02_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (and \n                (nextto ?folder.n.02_1 ?book.n.02_1) \n                (nextto ?folder.n.02_1 ?backpack.n.01_1) \n                (nextto ?book.n.02_1 ?backpack.n.01_1)\n            ) \n            (inside ?highlighter.n.02_1 ?backpack.n.01_1) \n            (inside ?pencil.n.01_1 ?backpack.n.01_1) \n            (inside ?pen.n.01_1 ?backpack.n.01_1) \n            (inside ?calculator.n.02_1 ?backpack.n.01_1) \n            (ontop ?backpack.n.01_1 ?bed.n.01_1)\n        )\n    )\n)",
      "tl_goal": "nextto(folder.107, hardback.106) and nextto(folder.107, backpack.108) and nextto(hardback.106, backpack.108) and inside(highlighter.102, backpack.108) and inside(pencil.103, backpack.108) and inside(pen.104, backpack.108) and inside(calculator.105, backpack.108) and ontop(backpack.108, bed.58)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "backpack_108"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "backpack_108"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "bed_58"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pencil_103"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_108"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pen_104"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_108"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "calculator_105"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_108"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "folder_107"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "backpack_108"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hardback_106"
        },
        {
          "action": "RIGHT_PLACE_NEXTTO",
          "object": "backpack_108"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "highlighter_102"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "backpack_108"
        }
      ],
      "transition_model": "(define (problem organizing_school_stuff)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent backpack_n_01_1 - backpack_n_01 bed_n_01_1 - bed_n_01 book_n_02_1 - book_n_02 floor_n_01_1 - floor_n_01 folder_n_02_1 - folder_n_02 highlighter_n_02_1 - highlighter_n_02 pen_n_01_1 - pen_n_01 pencil_n_01_1 - pencil_n_01)\n    (:init (onfloor backpack_n_01_1 floor_n_01_1) (onfloor pen_n_01_1 floor_n_01_1) (ontop book_n_02_1 bed_n_01_1) (ontop folder_n_02_1 bed_n_01_1) (ontop highlighter_n_02_1 bed_n_01_1) (ontop pencil_n_01_1 bed_n_01_1) (same_obj backpack_n_01_1 backpack_n_01_1) (same_obj bed_n_01_1 bed_n_01_1) (same_obj book_n_02_1 book_n_02_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj folder_n_02_1 folder_n_02_1) (same_obj highlighter_n_02_1 highlighter_n_02_1) (same_obj pen_n_01_1 pen_n_01_1) (same_obj pencil_n_01_1 pencil_n_01_1))\n    (:goal (and (nextto book_n_02_1 backpack_n_01_1) (nextto folder_n_02_1 backpack_n_01_1) (inside pen_n_01_1 backpack_n_01_1) (ontop backpack_n_01_1 bed_n_01_1)))\n)",
      "demo": null
    },
    "cleaning_cupboards_0_Wainscott_1_int_1_2021-08-25_16-40-44": {
      "task_name": "cleaning_cupboards",
      "natural_description": "Clean dusty cabinets, remove all books from the cabinets, put the screwdriver in the bin, put all markers and pens in the bucket.",
      "raw_bddl_goal": "(define (problem cleaning_cupboards_0)\n    (:domain igibson)\n\n    (:objects\n     \tbook.n.02_1 book.n.02_2 book.n.02_3 - book.n.02\n    \tcabinet.n.01_1 cabinet.n.01_2 cabinet.n.01_3 - cabinet.n.01\n    \tpen.n.01_1 - pen.n.01\n    \tmarker.n.03_1 marker.n.03_2 - marker.n.03\n    \tscrewdriver.n.01_1 - screwdriver.n.01\n    \tscrub_brush.n.01_1 - scrub_brush.n.01\n    \trag.n.01_1 - rag.n.01\n    \tcleansing_agent.n.01_1 - cleansing_agent.n.01\n    \tbin.n.01_1 - bin.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tbucket.n.01_1 - bucket.n.01\n        bed.n.01_1 - bed.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (inside book.n.02_1 cabinet.n.01_1) \n        (inside book.n.02_2 cabinet.n.01_2) \n        (inside book.n.02_3 cabinet.n.01_2) \n        (inside pen.n.01_1 cabinet.n.01_1) \n        (inside marker.n.03_1 cabinet.n.01_2) \n        (inside marker.n.03_2 cabinet.n.01_2) \n        (inside screwdriver.n.01_1 cabinet.n.01_3) \n        (inside scrub_brush.n.01_1 cabinet.n.01_1) \n        (inside rag.n.01_1 cabinet.n.01_1) \n        (ontop cleansing_agent.n.01_1 bed.n.01_1) \n        (onfloor bin.n.01_1 floor.n.01_1) \n        (ontop bucket.n.01_1 bed.n.01_1) \n        (dusty cabinet.n.01_1) \n        (dusty cabinet.n.01_2) \n        (inroom cabinet.n.01_1 bedroom) \n        (inroom cabinet.n.01_2 bedroom) \n        (inroom cabinet.n.01_3 bedroom) \n        (inroom floor.n.01_1 bedroom) \n        (inroom bed.n.01_1 bedroom) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (forall \n                (?cabinet.n.01 - cabinet.n.01) \n                (not \n                    (dusty ?cabinet.n.01)\n                )\n            ) \n            (forall \n                (?book.n.02 - book.n.02) \n                (forall \n                    (?cabinet.n.01 - cabinet.n.01) \n                    (not \n                        (inside ?book.n.02 ?cabinet.n.01)\n                    )\n                )\n            )  \n            (inside ?screwdriver.n.01_1 ?bin.n.01_1) \n            (forall \n                (?marker.n.03 - marker.n.03) \n                (inside ?marker.n.03 ?bucket.n.01_1)\n            ) \n            (inside ?pen.n.01_1 ?bucket.n.01_1)\n        )\n    )\n)",
      "tl_goal": "forall x0. (not cabinet_n_01(x0) or (not dusty(x0))) and forall x0. (not book_n_02(x0) or (forall x1. (not cabinet_n_01(x1) or (not inside(x0, x1))))) and inside(screwdriver.108, trash_can.112) and forall x0. (not marker_n_03(x0) or inside(x0, bucket.113)) and inside(pen.105, bucket.113)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_28"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_25"
        },
        {
          "action": "OPEN",
          "object": "bottom_cabinet_24"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pen_105"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_113"
        },
        {
          "action": "LEFT_GRASP",
          "object": "highlighter_106"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_113"
        },
        {
          "action": "LEFT_GRASP",
          "object": "highlighter_107"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bucket_113"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "rag_110"
        },
        {
          "action": "CLEAN",
          "object": "bottom_cabinet_25"
        },
        {
          "action": "CLEAN",
          "object": "bottom_cabinet_28"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "bed_58"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "hardback_104"
        },
        {
          "action": "LEFT_GRASP",
          "object": "notebook_102"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "bed_58"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "hardback_104"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hardback_103"
        },
        {
          "action": "LEFT_PLACE_ONTOP",
          "object": "notebook_102"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "screwdriver_108"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "trash_can_112"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_24"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_28"
        },
        {
          "action": "CLOSE",
          "object": "bottom_cabinet_25"
        }
      ],
      "transition_model": "(define (problem cleaning_cupboards)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent \n    bed_n_01_1 - bed_n_01 \n    book_n_02_1 book_n_02_2 - book_n_02 \n    bucket_n_01_1 - bucket_n_01 \n    cabinet_n_01_1 cabinet_n_01_2 cabinet_n_01_3 - cabinet_n_01 \n    pen_n_01_1 - pen_n_01 \n    rag_n_01_1 - rag_n_01 \n    screwdriver_n_01_1 - screwdriver_n_01 \n    scrub_brush_n_01_1 - scrub_brush_n_01)\n    (:init (dusty cabinet_n_01_2) \n    (inside book_n_02_1 cabinet_n_01_1) \n    (inside book_n_02_2 cabinet_n_01_2) \n    (inside pen_n_01_1 cabinet_n_01_1) \n    (inside rag_n_01_1 cabinet_n_01_1) \n    (inside scrub_brush_n_01_1 cabinet_n_01_1) \n    (ontop bucket_n_01_1 bed_n_01_1)\n    (same_obj bed_n_01_1 bed_n_01_1) \n    (same_obj book_n_02_1 book_n_02_1) \n    (same_obj book_n_02_2 book_n_02_2) \n    (same_obj bucket_n_01_1 bucket_n_01_1) \n    (same_obj cabinet_n_01_1 cabinet_n_01_1) \n    (same_obj cabinet_n_01_2 cabinet_n_01_2) \n    (same_obj cabinet_n_01_3 cabinet_n_01_3) \n    (same_obj pen_n_01_1 pen_n_01_1) \n    (same_obj rag_n_01_1 rag_n_01_1)\n    (same_obj screwdriver_n_01_1 screwdriver_n_01_1)\n    (same_obj scrub_brush_n_01_1 scrub_brush_n_01_1))\n    (:goal (and \n    (inside pen_n_01_1 bucket_n_01_1) \n    (not (dusty cabinet_n_01_2)) \n    (not (inside book_n_02_1 cabinet_n_01_2)) \n    (not (inside book_n_02_2 cabinet_n_01_3))))\n)",
      "demo": null
    },
    "installing_a_printer_0_Pomaria_0_int_0_2021-06-08_18-33-07": {
      "task_name": "installing_a_printer",
      "natural_description": "Place the printer on the table and turn it on.",
      "raw_bddl_goal": "(define (problem installing_a_printer_0)\n    (:domain igibson)\n\n    (:objects\n     \tprinter.n.03_1 - printer.n.03\n    \tfloor.n.01_1 - floor.n.01\n    \ttable.n.02_1 - table.n.02\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor printer.n.03_1 floor.n.01_1) \n        (not \n            (toggled_on printer.n.03_1)\n        ) \n        (inroom table.n.02_1 home_office) \n        (inroom floor.n.01_1 home_office) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (ontop ?printer.n.03_1 ?table.n.02_1) \n            (toggled_on ?printer.n.03_1)\n        )\n    )\n)",
      "tl_goal": "ontop(printer.0, breakfast_table.3) and toggledon(printer.0)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "printer_0"
        },
        {
          "action": "RIGHT_PLACE_ONTOP",
          "object": "breakfast_table_3"
        },
        {
          "action": "TOGGLE_ON",
          "object": "printer_0"
        }
      ],
      "transition_model": "(define (problem installing_a_printer)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent floor_n_01_1 - floor_n_01 printer_n_03_1 - printer_n_03 table_n_02_1 - table_n_02)\n    (:init (not (toggled_on printer_n_03_1)) (onfloor printer_n_03_1 floor_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj printer_n_03_1 printer_n_03_1) (same_obj table_n_02_1 table_n_02_1))\n    (:goal (and (ontop printer_n_03_1 table_n_02_1) (toggled_on printer_n_03_1)))\n)",
      "demo": null
    },
    "packing_food_for_work_0_Ihlen_1_int_0_2021-06-08_19-36-15": {
      "task_name": "packing_food_for_work",
      "natural_description": "Pack a sandwich, an apple, a snack food, and a juice into a carton, and place the carton on the floor or on the countertop.",
      "raw_bddl_goal": "(define (problem packing_food_for_work_0)\n    (:domain igibson)\n\n    (:objects\n        carton.n.02_1 - carton.n.02\n        countertop.n.01_1 - countertop.n.01\n        sandwich.n.01_1 - sandwich.n.01\n        electric_refrigerator.n.01_1 - electric_refrigerator.n.01\n        apple.n.01_1 - apple.n.01\n        snack_food.n.01_1 - snack_food.n.01\n        cabinet.n.01_1 - cabinet.n.01\n        juice.n.01_1 - juice.n.01\n        floor.n.01_1 - floor.n.01\n        door.n.01_1 - door.n.01\n        agent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (onfloor carton.n.02_1 floor.n.01_1) \n        (inside sandwich.n.01_1 electric_refrigerator.n.01_1) \n        (ontop apple.n.01_1 countertop.n.01_1) \n        (inside snack_food.n.01_1 cabinet.n.01_1) \n        (ontop juice.n.01_1 countertop.n.01_1) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (inroom door.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (inside ?sandwich.n.01_1 ?carton.n.02_1) \n            (inside ?apple.n.01_1 ?carton.n.02_1) \n            (inside ?snack_food.n.01_1 ?carton.n.02_1) \n            (inside ?juice.n.01_1 ?carton.n.02_1) \n            (or \n                (onfloor ?carton.n.02_1 ?floor.n.01_1) \n                (ontop ?carton.n.02_1 ?countertop.n.01_1)\n            )\n        )\n    )\n)",
      "tl_goal": "inside(hamburger.0, carton.0) and inside(apple.0, carton.0) and inside(hamburger.1, carton.0) and inside(juice.0, carton.0) and onfloor(carton.0, room_floor_kitchen.0) or ontop(carton.0, countertop.81)",
      "action_trajectory": [
        {
          "action": "RIGHT_GRASP",
          "object": "apple_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "OPEN",
          "object": "fridge_61"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hamburger_0"
        },
        {
          "action": "UNFREEZE",
          "object": "hamburger_0"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "OPEN",
          "object": "top_cabinet_62"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "juice_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "hamburger_1"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "carton_0"
        },
        {
          "action": "CLOSE",
          "object": "fridge_61"
        }
      ],
      "transition_model": "(define (problem packing_food_for_work)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent apple_n_01_1 - apple_n_01 cabinet_n_01_1 - cabinet_n_01 carton_n_02_1 - carton_n_02 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 floor_n_01_1 - floor_n_01 juice_n_01_1 - juice_n_01 sandwich_n_01_1 - sandwich_n_01 snack_food_n_01_1 - snack_food_n_01)\n    (:init (inside sandwich_n_01_1 electric_refrigerator_n_01_1) (inside snack_food_n_01_1 cabinet_n_01_1) (onfloor carton_n_02_1 floor_n_01_1) (ontop apple_n_01_1 countertop_n_01_1) (ontop juice_n_01_1 countertop_n_01_1) (same_obj apple_n_01_1 apple_n_01_1) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj carton_n_02_1 carton_n_02_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj floor_n_01_1 floor_n_01_1) (same_obj juice_n_01_1 juice_n_01_1) (same_obj sandwich_n_01_1 sandwich_n_01_1) (same_obj snack_food_n_01_1 snack_food_n_01_1))\n    (:goal (and (inside snack_food_n_01_1 carton_n_02_1) (inside sandwich_n_01_1 carton_n_02_1) (ontop carton_n_02_1 countertop_n_01_1) (inside apple_n_01_1 carton_n_02_1)))\n)",
      "demo": null
    },
    "storing_the_groceries_0_Beechwood_0_int_0_2021-10-26_13-13-47": {
      "task_name": "storing_the_groceries",
      "natural_description": "Store the groceries into the fridge and the cabinet based on your common sense. Place groceries of the same type next to each other.",
      "raw_bddl_goal": "(define (problem storing_the_groceries_0)\n    (:domain igibson)\n\n    (:objects\n     \tcereal.n.03_1 cereal.n.03_2 - cereal.n.03\n    \tcountertop.n.01_1 - countertop.n.01\n    \tlettuce.n.03_1 lettuce.n.03_2 - lettuce.n.03\n    \tbroccoli.n.02_1 broccoli.n.02_2 - broccoli.n.02\n    \traspberry.n.02_1 raspberry.n.02_2 - raspberry.n.02\n    \tpork.n.01_1 pork.n.01_2 - pork.n.01\n    \telectric_refrigerator.n.01_1 - electric_refrigerator.n.01\n    \tcabinet.n.01_1 - cabinet.n.01\n    \tfloor.n.01_1 - floor.n.01\n    \tagent.n.01_1 - agent.n.01\n    )\n    \n    (:init \n        (ontop cereal.n.03_1 countertop.n.01_1) \n        (ontop cereal.n.03_2 countertop.n.01_1) \n        (ontop lettuce.n.03_1 countertop.n.01_1) \n        (ontop lettuce.n.03_2 countertop.n.01_1) \n        (ontop broccoli.n.02_1 countertop.n.01_1) \n        (ontop broccoli.n.02_2 countertop.n.01_1) \n        (ontop raspberry.n.02_1 countertop.n.01_1) \n        (ontop raspberry.n.02_2 countertop.n.01_1) \n        (ontop pork.n.01_1 countertop.n.01_1) \n        (ontop pork.n.01_2 countertop.n.01_1) \n        (inroom electric_refrigerator.n.01_1 kitchen) \n        (inroom countertop.n.01_1 kitchen) \n        (inroom cabinet.n.01_1 kitchen) \n        (inroom floor.n.01_1 kitchen) \n        (onfloor agent.n.01_1 floor.n.01_1)\n    )\n    \n    (:goal \n        (and \n            (inside ?cereal.n.03_1 ?cabinet.n.01_1) \n            (inside ?cereal.n.03_2 ?cabinet.n.01_1) \n            (nextto ?cereal.n.03_1 ?cereal.n.03_2) \n            (inside ?lettuce.n.03_1 ?electric_refrigerator.n.01_1) \n            (inside ?lettuce.n.03_2 ?electric_refrigerator.n.01_1) \n            (nextto ?lettuce.n.03_1 ?lettuce.n.03_2) \n            (inside ?broccoli.n.02_1 ?electric_refrigerator.n.01_1) \n            (inside ?broccoli.n.02_2 ?electric_refrigerator.n.01_1) \n            (nextto ?broccoli.n.02_1 ?broccoli.n.02_2) \n            (inside ?raspberry.n.02_1 ?electric_refrigerator.n.01_1) \n            (inside ?raspberry.n.02_2 ?electric_refrigerator.n.01_1) \n            (nextto ?raspberry.n.02_1 ?raspberry.n.02_2) \n            (inside ?pork.n.01_1 ?electric_refrigerator.n.01_1) \n            (inside ?pork.n.01_2 ?electric_refrigerator.n.01_1) \n            (nextto ?pork.n.01_1 ?pork.n.01_2)\n        )\n    )\n)",
      "tl_goal": "inside(cereal.0, bottom_cabinet_no_top.54) and inside(cereal.1, bottom_cabinet_no_top.54) and nextto(cereal.0, cereal.1) and inside(lettuce.0, fridge.57) and inside(lettuce.1, fridge.57) and nextto(lettuce.0, lettuce.1) and inside(broccoli.0, fridge.57) and inside(broccoli.1, fridge.57) and nextto(broccoli.0, broccoli.1) and inside(raspberry.0, fridge.57) and inside(raspberry.1, fridge.57) and nextto(raspberry.0, raspberry.1) and inside(pork.0, fridge.57) and inside(pork.1, fridge.57) and nextto(pork.0, pork.1)",
      "action_trajectory": [
        {
          "action": "OPEN",
          "object": "bottom_cabinet_no_top_54"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "cereal_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "cereal_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_54"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "bottom_cabinet_no_top_54"
        },
        {
          "action": "OPEN",
          "object": "fridge_57"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "lettuce_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "lettuce_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_57"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_57"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "pork_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "pork_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_57"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_57"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "broccoli_1"
        },
        {
          "action": "LEFT_GRASP",
          "object": "broccoli_0"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_57"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_57"
        },
        {
          "action": "RIGHT_GRASP",
          "object": "raspberry_0"
        },
        {
          "action": "LEFT_GRASP",
          "object": "raspberry_1"
        },
        {
          "action": "RIGHT_PLACE_INSIDE",
          "object": "fridge_57"
        },
        {
          "action": "LEFT_PLACE_INSIDE",
          "object": "fridge_57"
        },
        {
          "action": "CLOSE",
          "object": "fridge_57"
        }
      ],
      "transition_model": "(define (problem storing_the_groceries)\n    (:domain igibson)\n    (:objects agent_n_01_1 - agent broccoli_n_02_1 broccoli_n_02_2 - broccoli_n_02 cabinet_n_01_1 - cabinet_n_01 cereal_n_03_1 - cereal_n_03 countertop_n_01_1 - countertop_n_01 electric_refrigerator_n_01_1 - electric_refrigerator_n_01 lettuce_n_03_1 - lettuce_n_03 raspberry_n_02_1 - raspberry_n_02)\n    (:init (ontop broccoli_n_02_1 countertop_n_01_1) (ontop broccoli_n_02_2 countertop_n_01_1) (ontop cereal_n_03_1 countertop_n_01_1) (ontop lettuce_n_03_1 countertop_n_01_1) (ontop raspberry_n_02_1 countertop_n_01_1) (same_obj broccoli_n_02_1 broccoli_n_02_1) (same_obj broccoli_n_02_2 broccoli_n_02_2) (same_obj cabinet_n_01_1 cabinet_n_01_1) (same_obj cereal_n_03_1 cereal_n_03_1) (same_obj countertop_n_01_1 countertop_n_01_1) (same_obj electric_refrigerator_n_01_1 electric_refrigerator_n_01_1) (same_obj lettuce_n_03_1 lettuce_n_03_1) (same_obj raspberry_n_02_1 raspberry_n_02_1))\n    (:goal (and (nextto broccoli_n_02_1 broccoli_n_02_2) (inside raspberry_n_02_1 electric_refrigerator_n_01_1) (inside lettuce_n_03_1 electric_refrigerator_n_01_1) (inside cereal_n_03_1 cabinet_n_01_1)))\n)",
      "demo": null
    }
  },
  "domain_pddl": "(define (domain igibson)\n\n    (:requirements :strips :adl :typing :negative-preconditions)\n\n    (:types \n        vacuum_n_04 facsimile_n_02 dishtowel_n_01 apparel_n_01 seat_n_03 bottle_n_01 mouse_n_04 window_n_01 scanner_n_02 \n        sauce_n_01 spoon_n_01 date_n_08 egg_n_02 cabinet_n_01 yogurt_n_01 parsley_n_02 notebook_n_01 dryer_n_01 saucepan_n_01 \n        soap_n_01 package_n_02 headset_n_01 fish_n_02 vehicle_n_01 chestnut_n_03 grape_n_01 wrapping_n_01 makeup_n_01 mug_n_04 \n        pasta_n_02 beef_n_02 scrub_brush_n_01 cracker_n_01 flour_n_01 sunglass_n_01 cookie_n_01 bed_n_01 lamp_n_02 food_n_02 \n        painting_n_01 carving_knife_n_01 pop_n_02 tea_bag_n_01 sheet_n_03 tomato_n_01 agent_n_01 hat_n_01 dish_n_01 cheese_n_01 \n        perfume_n_02 toilet_n_02 broccoli_n_02 book_n_02 towel_n_01 table_n_02 pencil_n_01 rag_n_01 peach_n_03 water_n_06 cup_n_01 \n        radish_n_01 marker_n_03 tile_n_01 box_n_01 screwdriver_n_01 raspberry_n_02 banana_n_02 grill_n_02 caldron_n_01 vegetable_oil_n_01 \n        necklace_n_01 brush_n_02 washer_n_03 hamburger_n_01 catsup_n_01 sandwich_n_01 plaything_n_01 candy_n_01 cereal_n_03 door_n_01 \n        food_n_01 newspaper_n_03 hanger_n_02 carrot_n_03 salad_n_01 toothpaste_n_01 blender_n_01 sofa_n_01 plywood_n_01 olive_n_04 briefcase_n_01 \n        christmas_tree_n_05 bowl_n_01 casserole_n_02 apple_n_01 basket_n_01 pot_plant_n_01 backpack_n_01 sushi_n_01 saw_n_02 toothbrush_n_01 \n        lemon_n_01 pad_n_01 receptacle_n_01 sink_n_01 countertop_n_01 melon_n_01 bracelet_n_02 modem_n_01 pan_n_01 oatmeal_n_01 calculator_n_02 \n        duffel_bag_n_01 sandal_n_01 floor_n_01 snack_food_n_01 stocking_n_01 dishwasher_n_01 pencil_box_n_01 chicken_n_01 jar_n_01 alarm_n_02 \n        stove_n_01 plate_n_04 highlighter_n_02 umbrella_n_01 piece_of_cloth_n_01 bin_n_01 ribbon_n_01 chip_n_04 shelf_n_01 bucket_n_01 shampoo_n_01 \n        folder_n_02 shoe_n_01 detergent_n_02 milk_n_01 beer_n_01 shirt_n_01 dustpan_n_02 cube_n_05 broom_n_01 candle_n_01 pen_n_01 microwave_n_02 \n        knife_n_01 wreath_n_01 car_n_01 soup_n_01 sweater_n_01 tray_n_01 juice_n_01 underwear_n_01 orange_n_01 envelope_n_01 fork_n_01 lettuce_n_03 \n        bathtub_n_01 earphone_n_01 pool_n_01 printer_n_03 sack_n_01 highchair_n_01 cleansing_agent_n_01 kettle_n_01 vidalia_onion_n_01 mousetrap_n_01 \n        bread_n_01 meat_n_01 mushroom_n_05 cake_n_03 vessel_n_03 bow_n_08 gym_shoe_n_01 hammer_n_02 teapot_n_01 chair_n_01 jewelry_n_01 pumpkin_n_02 sugar_n_01 \n        shower_n_01 ashcan_n_01 hand_towel_n_01 pork_n_01 strawberry_n_01 electric_refrigerator_n_01 oven_n_01 ball_n_01 document_n_01 sock_n_01 beverage_n_01 \n        hardback_n_01 scraper_n_01 carton_n_02\n        agent\n    )\n\n    (:predicates \n        (inside ?obj1 - object ?obj2 - object)\n        (nextto ?obj1 - object ?obj2 - object)\n        (ontop ?obj1 - object ?obj2 - object)\n        (under ?obj1 - object ?obj2 - object)\n        (cooked ?obj1 - object)\n        (dusty ?obj1 - object)\n        (frozen ?obj1 - object)\n        (open ?obj1 - object)\n        (stained ?obj1 - object)\n        (sliced ?obj1 - object)\n        (soaked ?obj1 - object)\n        (toggled_on ?obj1 - object)\n        (onfloor ?obj1 - object ?floor1 - object)\n        (holding ?obj1 - object)\n        (handsfull ?agent1 - agent)\n        (in_reach_of_agent ?obj1 - object)\n        (same_obj ?obj1 - object ?obj2 - object)\n    )\n\n    (:action navigate_to\n        :parameters (?objto - object ?agent - agent)\n        :precondition (not (in_reach_of_agent ?objto))\n        :effect (and (in_reach_of_agent ?objto) \n                    (forall \n                        (?objfrom - object) \n                        (when \n                            (and \n                                (in_reach_of_agent ?objfrom) \n                                (not (same_obj ?objfrom ?objto))\n                            )\n                            (not (in_reach_of_agent ?objfrom))\n                        )\n                    )\n                )\n    )\n\n    (:action grasp\n    :parameters (?obj - object ?agent - agent)\n    :precondition (and (not (holding ?obj))\n                        (not (handsfull ?agent)) \n                        (in_reach_of_agent ?obj)\n                        (not (exists (?obj2 - object) (and (inside ?obj ?obj2) (not (open ?obj2)))))\n                    )\n    :effect (and (holding ?obj) \n                    (handsfull ?agent)\n                    ;; Conditional effects for all predicates involving ?obj and ?other_obj\n                    (forall (?other_obj - object)\n                        (and (not (inside ?obj ?other_obj))\n                             (not (ontop ?obj ?other_obj))\n                             (not (under ?obj ?other_obj))\n                             (not (under ?other_obj ?obj))\n                             (not (nextto ?obj ?other_obj))\n                             (not (nextto ?other_obj ?obj))\n                             (not (onfloor ?obj ?other_obj))\n                             ;; Add other predicates as needed\n                        )\n                    )\n                )\n    )\n\n    (:action release\n        :parameters (?obj - object ?agent - agent)\n        :precondition (and (holding ?obj))\n        :effect (and (not (holding ?obj))\n                        (not (handsfull ?agent)))\n    )\n    \n\n    \n\n    (:action place_ontop \n        :parameters (?obj_in_hand - object ?obj - object ?agent - agent)\n        :precondition (and (holding ?obj_in_hand) \n                            (in_reach_of_agent ?obj))\n        :effect (and (ontop ?obj_in_hand ?obj) \n                        (not (holding ?obj_in_hand)) \n                        (not (handsfull ?agent)))\n    )\n\n    (:action place_inside \n        :parameters (?obj_in_hand - object ?obj - object ?agent - agent)\n        :precondition (and (holding ?obj_in_hand) \n                            (in_reach_of_agent ?obj) \n                            (open ?obj))\n        :effect (and (inside ?obj_in_hand ?obj) \n                        (not (holding ?obj_in_hand)) \n                        (not (handsfull ?agent)))\n    )\n\n    (:action open\n        :parameters (?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (not (open ?obj))\n                            (not (handsfull ?agent)))\n        :effect (open ?obj)\n    )\n\n    (:action close\n        :parameters (?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (open ?obj)\n                            (not (handsfull ?agent)))\n        :effect (not (open ?obj))\n    )\n\n    (:action slice\n        :parameters (?obj - object ?knife - knife_n_01 ?agent - agent)\n        :precondition (and (holding ?knife) \n                            (in_reach_of_agent ?obj))\n        :effect (sliced ?obj)\n    )\n\n    (:action slice-carvingknife\n        :parameters (?obj - object ?knife - carving_knife_n_01 ?board - countertop_n_01 ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj)\n                           (holding ?knife)\n                           (ontop ?obj ?board)\n                           (not (sliced ?obj)))\n        :effect (sliced ?obj)\n    )\n\n\n    (:action place_onfloor\n        :parameters (?obj_in_hand - object ?floor - floor_n_01 ?agent - agent)\n        :precondition (and (holding ?obj_in_hand) \n                            (in_reach_of_agent ?floor))\n        :effect (and (onfloor ?obj_in_hand ?floor) \n                        (not (holding ?obj_in_hand)) \n                        (not (handsfull ?agent)))\n    )\n\n    (:action place_nextto\n        :parameters (?obj_in_hand - object ?obj - object ?agent - agent)\n        :precondition (and (holding ?obj_in_hand) \n                            (in_reach_of_agent ?obj))\n        :effect (and (nextto ?obj_in_hand ?obj) \n                        (nextto ?obj ?obj_in_hand)\n                        (not (holding ?obj_in_hand)) \n                        (not (handsfull ?agent)))\n    )\n\n    (:action place_nextto_ontop\n        :parameters (?obj_in_hand - object ?obj1 - object ?obj2 - object ?agent - agent)\n        :precondition (and (holding ?obj_in_hand) \n                            (in_reach_of_agent ?obj1))\n        :effect (and (nextto ?obj_in_hand ?obj1) \n                        (nextto ?obj1 ?obj_in_hand)\n                        (ontop ?obj_in_hand ?obj2)\n                        (not (holding ?obj_in_hand)) \n                        (not (handsfull ?agent)))\n    )\n\n    (:action clean_stained_brush\n        :parameters (?scrub_brush - scrub_brush_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (stained ?obj)\n                            (soaked ?scrub_brush)\n                            (holding ?scrub_brush))\n        :effect (not (stained ?obj))\n    )\n\n    (:action clean_stained_cloth\n        :parameters (?rag - piece_of_cloth_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (stained ?obj)\n                            (soaked ?rag)\n                            (holding ?rag))\n        :effect (not (stained ?obj))\n    )\n\n    (:action clean_stained_handowel\n        :parameters (?hand_towel - hand_towel_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (stained ?obj)\n                            (soaked ?hand_towel)\n                            (holding ?hand_towel))\n        :effect (not (stained ?obj))\n    )\n\n    (:action clean_stained_towel\n        :parameters (?hand_towel - towel_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (stained ?obj)\n                            (soaked ?hand_towel)\n                            (holding ?hand_towel))\n        :effect (not (stained ?obj))\n    )\n\n    (:action clean_stained_dishtowel\n        :parameters (?hand_towel - dishtowel_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (stained ?obj)\n                            (soaked ?hand_towel)\n                            (holding ?hand_towel))\n        :effect (not (stained ?obj))\n    )\n\n    (:action clean_stained_dishwasher \n        :parameters (?dishwasher - dishwasher_n_01 ?obj - object ?agent - agent)\n        :precondition (and (holding ?obj)\n                            (in_reach_of_agent ?dishwasher))\n        :effect (not (stained ?obj))\n    )\n\n    (:action clean_stained_rag\n        :parameters (?rag - rag_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (stained ?obj)\n                            (soaked ?rag)\n                            (holding ?rag))\n        :effect (not (stained ?obj))\n    )\n\n    (:action soak\n        :parameters (?obj1 - object ?sink - sink_n_01 ?agent - agent)\n        :precondition (and (holding ?obj1) \n                            (in_reach_of_agent ?sink)\n                            (toggled_on ?sink))\n        :effect (soaked ?obj1)\n    )\n\n    (:action soak_teapot\n        :parameters (?obj1 - object ?agent - agent ?teapot - teapot_n_01)\n        :precondition (and (holding ?obj1) \n                            (in_reach_of_agent ?teapot))\n        :effect (soaked ?obj1)\n    )\n\n    (:action place_under ; place object 1 under object 2\n        :parameters (?obj_in_hand - object ?obj - object ?agent - agent)\n        :precondition (and (holding ?obj_in_hand) \n                            (in_reach_of_agent ?obj))\n        :effect (and (under ?obj_in_hand ?obj) \n                        (not (holding ?obj_in_hand)) \n                        (not (handsfull ?agent)))\n    )\n\n    (:action toggle_on\n        :parameters (?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj)\n                            (not (handsfull ?agent)))\n        :effect (toggled_on ?obj)\n    )\n\n    (:action clean_dusty_rag\n        :parameters (?rag - rag_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (dusty ?obj)\n                            (holding ?rag))\n        :effect (not (dusty ?obj))\n    )\n\n    (:action clean_dusty_towel\n        :parameters (?towel - towel_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (dusty ?obj)\n                            (holding ?towel))\n        :effect (not (dusty ?obj))\n    )\n\n    (:action clean_dusty_cloth\n        :parameters (?rag - piece_of_cloth_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (dusty ?obj)\n                            (holding ?rag))\n        :effect (not (dusty ?obj))\n    )\n\n    (:action clean_dusty_brush\n        :parameters (?scrub_brush - scrub_brush_n_01 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (dusty ?obj)\n                            (holding ?scrub_brush))\n        :effect (not (dusty ?obj))\n    )\n\n    (:action clean_dusty_vacuum\n        :parameters (?vacuum - vacuum_n_04 ?obj - object ?agent - agent)\n        :precondition (and (in_reach_of_agent ?obj) \n                            (dusty ?obj)\n                            (holding ?vacuum))\n        :effect (not (dusty ?obj))\n    )\n\n    (:action freeze\n        :parameters (?obj - object ?fridge - electric_refrigerator_n_01)\n        :precondition (and (inside ?obj ?fridge)\n                           (not (frozen ?obj)))\n        :effect (frozen ?obj)\n    )\n\n    (:action cook\n        :parameters (?obj - object ?pan - pan_n_01)\n        :precondition (and (ontop ?obj ?pan)\n                           (not (cooked ?obj)))\n        :effect (cooked ?obj)\n    )\n\n)"
}